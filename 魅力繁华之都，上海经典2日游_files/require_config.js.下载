(function() {
	var baseUrl = Lizard.webresourceBaseUrl;

	require.config({
      paths: {
          'gsCommonJs': baseUrl + 'js/Common/require_config',
          'gsCommonModel': baseUrl + 'js/Common/CommonModel',
          'gsCommonStore': baseUrl + 'js/Common/CommonStore',
          'gsCommentAskTrave': baseUrl + 'js/Common/CommentAskTrave',
          'gsCommonGeolocation': baseUrl + 'js/Common/CommonGeolocation',
          'gsCommonTradingLogic': baseUrl + 'js/Common/CommonTradingLogic',
          'gsCommonMap': baseUrl + 'js/Common/CommonMap',
          'gsNextPage': baseUrl + 'js/Common/NextPage',
          'gsAppAgent': baseUrl + 'js/Common/AppAgent',
          'gsRouterRedirect': baseUrl + 'js/Common/RouterRedirect',
          'gsShowTime': baseUrl + 'js/Common/ShowTime',
          'gsCityList': baseUrl + 'js/Common/CommonCityList',
          'gsUIStar': baseUrl + 'js/Common/CUIStar',
          'gsImagesZoom': baseUrl + 'js/Common/ImagesZoom',
          'gsShowImages': baseUrl + 'js/Common/ShowImages',
          'gsUserLogin': baseUrl + 'js/Common/UserLogin',

          'gsCommon':baseUrl+'js/Common/Common',
          'templateCitylist':baseUrl+'templates/citylist.html',
          'gsErrorPop': baseUrl + 'js/Common/ErrorPop',
          'gsErrorPopModel': baseUrl + 'js/Common/ErrorPopModel',
          'gsCommonAddSchedule': baseUrl + 'js/Common/CommonAddSchedule',
          'gsCommonImgSlider': baseUrl + 'js/Common/CommonImgSlider',
          'gsCommonAddTravelPlan': baseUrl + 'js/Common/CommonAddTravelPlan',
          'gsCitySearchHistory': baseUrl + 'js/Common/CitySearchHistory',

          'gsIscroll': baseUrl + 'js/Common/iscroll',
          'gsBaiduGrab': baseUrl + 'js/Common/BaiduGrab',
          'gsImgUpLoader': baseUrl + 'js/Common/imgUpLoad',
          'gsGoToHome': baseUrl + 'js/Common/goToHomeBox',
          'gsHistory': baseUrl + 'js/Common/CommonHistory',
          'encypter': baseUrl + 'js/Common/encypter',
          'gsBusinessJob': baseUrl + 'js/Common/CommonBusinessJob',
          'gsVideo': baseUrl + 'js/Common/video',
          'gsRootView':baseUrl+'js/Common/RootView',
          'gsTimeEditor': baseUrl + 'js/Common/tiemSpanEditor',
          'gsTimeSelector': baseUrl + 'js/Common/timeSelector',
          'gsDateSelector': baseUrl + 'js/Common/dateSelector',
          'gsRealName': baseUrl + 'js/Common/gsRealName',
          'gsExtendImgUploader': baseUrl + 'js/Common/extendImgUpload',
          'gsHeadImgUploader': baseUrl + 'js/Common/headImgUpLoad',
          'gsCheckLogin': baseUrl + 'js/Common/checkLogin',
      }
	});
})();
define("gsCommonJs", function(){});

define('gsCommonStore',['cStore', 'cCoreInherit', 'cUtility'], function (AbstractStore, cCoreInherit, cUtility) {
    var CommonStore = CommonStore || {};

    //当前定位状态的定义
    //初始化
    CommonStore.PAGE_STATE_INIT = 0;
    //开始定位
    CommonStore.PAGE_STATE_POS_START = 1;
    //定位完成
    CommonStore.PAGE_STATE_POS_COMPLETE = 2;
    //定位失败
    CommonStore.PAGE_STATE_POS_ERROR = 3;
    //当前城市不再服务范围
    CommonStore.PAGE_STATE_CITY_NO_SERVICE = 4;
    

    /**************************************
     * @description:  搜索页城市列表：历史城市
     */
    CommonStore.HistoryCityStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'GS_H5_HISTORY_CITY';
            this.lifeTime = '15D';
            this.defaultData = {
                inter: [],
                inland: [],
                last: null,
                tab: 0
            };
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    //BU定位信息
    CommonStore.GeoLocationStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = "GS_H5_GEOLOCATION";
            this.lifeTime = '10M';
        },
        initialize: function ($super, options) {
            $super(options);
        },
        setPosInfo: function (pos) {
            for (var key in pos) {
                this.setAttr(key, pos[key]);
            }
        }
    });
    //BU定位到城市信息
    CommonStore.GeoCityStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = "GS_H5_GEOCITY";
            this.lifeTime = '10M';
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /**
    * 关键字查询历史 store
    */
    CommonStore.KWHistoryStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'GS_H5_KEYWORD_HISTORY';
            this.lifeTime = '365D';
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /**
    * 攻略页面跳转history， 回退使用
    */

    CommonStore.ForwardHistoryStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'GS_H5_PAGE_HISTORY_MAP';
            this.lifeTime = '1D';
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /**
    * 是否展示下载app标识
    */

    CommonStore.DownloadFlagStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'GS_H5_IS_SHOW_DOWNLOAD';
            this.lifeTime = '1D';
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /**
    * 存储城市信息
    */
    CommonStore.CityListStore = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'GS_H5_CITY_LIST_V0_CACHE';
            this.lifeTime = '365D';
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /*****************************
     * @description: 底部box过期条件(点击)
     */
    CommonStore.ifToGsHomeClick = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'ifGoToHomeClick';
            this.lifeTime = '5d';
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });
    /*****************************
     * @description: 底部box过期条件(不点击)
     */
    CommonStore.ifToGsHome = new cCoreInherit.Class(AbstractStore, {
        __propertys__: function () {
            this.key = 'ifGoToHome';
            this.lifeTime = '3d';
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });

    return CommonStore;
});

define('gsBusinessJob',[
        'cHybridShell'
        ],
    function(
        cHybridShell
        ){
    var job = {
        callbackFunction:{},
        defaultCallback: function(){}, //6.18之前， native没有返回businessCode， 没办法区分是哪个callback
        /*
            param:{
                businessCode: int,//job 服务号
                data: JSON, //传递给native 的参数
                callback: function //回调函数
            }

        */
        doBusinessJob : function(param){
            var businessCode = param.businessCode,
                self = this;
            if(!param.businessCode){
                return;
            }

            param.data = param.data || {};
            //param.data.actionid = parseInt(Math.random()*10000000);
            var sequenceId = "gs" + parseInt(Math.random()*10000000);

             if(param.callback){
                this.callbackFunction[sequenceId] = param.callback;
                this.defaultCallback = param.callback;
                this.abtestingCallback = param.abtestingCallback || this.abtestingCallback;
                this.shareCallback = param.shareCallback || this.shareCallback;

                var oldcallback = app.callback;
                app.callback = function(res) {
                    var tagnames = res.tagname;
                    switch (tagnames) {
                        case "do_business_job":
                            if(res.param && res.param.sequenceId && self.callbackFunction[res.param.sequenceId]){
                                self.callbackFunction[res.param.sequenceId](res);
                            }else if(res.param.sequenceId && res.param.sequenceId == 'noCallBack'){
                                //donothing
                            }else{
                                self.defaultCallback(res);
                            }

                            break;
                        case "back":
                            param.slideCallback();
                            break;
                        case "call_custom_share":
                        case "call_one_share":
                            //分享成功之后的埋点
                            if(typeof window['__bfi'] == 'undefined') window['__bfi'] = [];
                            window['__bfi'].push(['_tracklog', "100844", "actiontype=click&actioncode=c_share&pageid=" + Lizard.instance.curView.hpageid]);

                            self.shareCallback && self.shareCallback(res);
                            break;
                        case "get_abtesting_info":
                            self.abtestingCallback && self.abtestingCallback(res);
                            break;
                        default:
                            oldcallback(res);
                            break;
                    }
                }
            }
            if(!param.notDoJob){
                CtripBusiness.app_do_business_job(param.port || 6, businessCode, param.data || {}, sequenceId);
            }
        }
    };

    return job;
});

define('gsAppAgent',[],function() {
    var appAgent = {

        ua: navigator.userAgent.toLowerCase(),

        //是微信环境
        isWeixinBrowser:function(){

            var type = /micromessenger/.test(this.ua);
            return type;
            
        },

        // 是APP环境
        isHybrid: function() {

            var type = /ctripwireless/.test(this.ua);
            return type;

        },

        // 是独立app
        isGsHybrid: function() {

            var type = /gs_wireless/.test(this.ua);
            return type;

        },

        // 是美食林app
        isSmlHybrid: function () {

            var type = /sml_wireless/.test(this.ua);
            return type;

        },

        // 青春版
        isYouth: function() {

            var type = /youth_ctripwireless/.test(this.ua);
            return type;

        },

        // 标准版
        isStandard: function() {

            var type = false;

            if (this.isHybrid() && !this.isYouth()) {
                type = true;
            }

            return type;

        },

        isQuickApp: function(){
            var type = /hap/.test(this.ua);
            return type;
        },

        // APP跳转URL 前缀
        appUrl: function() {
            var url = 'ctrip://wireless';
            if(this.isYouth()){
                url = 'ctripyouth://wireless';
            }

            if(this.isGsHybrid()){
                url = 'ctripgs://wireless';
            }
            if (this.isSmlHybrid()) {
                url = 'ctripsml://wireless';
            }

            return url;
        },

        // 是否苹果
        isApple: function() {

            var type = /iphone|ipad|ipod/.test(this.ua);
            return type;

        },

        //是否是iphonex
        isIphoneX:function(){

            var type = /isiphonex/.test(this.ua);
            return type;

        },

        // 是否苹果iPod、iPad环境
        isApplePod: function() {

            var type = /ipad|ipod/.test(this.ua);
            return type;

        },

        // 是否Android
        isAndroid: function() {

            var type = /android/.test(this.ua);
            return type;

        },

        //是否是iphonex
        isIphoneX:function(){
            
            var type = /isiphonex/.test(this.ua);
            return type;
            
        }, 

        // sysCode
        appType: function() {

            var sysCode = 0;

            if (this.isApple()) {

                if (this.isYouth()) {
                    sysCode = 16;
                } else {
                    sysCode = 12;
                }

            } else {

                if (this.isYouth()) {
                    sysCode = 36;
                } else {
                    sysCode = 32;
                }

            }

            return sysCode;

        },

        // APP版本
        appVersion: function() {

            var type = '';
            type = this.ua.slice(this.ua.indexOf("ctripwireless"));
            type = type.slice(type.indexOf("_") + 1);
            return type;

        },

        // 独立APP版本
        gsAppVersion: function() {

            var type = '';
            type = this.ua.slice(this.ua.indexOf("wireless"));
            type = type.slice(type.indexOf("_") + 1);
            return type;

        },

        getCtripAppVersion: function(){
            if(this.isHybrid()){
                return Lizard.app.version.toString();
            }

            return "";
        },

        // 获取独立app版本
        getGsHybridVersion: function () {
            var version = this.ua.match(/gs_wireless_[\s\S]*/)[0].replace("gs_wireless_", "");
            return version;
        },

        /*
            比较版本号， 参数待比较版本号返回值：
            -1： 待比较版本号 < app版本号
            0 ： 待比较版本号 = app版本号
            1 ： 待比较版本号 > app版本号
        */
        compareAppVersion: function(currentVersion){
            currentVersion = (currentVersion||"") + "";
            var appVersion;
            if (this.isGsHybrid()) {
                appVersion = this.getGsHybridVersion();
            } else {
                appVersion = this.getCtripAppVersion();
            }
            var appArr = appVersion.split("."),
            currentArr = currentVersion.split("."), i, result;

            if (appArr.length > currentArr.length) {
                for (i = 0; i < appArr.length - currentArr.length; i++) {
                    currentArr.push(0);
                }
            } else if (appArr.length < currentArr.length) {
                for (i = 0; i < currentArr.length - appArr.length; i++) {
                    appArr.push(0);
                }
            }

            for (i = 0; i < currentArr.length; i++) {
                if (appArr.length > i) {
                    if (parseInt(currentArr[i], 0) > parseInt(appArr[i], 0)) {
                        result = 1;
                        break;
                    }else if(currentArr[i] == appArr[i]){
                        continue;
                    }else{
                        result = -1;
                        break;
                    }
                }else{
                    result = 1;
                }
            }

            if (typeof result == "undefined") {
                result = 0;
            }
            return result;
        }
    };

    return appAgent;
});
define('gsCommon',['cHybridShell', 'gsBusinessJob', 'gsAppAgent'], function (cHybridShell, businessJob, gsAppAgent) {
    var gsCommon = {
        //回到顶部
        backTop: function (options) {
            var $topcontrol = $("#topcontrol"),
                $win = $(window);
                $obj = options.obj || $(window);
            $obj.scroll(function () {
                if ($obj.scrollTop() >= $win.height()) {
                    $topcontrol.show(500).css("bottom", options.bottom);
                    options.callback && options.callback(1);
                } else {
                    $topcontrol.hide(500);
                    options.callback && options.callback(0);
                }
            });
            $topcontrol.off("click").on("click", function () {
                if(options.obj){
                    options.obj[0].scrollTop = 0;
                }else{
                    document.body.scrollTop = 0;
                }
                return false;
            });
        },

        /*
        *   文档地址： https://jimzhao2012.github.io/api/classes/CtripShare.html#method_app_call_custom_share
        *   param:
        *   {
        *       dataList : [],
        *       callback : function,
        *       errorCallback : function,
        *       businessCode : "",
        *       meta : {}
        *   }
        */
        ctripShare: function (param) {
            var fn = new cHybridShell.Fn('call_custom_share', function (data) {
                // TODO经测试， callback参数有点问题， 成功和失败返回一样， 需要找辛贵确认一下
            });
            fn.run(param.dataList, param.businessCode || "Destination", param.meta || {});
        },

        share: function (JSONString) {
            // if (Internal.isNotEmptyString(JSONString)) {
            //     jsonObj = JSON.parse(JSONString);
            //     jsonObj.service = "Destination";
            //     jsonObj.action = "share";

            //     paramString = JSON.stringify(jsonObj);
            //     if (Internal.isIOS || Internal.isOldVersion) {
            //         url = Internal.makeURLWithParam(paramString, 'ctrip://h5/destination/share');
            //         Internal.loadURL(url);

            //     } else if (Internal.isAndroid) {
            //         window.CtripGS_a.share(paramString);
            //     }
            // }
            this.shareCommon(JSONString);
        },

        getBusinessCode: function(shareParam){
            businessCode = shareParam.businessCode || "Destination";
            if(shareParam.pageId){
                businessCode += ("_" + shareParam.pageId);
            }else if(Lizard.instance.curView.hpageid){
                businessCode += ("_" + Lizard.instance.curView.hpageid);
            }

            return businessCode;
        },

        shareCommon: function (shareData, shareParam, customShare) {
            var self = this;
            if(1 == gsAppAgent.compareAppVersion("6.20")){ //6.20之前版本
                self.doShare(shareData, shareParam, false);
            }else{ //6.20及之后版本， 判断是否是特定手机
                var hasShareFlag = false;
                businessJob.doBusinessJob({
                    businessCode : 80013,
                    data:{},
                    callback: function(res){
                        if(!hasShareFlag){
                            if(!res || !res.param || !res.param.shareFlag || 1 != res.param.shareFlag){
                                self.doShare(shareData, shareParam, false, customShare);
                            }else{
                                self.doShare(shareData, shareParam, true, customShare);
                            }                         
                            
                            hasShareFlag = true;
                        }
                    }
                }); 

                setTimeout(function(){
                    if(!hasShareFlag){
                        self.doShare(shareData, shareParam, false, customShare);
                        hasShareFlag = true;
                    }
                }, 1000);
            }

            
        },

        /* 文档地址： https://jimzhao2012.github.io/api/classes/CtripShare.html#method_app_call_custom_share
        / 参数shareParam
        {
            businessCode:"",
            channels:["WeixinFriend", "WeixinCircle", "SinaWeibo", "QQ", "QQZone", "SMS", "Email", "Copy", "OSMore"], //不传或者空数组， 默认ALL
            meta: {},
            callback: function(){},
            errorCallBack: function(){}
        }
        */
        doShare: function (shareData, shareParam, needAlliance, customShare) {
            var dataList = [],
                self = this,
                shareParam = shareParam || {},
                businessCode = this.getBusinessCode(shareParam),
                meta = shareParam.meta || {},
                channels = shareParam.channels || [];
                shareType = shareParam.oneShareType || "";
    
            if ("string" == typeof shareData) {
                if (Internal.isNotEmptyString(shareData)) {
                    var jsonObj = JSON.parse(shareData);
                    // WeixinFriend------微信好友
                    // WeixinCircle----微信朋友圈
                    // SinaWeibo---------新浪微博
                    // QQ----------------QQ
                    // QQZone------------QQ空间
                    // SMS---------------短信
                    // Email-------------邮件
                    // Copy--------------复制
                    // OSMore------------系统更多分享
                    (0 == channels.length || -1 < channels.indexOf("WeixinFriend")) && dataList.push({
                        shareType: "WeixinFriend",
                        imageUrl: jsonObj.miniProgramPic || jsonObj.picUrl || "",
                        title:(jsonObj.shareType==='miniProgram'?jsonObj.miniProgramTitle:jsonObj.title)||'', // ，美食林列表页和餐厅详情页  分享到朋友是以小程序的形式，title取miniProgramTitle值
                        text: jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance),
                        miniProgramPath: jsonObj.miniProgramPath || "",
                        miniProgramID: jsonObj.miniProgramID || ""
                    });

                    (0 == channels.length || -1 < channels.indexOf("WeixinCircle")) && dataList.push({
                        shareType: "WeixinCircle",
                        imageUrl: jsonObj.picUrl || "",
                        title: (jsonObj.title || "") + (jsonObj.weixinCircleContent?("\n" +jsonObj.weixinCircleContent):""),
                        text: jsonObj.weixinCircleContent || jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });

                    (0 == channels.length || -1 < channels.indexOf("SinaWeibo")) && dataList.push({
                        shareType: "SinaWeibo",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weiboContent || "",
                        linkUrl: ""
                    });

                    (0 == channels.length || -1 < channels.indexOf("QQ")) && dataList.push({
                        shareType: "QQ",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });

                    (0 == channels.length || -1 < channels.indexOf("QQZone")) && dataList.push({
                        shareType: "QQZone",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });

                    (0 == channels.length || -1 < channels.indexOf("SMS")) && dataList.push({
                        shareType: "SMS",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });

                    (0 == channels.length || -1 < channels.indexOf("Email")) && dataList.push({
                        shareType: "Email",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });

                    (0 == channels.length || -1 < channels.indexOf("Copy")) && dataList.push({
                        shareType: "Copy",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weixinContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });

                    (0 == channels.length || -1 < channels.indexOf("OSMore")) && dataList.push({
                        shareType: "Default",
                        imageUrl: jsonObj.picUrl || "",
                        title: jsonObj.title || "",
                        text: jsonObj.weiboContent || "",
                        linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                    });
                }
            } else {
                jsonObj = shareData;
                (0 == channels.length || -1 < channels.indexOf("WeixinFriend")) && dataList.push({
                    shareType: "WeixinFriend",
                    imageUrl: jsonObj.miniProgramPic || jsonObj.picUrl || "",
                    title:(jsonObj.shareType==='miniProgram'?jsonObj.miniProgramTitle:jsonObj.title)||'',
                    text: jsonObj.weixinFriendContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance),
                    miniProgramPath: jsonObj.miniProgramPath || "",
                    miniProgramID: jsonObj.miniProgramID || ""
                });

                (0 == channels.length || -1 < channels.indexOf("WeixinCircle")) && dataList.push({
                    shareType: "WeixinCircle",
                    imageUrl: jsonObj.picUrl || "",
                    title: (jsonObj.title || "") + '\n' + (jsonObj.weixinCircleContent || ""),
                    text: jsonObj.weixinCircleContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });

                (0 == channels.length || -1 < channels.indexOf("SinaWeibo")) && dataList.push({
                    shareType: "SinaWeibo",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.weiboContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });

                (0 == channels.length || -1 < channels.indexOf("QQ")) && dataList.push({
                    shareType: "QQ",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.qqContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });

                (0 == channels.length || -1 < channels.indexOf("QQZone")) && dataList.push({
                    shareType: "QQZone",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.qqZoneContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });


                (0 == channels.length || -1 < channels.indexOf("SMS")) && dataList.push({
                    shareType: "SMS",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.smsContent || jsonObj.defaultContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });

                (0 == channels.length || -1 < channels.indexOf("Email")) && dataList.push({
                    shareType: "Email",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.emailContent || jsonObj.defaultContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });

                (0 == channels.length || -1 < channels.indexOf("Copy")) && dataList.push({
                    shareType: "Copy",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.copyContent || jsonObj.defaultContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });


                (0 == channels.length || -1 < channels.indexOf("OSMore")) && !customShare && dataList.push({
                    shareType: "Default",
                    imageUrl: jsonObj.picUrl || "",
                    title: jsonObj.title || "",
                    text: jsonObj.defaultContent || "",
                    linkUrl: self.rebuildUrl(jsonObj.shareUrl, needAlliance)
                });
            }
            
            var checkList = ["WeixinFriend", "WeixinCircle", "SinaWeibo", "QQ", "QQZone", "SMS", "Email", "Copy", "OSMore"];
            if(gsAppAgent.compareAppVersion('8.0.1') <1 && !!customShare){
                dataList.unshift(customShare);
                checkList.unshift('CustomList');
            }
            if (shareType.length != 0 && checkList.indexOf(shareType) > -1) {
                if ("string" == typeof shareData) {
                    if (Internal.isNotEmptyString(shareData)) {
                        var jsonObj = JSON.parse(shareData);
                        var imageUrl = jsonObj.picUrl || "";
                        var title = jsonObj.title || "";
                        var text = jsonObj.defaultContent || "";
                        var linkUrl = self.rebuildUrl(jsonObj.shareUrl, needAlliance);
                        var miniProgramPath = jsonObj.miniProgramPath || "";
                        var miniProgramID = jsonObj.miniProgramID || "";
                        var fn = new cHybridShell.Fn('call_one_share', function (data) { });
                        fn.run(shareType, imageUrl, title, text, linkUrl, businessCode, meta);
                    }
                } else {
                    var jsonObj = shareData;
                    var imageUrl = jsonObj.picUrl || "";
                    var title = jsonObj.title || "";
                    var text = jsonObj.defaultContent || "";
                    var linkUrl = self.rebuildUrl(jsonObj.shareUrl, needAlliance);
                    var miniProgramPath = jsonObj.miniProgramPath || "";
                    var miniProgramID = jsonObj.miniProgramID || "";
                    var fn = new cHybridShell.Fn('call_one_share', function (data) { });
                    fn.run(shareType, imageUrl, title, text, linkUrl, businessCode, meta);
                }
            } else {
                var fn = new cHybridShell.Fn('call_custom_share', function (data) { });
                fn.run(dataList, businessCode, meta);
            }

            
        },

        rebuildUrl: function(url, needAlliance){
            if(!url){
                return "";
            }

            if(needAlliance){
                return (url + (-1==url.indexOf("?")?"?":"&") + "Allianceid=29375&sid=808135");
            }

            return url;
        },

        //ios保留1px，使滚动到底时缓冲
        scrollFix: function (elem) {
            // Variables to track inputs
            var startY, startTopScroll;

            elem = (typeof elem == "object") ? elem : document.querySelector(elem);

            // If there is no element, then do nothing
            if (!elem)
                return;

            // Handle the start of interactions
            elem.addEventListener('touchstart', function (event) {
                startY = event.touches[0].pageY;
                startTopScroll = elem.scrollTop;

                if (startTopScroll <= 0)
                    elem.scrollTop = 1;

                if (startTopScroll + elem.offsetHeight >= elem.scrollHeight)
                    elem.scrollTop = elem.scrollHeight - elem.offsetHeight - 1;

            }, false);
        },

        copyAble: function () {
            $("body").attr("onselectstart", "");
        },

        lanuchApp: function (options) {

            // function isWeixinBrowser() {
            //     return /micromessenger/.test(navigator.userAgent.toLowerCase());
            // };

            // function weixinLanuch() {
            //     if (isWeixinBrowser() && window.Mkt && window.Mkt.Weixin) {
            //         window.Mkt.Weixin.wxIsInstall(function(data){
            //             if(data){
            //                 window.Mkt.Weixin.wxLanuch3rd({
            //                     'schema': options.url? options.url: '',
            //                     'isdown': options.IsDownload,
            //                     'callback': options.fail? options.fail: ''
            //                 });
            //             } else {
            //                 options.fail? options.fail(): '';
            //             }
            //         });
            //     }
            // };

            // function browserLanuch() {
            //     if (!isWeixinBrowser()) {
            //         if ('undefined' === typeof window['__wakeup']) {
            //             window['__wakeup'] = [];
            //         }

            //         AppUtility.IsDownload = options.IsDownload;
            //         window['__wakeup'].push({
            //             'url': '//m.ctrip.com/webapp/you/',
            //             'isdown': options.IsDownload,
            //             'backurl': options.url? options.url: '',
            //             'waking': options.fail? options.fail(): ''
            //         });
            //     }
            // };

            // if (options.isClick) {
            //     isWeixinBrowser()? weixinLanuch(): browserLanuch();
            // } else {
            //     browserLanuch();
            // }
        },

        /**
         * @实时埋点
         * @author liu.qiang@ctip.com
         * @param url {String} 参见 config.js UBT_URL
         * @param param {Object} 需要埋点的参数
         * @param ids {Object} pageid ,hpageid
         * @returns {String}
         */
        trackLog: function (param, pageids) {

            var key = '';
            if (Lizard.isInCtripApp || Lizard.isHybrid) {
                key = 'o_gs_' + pageids.hpageid + '_city_app_basic';
            } else {
                key = 'o_gs_' + pageids.pageid + '_city_app_basic';
            }
            window['__bfi'].push(['_tracklog', key, JSON.stringify(param)]);

        },

        /**
         * @实时埋点 6.18.2
         */
        cTrackLog: function (key, value, callback) {
            var str = '';
            if(typeof window['__bfi'] == 'undefined') window['__bfi'] = [];

            //转换为这样的字符串 "UID=${duid}&page_id=${page_id}&CITY=上海&FROMDATE=20130701"
            $.each(value, function(k, v){
                str += k + '=' + v + '&';
            });
            str = str.substr(0, str.length-1);

            window['__bfi'].push(['_tracklog', key + "", str, callback]);
        },

        /**
         * @实时埋点 8.3
         */
        gsTraceLog: function (key, value, callback) {
            if (typeof window['__bfi'] == 'undefined') window['__bfi'] = [];

            window['__bfi'].push(['_tracklog', key + "", JSON.stringify(value), callback]);
        },

        /**
        **@APP再营销埋点 6.13
        **param screenName{string} 页面名称，需求提供
        **param userInfo{json} 埋点附加信息,需求提供,本次暂时只传type（webapp，native，hybrid）
        **/
        adTrackLog: function(screenName,userInfo){
            if(Lizard.isInCtripApp){
                CtripBusiness.app_log_google_remarkting(screenName,userInfo);
            }
        },

        /**
        **@app记录用户在四大poi的浏览历史，用于获取点评列表
        **@param thisPoi，poi信息{"PoiId": 1111,setTime": "时间的毫秒数"}
        **/
        setUserHistory: function(thisPoi){
            if((Lizard.isHybrid || Lizard.isInCtripApp) && gsAppAgent.compareAppVersion("6.15") < 1){

                var callbackType = -1;

                businessJob.doBusinessJob({
                    businessCode : 801001,
                    data:{
                        "type": 1,                  //0为put  1为get
                        "key": "userHistory"        //key 为键
                    },
                    callback: function(res){
                        if(0 == callbackType){
                            return;
                        }
                        if(res.param && res.param.context){
                            var userHistorys = JSON.parse(res.param.context),
                                flag = false;

                            $.each(userHistorys, function(i,v){
                                //如果已经存在直接更新储存时间
                                if(v.PoiId === thisPoi.PoiId){
                                    flag = true;
                                    v.setTime = new Date().getTime();
                                }
                            });

                            //如果已经超过10个删除最后一项，插入到第一项
                            if (!flag) {
                                if(userHistorys.length == 10){
                                    userHistorys.pop();
                                    userHistorys.unshift(thisPoi);
                                } else {
                                    userHistorys.unshift(thisPoi);
                                }
                            }

                            callbackType = 0;
                            CtripBusiness.app_do_business_job(6,801001,{
                                "type": 0,                  //0为put  1为get
                                "key": "userHistory",      //key 为键
                                "context": JSON.stringify(userHistorys),   //context 为值
                                "expiry": 20000           //0为永不过期   单位为秒
                            },"noCallBack");
                        }else{
                           callbackType = 0;
                           CtripBusiness.app_do_business_job(6,801001,{
                                "type": 0,                  //0为put  1为get
                                "key": "userHistory",      //key 为键
                                "context": JSON.stringify([thisPoi]),      //context 为值
                                "expiry": 20000           //0为永不过期   单位为秒
                            },"noCallBack"); 
                        }
                    }
                });

                callbackType = 1;
            }
        },

        hideGsAppForH5: function(){
            return (document.cookie.indexOf("AllianceID=276874") > -1 && document.cookie.indexOf("SID=724220") > -1) 
                    || (document.cookie.indexOf("AllianceID=106147") > -1 && document.cookie.indexOf("SID=549949") > -1) 
                    || (document.cookie.indexOf("AllianceID=30159") > -1 && document.cookie.indexOf("SID=749360") > -1) 
                    || (document.cookie.indexOf("AllianceID=283778") > -1 && document.cookie.indexOf("SID=732699") > -1) 
                    || (document.cookie.indexOf("AllianceID=309340") > -1 && document.cookie.indexOf("SID=788076") > -1);
        },

        /**
        **获取存储数据
        **@param callfn 获取成功的回调函数
        **@param keyName, 存储时的key名字 
        **/
        getUserHistory: function(callfn,keyName){
            if((Lizard.isHybrid || Lizard.isInCtripApp) && gsAppAgent.compareAppVersion("6.15") < 1){
                businessJob.doBusinessJob({
                    businessCode : 801001,
                    data:{
                        "type": 1,                  //0为put  1为get
                        "key": keyName              //key 为键
                    },
                    callback: function(res){
                        callfn && callfn(res);
                    }
                });

            }

        },

        /**
        **配置图片路径
        **/
        httpImageUrl : {
            //白色样式
            "share":"http://pages.c-ctrip.com/you/header_icon/share",
            "map":"http://pages.c-ctrip.com/you/header_icon/map",
            "favorite":"http://pages.c-ctrip.com/you/header_icon/favorite",
            "favorited":"http://pages.c-ctrip.com/you/header_icon/favorited",
            "explain": "http://pages.c-ctrip.com/you/header_icon/explain",
            "home": "http://pages.c-ctrip.com/you/header_icon/home",
            "more": "http://pages.c-ctrip.com/you/header_icon/more",
            "news": "http://pages.c-ctrip.com/you/header_icon/news",
            "news-more": "http://pages.c-ctrip.com/you/header_icon/news-more",
            "photo": "http://pages.c-ctrip.com/you/header_icon/photo",
            "save": "http://pages.c-ctrip.com/you/header_icon/save",
            "search": "http://pages.c-ctrip.com/you/header_icon/search",
            "write": "http://pages.c-ctrip.com/you/header_icon/write",
            "write-prize": "http://pages.c-ctrip.com/you/header_icon/write-prize",
            "city":"https://pages.c-ctrip.com/you/header_icon/cities",
            "treasured-book": "http://pages.c-ctrip.com/you/header_icon/treasured-book",
            "telephone": "https://pages.c-ctrip.com/you/header_icon/telephone",

            //黑色样式
            "black-share":"http://pages.c-ctrip.com/you/header_icon/black-share",
            "black-map":"http://pages.c-ctrip.com/you/header_icon/black-map",
            "black-favorite":"http://pages.c-ctrip.com/you/header_icon/black-favorite",
            "black-favorited":"http://pages.c-ctrip.com/you/header_icon/black-favorited",
            "black-explain": "http://pages.c-ctrip.com/you/header_icon/black-explain",
            "black-home": "http://pages.c-ctrip.com/you/header_icon/black-home",
            "black-more": "http://pages.c-ctrip.com/you/header_icon/black-more",
            "black-news": "http://pages.c-ctrip.com/you/header_icon/black-news",
            "black-news-more": "http://pages.c-ctrip.com/you/header_icon/black-news-more",
            "black-photo": "http://pages.c-ctrip.com/you/header_icon/black-photo",
            "black-save": "http://pages.c-ctrip.com/you/header_icon/black-save",
            "black-search": "http://pages.c-ctrip.com/you/header_icon/black-search",
            "black-write": "http://pages.c-ctrip.com/you/header_icon/black-write",
            "black-write-prize": "http://pages.c-ctrip.com/you/header_icon/black-write-prize",
            "black-city":"https://pages.c-ctrip.com/you/header_icon/black-cities",
            "black-treasured-book": "http://pages.c-ctrip.com/you/header_icon/black-treasured-book",
            "black-telephone": "https://pages.c-ctrip.com/you/header_icon/black-telephone",

            //蓝色样式
            "blue-share":"http://pages.c-ctrip.com/you/header_icon/blue-share",
            "blue-map":"http://pages.c-ctrip.com/you/header_icon/blue-map",
            "blue-favorite":"http://pages.c-ctrip.com/you/header_icon/blue-favorite",
            "blue-favorited": "http://pages.c-ctrip.com/you/header_icon/blue-favorited",

            //黑色样式
            "gray-hotelasks-share":"https://pages.c-ctrip.com/you/header_icon/gray-hotelasks-share",

            "hotelasks-shares":"https://pages.c-ctrip.com/you/newasks/gs_asks_share_black",
            "guide-share": "http://pages.c-ctrip.com/you/header_icon/ic_share_black",
            "guide-search": "http://pages.c-ctrip.com/you/header_icon/ic_search_black",
            "guide-share-new": "http://pages.c-ctrip.com/you/header_icon/ic_share_black_new",
            "guide-search-new": "http://pages.c-ctrip.com/you/header_icon/ic_search_black_new",

            "asks-share":"https://pages.c-ctrip.com/you/newasks/gs_asks_share_black",
            "comment-new-share":"https://pages.ctrip.com/you/dianping/head/comment-share"
        },

        getRightHeaderList: function(params){
            if(!params || 0 == params.length){
                return;
            }
            var results = [];
            for(var i=0; i<params.length; i++){
                var result = this.getRightHeader(params[i]);
                if(result){
                    if (Lizard.isHybrid || Lizard.isInCtripApp || gsAppAgent.isGsHybrid()) {
                        results.push(result);
                    } else {
                        params[i].isH5Show? results.push(result): '';
                    }
                }
            }

            return results;
        },

        /**
         param:{
            tagname:"share",
            callback: function(){}
        }
        **/
        getRightHeader: function(param){
            if(!param.tagname || !this.httpImageUrl[param.tagname]){
                return;
            }

            var httpImageUrl = this.httpImageUrl[param.tagname],
                tag = '';

            if (gsAppAgent.isApple() && window.devicePixelRatio > 2) {
                httpImageUrl += "@3x.png";
                tag = "-3x";
            } else {
                httpImageUrl += "@2x.png";
                tag = "-2x";
            }
            return {
                tagname: "gs-" + param.tagname + tag,
                iconname: "useless",
                value: param.value||"",
                httpImageUrl: httpImageUrl,
                callback: param.callback||function(){}
            }
        },

        _getAidAndSid: function(callback){
            if (typeof window['__union'] === 'undefined') {
                 window['__union'] = [];
            }
            window['__union'].push({"callback":function(){
                var unionMktStr = window.localStorage.getItem("UNION"), data;
                if(!!unionMktStr){
                    data = JSON.parse(unionMktStr).data || {};
                }
                callback(data);
            }})
        },

        checkAidSid: function(ids,callback){
            this._getAidAndSid(function(data){
                data = data || {};
                var allianceid = data.AllianceID,
                    sid = data.SID,
                    value = false;
                ids.map(function(v,k){
                    if(v.allianceID == allianceid && v.sID == sid){
                        value = true;
                        return;
                    }
                }); 

                callback(value)
            })

        },

        hideBackButtonWithAid: function(){
            var ids=[
                    {
                        allianceID:281157,
                        sID:1517226
                    },
                    {
                        allianceID:281157,
                        sID: 1517225
                    }
                ];
            this.checkAidSid(ids, function(callback){
                if(callback){
                    $('.js_back').hide();
                }
            })
        },

        // 适配emoji
        adaptEmoji: function (dom, size, verticalAlign) {

            var getTextFeature = function getTextFeature(text, color) {
                try {
                    var canvas = document.createElement('canvas');
                    /*
                      因为进行scale以后的图案区域实际上不能确定，
                      理论上应该只在(0,0,1,1)，但有的也会在它周围的像素里，
                      综合效率的考虑，给一个2*2的范围是比较合适的;
                    */

                    canvas.width = 2;
                    canvas.height = 2;
                    var ctx = canvas.getContext('2d');
                    ctx.textBaseline = 'top';
                    ctx.font = '100px sans-serif';
                    ctx.fillStyle = color;
                    ctx.scale(0.01, 0.01);
                    ctx.fillText(text, 0, 0);
                    var imageData = ctx.getImageData(0, 0, 2, 2).data; // 在一些系统里Uint8ClampedArray不支持常规的数组方法，需要转换一下

                    var imageDataArr = [];

                    for (var i = 0; i < imageData.length; i++) {
                        imageDataArr[i] = imageData[i];
                    }

                    return imageDataArr.reduce(function (a, b) {
                        return a + b;
                    }, 0) > 0 ? imageDataArr.toString() : false;
                } catch (e) {
                    return false;
                }
            };

            var distribute = function distribute(text, mode) {
                var feature = getTextFeature(text, '#000');
                return mode ? feature && feature === getTextFeature(text, '#FFF') : feature;
            };

            var ifEmoji = function ifEmoji(text) {
                /*
                  用一个最悠久而常见 emoji 来判断当前系统是使用图片还是字体来显示 emoji，
                  若是图片则去做上色比对，否则只对可见性做判断。
                */
                var mode = distribute('😁');
                return distribute(text, mode);
            };

            // 判断浏览器是否支持显示彩色emoji
            if (ifEmoji('😁')) {
                return;
            }
            if (!!!twemoji) {
                return;
            }
            if (dom) {
                if (dom.length) {
                    for (var i = 0; i < dom.length; i++) {
                        twemoji.parse(dom[i]);
                    }
                } else if (dom.length === 0) {
                    twemoji.parse(document && document.body);
                } else {
                    twemoji.parse(dom);
                }
            } else {
                twemoji.parse(document && document.body);
            }
            size = size || '15px';
            verticalAlign = verticalAlign || "text-top"
            $(".emoji").css({
                "height": size,
                "width": size,
                "vertical-align": verticalAlign,
                "margin": "0 1.5px"
            });
        },
    };
    return gsCommon;
});

define('gsCommonModel',['cModel', 'cCoreInherit', 'cUtility', 'gsCommonStore', 'gsCommon'], function (AbstractModel, cCoreInherit, cUtility, CommonStore, gsCommon) {
    var CommonModel = CommonModel || {};
    var geoCityStore = CommonStore.GeoCityStore.getInstance();

    /********************************
     * @description:  最新接口， 根据gps获取目的地信息
     */

    CommonModel.doGetDistrictByLatlon = function (param, successCallback, errorCallback) {
        var model = CommonModel.getDistrictByLatlon.getInstance();
        model.setParam({
            "LatLng": {
                "Lng": param.lng,
                "Lat": param.lat
            },
            "NeedInheritedDistricts": param.NeedInheritedDistricts? param.NeedInheritedDistricts: false
        });
        model.excute(function (obj) {
            if (obj) {
                successCallback && successCallback(obj);
            } else {
                errorCallback && errorCallback(obj);
            }
        }, function () {
            errorCallback && errorCallback();
        }, false);
    };

    CommonModel.getDistrictByLatlon = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = '/soa2/13342/json/getgslocationinfo';
            this.method = "POST";
            this.param = {
                'LatLng':{
                    "Lng" : 0,
                    "Lat" : 0
                }
            };
        },

        initialize: function ($super, options) {
            $super(options);
        },

        paraData: function (data) {
            return data;
        }
    });

    /********************************
     * @description:  获取城市信息
     */
    CommonModel.getCurrentDestination = function (lat, lon, successCallback, errorCallback) {
        successCallback = typeof successCallback == "function" ? successCallback : function () { };
        errorCallback = typeof errorCallback == "function" ? errorCallback : function () { };

        $.ajax({
            url: '//m.ctrip.com/restapi/soa2/12378/json/ctriplbs',
            type: 'POST',
            dataType: 'JSON',
            data: {
                "latitude": lat,
                "longitude": lon,
                "coordType" : 'GCJ02'
            },
            success: function (json) {
                json = JSON.parse(json);
                if (json && json.ResponseStatus && json.ResponseStatus.Ack == 'Success') {
                    var districtInfo = {},
                        gpsInfo = json.gpsInfo || {},
                        gsCurrentCity = json.gsCurrentCity || {},
                        htlCurrentCity = json.htlCurrentCity || {},
                        ctripPOIInfo = json.ctripPOIInfo || {};
                    districtInfo.lat = gpsInfo.latitude || 0;
                    districtInfo.lng = gpsInfo.longitude || 0;
                    districtInfo.cityId = htlCurrentCity.geoID || 0;
                    districtInfo.districtId = gsCurrentCity.geoID || 0;
                    districtInfo.districtName = gsCurrentCity.geoCName || '';
                    districtInfo.parentId = ctripPOIInfo.countryId || 0;
                    districtInfo.parentName = ctripPOIInfo.country || '';

                    //手机定位信息直接返回
                    districtInfo.positionLat = lat;
                    districtInfo.positionLng = lon;

                    districtInfo.isInChina = !!gpsInfo.inChina;
                    districtInfo.pyName = gsCurrentCity.geoEName || '';

                    geoCityStore.set(districtInfo);
                    successCallback(districtInfo);
                } else {
                    errorCallback();
                }
            },
            error: function () {
                errorCallback();
            }
        });
    };

    /********************************
     * @description:  获取城市信息
     */
    CommonModel.getDestinationByCityId = function (lat, lon, cityId, successCallback, errorCallback, fromTag) {
        successCallback = typeof successCallback == "function" ? successCallback : function () { };
        errorCallback = typeof errorCallback == "function" ? errorCallback : function () { };

        $.ajax({
            url: '//m.ctrip.com/restapi/soa2/10318/json/GetPackageDistrictByCityId',
            type: 'POST',
            dataType: 'JSON',
            data: {
                "CityId": cityId,
                "Lat": lat,
                "Lng": lon

            },
            success: function (json) {
                json = JSON.parse(json);
                if (json && json.ResponseStatus && json.ResponseStatus.Ack == 'Success') {
                    var districtInfo = {};
                    var res = Lizard.S('GS_H5_GEOLOCATION');
                    if (res) {
                        districtInfo.lat = res.lat;
                        districtInfo.lng = res.lng;
                        //手机定位信息直接返回
                        districtInfo.positionLat = res.lat;
                        districtInfo.positionLng = res.lng;
                        districtInfo.address = res.address;
                    }
                    districtInfo.cityId = cityId;

                    if(json.DistrictId){
                        districtInfo.districtId = json.DistrictId;
                    }
                    if(json.DistrictName){
                        districtInfo.districtName = json.DistrictName;
                    }
                    geoCityStore.set(districtInfo);
                    gsCommon.cTrackLog(100091, {
                        'actionType': fromTag,
                        'actionCode': 'startPosition_GeoLocation_onCityComplete_getDestinationByCityId_success',
                        'timeStamp': new Date().getTime()
                    });
                    successCallback(districtInfo);
                } else {
                    var districtInfo = {};
                    var res = Lizard.S('GS_H5_GEOLOCATION');
                    if(res){
                        this.getCurrentDestination(res.lat, res.lng, successCallback, errorCallback);
                    }else{
                        gsCommon.cTrackLog(100091, {
                            'actionType': fromTag,
                            'actionCode': 'startPosition_GeoLocation_onCityComplete_getDestinationByCityId_error_1',
                            'timeStamp': new Date().getTime()
                        });
                        errorCallback();
                    }
                }
            },
            error: function () {
                gsCommon.cTrackLog(100091, {
                    'actionType': fromTag,
                    'actionCode': 'startPosition_GeoLocation_onCityComplete_getDestinationByCityId_error_0',
                    'timeStamp': new Date().getTime()
                });
                errorCallback();
            }
        });
    };


    // CommonModel.DestinationByGpsModel = new cCoreInherit.Class(AbstractModel, {
    //     __propertys__: function() {
    //         this.buildurl = function() {
    //             return "//m.ctrip.com/restapi/you/DistrictApi/NearCity";
    //         };

    //         this.method = 'GET';
    //         this.param = {
    //             pageindex: 1,
    //             pagesize: 1,
    //             lat: 0,
    //             long: 0,
    //             distance: 5000
    //         };
    //     },
    //     initialize: function($super, options) {
    //         $super(options);
    //     }
    // });


    /*
     *  关键字列表 Model
     */
    CommonModel.getInputCityList = function (data, successCallback, errorCallback) {
        successCallback = typeof successCallback == "function" ? successCallback : function () { };
        errorCallback = typeof errorCallback == "function" ? errorCallback : function () { };
        $.ajax({
            url: 'https://m.ctrip.com/restapi/soa2/10318/SearchDistrictList',
            type: 'GET',
            dataType: 'JSON',
            data: data,
            success: function (json) {
                json = JSON.parse(json);
                successCallback(json);
            },
            error: function () {
                errorCallback();
            }
        });
    };

    /*
     *  老接口，暂时不用
     */
    // CommonModel.KWListModel = new cCoreInherit.Class(AbstractModel, {
    //     __propertys__: function () {
    //         this.buildurl = function () {
    //             return "//m.ctrip.com/restapi/you/SearchApi/GetLenovo";
    //         };

    //         this.method = 'GET';

    //         /* 参数 */
    //         this.param = {
    //             pageindex: 1,
    //             pagesize: 20,
    //             searchtype: 1,
    //             keyword: '上海'
    //         };
    //         this.dataformat = this.paraData;
    //     },
    //     initialize: function ($super, options) {
    //         $super(options);
    //     },

    //     paraData: function (data) {
    //         return data.districts;
    //     }
    // });

    //添加度假行程
    CommonModel.addPlaneHotelSchedule = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/13517/ShoppingDataRestful";
            this.method = 'POST';
            this.param = {};
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });


    //添加日程
    CommonModel.addSchedule = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10191/AddSmartTrip";
            this.method = 'POST';
            this.param = {};
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });

    //加入旅行计划
    CommonModel.addTravelPlan = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10120/json/AddPoiToTravelPlan";
            this.method = 'POST';
            this.param = {};
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });

    //获取旅行计划列表
    CommonModel.getTravelPlanList = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10120/json/GetTravelPlanListByUID";
            this.method = 'POST';
            this.param = {};
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });

    //判断该poi是否点评过
    CommonModel.getIsComment = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10491/json/GetUserIsCommentPoi";
            this.param = {

            };
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });

    /*
     *   根据经纬度获取相关城市列表
     *
     */
    CommonModel.GetCurNearByCityList = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/22670/GetDistrictNearByByLoaltion";
            this.param = {
                LatLng: {
                    Lng: 121,
                    Lat: 31
                }
            };
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /*
    *   城市列表页获取城市数据， 之前数据是写死在本地， 为了减小app的size， 改成调接口
    *
    *   cbzhang
    */
    CommonModel.GetCityList = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10200/GetAppCityList";
            this.param = {
                "version": 0,
                "source": '',
                "needData": true
            };
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    /*
    *   验证美食商户端登录token
    *
    */
    CommonModel.checkUserToken = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = "/soa2/14248/json/getMerchantAccountIdByToken";
            this.param = {};
        },
        initialize: function ($super, options) {
            $super(options);
        }
    });

    CommonModel.saveBrowseHistory = new cCoreInherit.Class(AbstractModel, {
        __propertys__: function () {
            this.url = Lizard.restfullApiHttps + '11298/json/saveBrowseHistory';
            this.method = 'POST';
            this.param =  {

            };
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });

    return CommonModel;
});

define('gsCommonGeolocation',['libs',
    'cPageView',
    'cGeoService',
    'gsBusinessJob',
    'gsAppAgent',
    'gsCommon',
    'gsCommonStore',
    'gsCommonModel'
    ],
    function(libs,
        pageView,
        cGeoService,
        gsBusinessJob,
        appAgent,
        gsCommon,
        CommonStore,
        CommonModel
    ) {
    var LocateView = {

        GeoLocation: cGeoService.GeoLocation,

        geoLocationStore: CommonStore.GeoLocationStore.getInstance(),

        cityStore: CommonStore.GeoCityStore.getInstance(),

        /*
        *onPosComplete onComplete onCityComplete 三个成功回调,约定只传入一个,如都传入只返回最先取得的那个回调。
        *onCommonError  只回调一个错误
        */
        getLocationInfoOver716: function(options) {
            var self = this,
                tempObj = '',
                swithTag = {'FOODS': 'food', 'SHOPS': 'shopping'},
                startTimer = new Date().getTime(),
                nowTimer = '';

            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'getLocationInfo_geo_start', 'isHybridOver716': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
            //自保 timeout 逻辑
            self.timerInterval = setInterval(function() {
                nowTimer = new Date().getTime();
                if (self.getCitySwitchDataBackMark) {
                    clearInterval(self.timerInterval);
                } else if (nowTimer - startTimer >= options.timeout) {
                    clearInterval(self.timerInterval);
                    self.getCitySwitchDataTimeoutMark = true;
                    gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_timeout', 'isHybridOver716': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                    options.onCommonError? options.onCommonError(): '';
                }
            }, 5);

            gsBusinessJob.doBusinessJob({
                port: 1,
                businessCode: 'getCitySwitchData',
                data: { "bu": swithTag[options.fromTag]? swithTag[options.fromTag]: 'you'},
                callback: function(result) {
                    self.getCitySwitchDataBackMark = true;
                    if (self.getCitySwitchDataTimeoutMark) {
                        return; //过期不用
                    }
                    gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'getLocationInfo_callback_result', 'isHybridOver716': true, 'channelType': options.fromTag, 'result': JSON.stringify(result), 'timeStamp': new Date().getTime() });

                    if (!result.param || !result.param.geoAddress) {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_fail', 'isHybridOver716': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onCommonError? options.onCommonError(): '';
                        return; //无返回不用
                    }

                    //经纬度返回
                    if (result.param.geoAddress.lat && result.param.geoAddress.lng) {
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'getLocationInfo_geo_success', 'isHybridOver716': true, 'channelType': options.fromTag, 'lat': result.param.geoAddress.lat, 'lng': result.param.geoAddress.lng, 'timeStamp': new Date().getTime() });

                        if (options.onPosComplete) {
                            options.onPosComplete({
                                lat: result.param.geoAddress.lat,
                                lng: result.param.geoAddress.lng
                            });
                        } else if (options.onComplete && result.param.geoAddress.detailAddress) {
                            gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_address_success', 'isHybridOver716': true, 'channelType': options.fromTag, 'lat': result.param.geoAddress.lat, 'lng': result.param.geoAddress.lng, 'address': result.param.geoAddress.detailAddress, 'timeStamp': new Date().getTime() });
                            tempObj = {
                                lat: result.param.geoAddress.lat,
                                lng: result.param.geoAddress.lng,
                                address: result.param.geoAddress.detailAddress
                            }
                            self.geoLocationStore.setPosInfo(tempObj);
                            options.onComplete(tempObj);
                        } else if (options.onCityComplete && result.param.recommendMapLocation && result.param.recommendMapLocation.geoID) {
                            gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_destination_success', 'isHybridOver716': true, 'channelType': options.fromTag,'districtId': result.param.recommendMapLocation.geoID,'timeStamp': new Date().getTime() });
                            tempObj = {
                                lat: result.param.geoAddress.lat,
                                lng: result.param.geoAddress.lng,
                                address: result.param.geoAddress.detailAddress,
                                districtId: result.param.recommendMapLocation.geoID,
                                districtName: result.param.recommendMapLocation.geoCName,
                                districtEName: result.param.recommendMapLocation.geoEName
                            }
                            self.saveCityInfo(tempObj);
                            options.onCityComplete(tempObj);
                        } else {
                            options.onCommonError? options.onCommonError(): '';
                        }
                    } else {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_fail', 'isHybridOver716': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onCommonError? options.onCommonError(): '';
                    }
                }
            });
        },

        getLocationInfoOver703: function(options) {
            var self = this;

            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'getLocationInfo_geo_start', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
            gsBusinessJob.doBusinessJob({
                businessCode:80040,
                data:{
                    sequenceId:"locate" + parseInt(Math.random()*10000000),
                    timeout: options.timeout,
                    isForceLocate: !!options.noCache
                },
                callback: function(result){
                    if(!result.param || !result.param.result){
                        return;
                    }

                    var locationData = JSON.parse(result.param.result);
                    var districtValue = locationData.value || {};
                    if("geo" == locationData.type){ //获取gps之后的回调
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'getLocationInfo_geo_success', 'isHybridOver73': true, 'channelType': options.fromTag, 'lat': districtValue.lat, 'lng': districtValue.lng, 'geoType': districtValue.geoType, 'timeStamp': new Date().getTime() });

                        self.geoType = districtValue.geoType;
                        options.onPosComplete && options.onPosComplete({
                            lat:districtValue.lat,
                            lng:districtValue.lng,
                            geoType:districtValue.geoType
                        });
                    }else if("address" == locationData.type){ //获取address之后的回调
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_address_success', 'isHybridOver73': true, 'channelType': options.fromTag, 'lat': districtValue.lat, 'lng': districtValue.lng, 'geoType': self.geoType, 'address': districtValue.addrs || districtValue.detailAddress, 'timeStamp': new Date().getTime() });

                        districtValue.pois = [];
                        districtValue.geoType = self.geoType;
                        districtValue.address = districtValue.addrs || districtValue.detailAddress;
                        self.geoLocationStore.setPosInfo(districtValue);
                        options.onComplete && options.onComplete(districtValue);
                    }else if("GSDestination" == locationData.type){ //获取目的地信息之后的回调
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_destination_success', 'isHybridOver73': true, 'channelType': options.fromTag, 'isInChina': districtValue.isInChina, 'districtId': districtValue.districtId, 'districtName': districtValue.districtName, 'eName': districtValue.districtEName, 'timeStamp': new Date().getTime() });

                        var districtInfo = {
                            isInChina:districtValue.isInChina,
                            districtId:districtValue.districtId,
                            districtName:districtValue.districtName,
                            geoType:self.geoType,
                            eName:districtValue.districtEName
                        };
                        self.organizeDistrictInfo(districtInfo, options.needCity, options.onCityComplete, (options.onCityError || options.onCommonError));
                    }else if("CtripCity" == locationData.type){ //获取基础城市信息之后的回调
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_city_success', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });

                        districtValue.geoType = self.geoType;
                        self.saveCityInfo(districtValue);
                    }else if("1" == locationData.type){ //定位未开启
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_closed', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onPosError?options.onPosError():options.onCommonError();
                    }else if("2" == locationData.type){ //获取经纬度失败
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_fail', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onPosError?options.onPosError():options.onCommonError();
                    }else if("3" == locationData.type){ //定位超时
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_timeout', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onPosError?options.onPosError():options.onCommonError();
                    }else if("4" == locationData.type){ //逆地址解析失败
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_trans_address_fail', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onError?options.onError():options.onCommonError();
                    }else if("5" == locationData.type){ //城市ID解析失败
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_trans_city_fail', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onCityError?options.onCityError():options.onCommonError();
                    }else if("6" == locationData.type){ //目的地ID解析失败
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_trans_district_fail', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onCityError?options.onCityError():options.onCommonError();
                    }else{
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'getLocationInfo_geo_other_fail', 'isHybridOver73': true, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                        options.onCityError?options.onCityError():options.onCommonError();
                    }
                }
            });
        },

        /**
        cb.zhang 2017/3/28
        从app7.3 开始使用攻略native提供的定位接口， 同时兼容老版本和非携程app， 另外， 后端接口使用翁杰提供的新接口，
        ps：新接口可能有问题， 可能需要改回老接口
        ps: 以后只维护这一个接口， 其他的逐步删掉
        options： {
            agentName:'', //调用者名称，用于定位服务统计流量, 默认destination
            fromTag：'', //一条街调用会传值 FOODS SIGHT SHOPS localraiders
            needCity: 0, //是否需要等待基础的城市信息
            needAddress:0, //是否需要逆地址， 默认不需要， 如果需要， 则需等到onComplete返回
            locationType: '3', //获取类型， 默认3， 1：lat lon， 2：address， 3：city id
            timeout: 0, //目前的作用是，从执行过onStart后，超过timeout时间并且上述所有的回调都未执行时，执行onError回调
            onlyLocalstorage:1, //默认为false， 如果传true， 仅从localstorage取值, 取不到则调用onCommonError
            noCache: 1, //默认是false，是否启用native缓存，缓存时间为10min, 优先级最高
            useGSCache: 1, //默认false， 是否优先使用GS H5 localstorage 缓存
            onPosComplete: function(){}, //定位成功时的回调
            onComplete: function(){}, //可选，定位完成并且正确返回周边信息
            onCityComplete: function(){},//根据根据经定位经纬度，并且获得周围信息后，再通过将这些信息传到服务端，由服务端返回城市信息后，再执行
            onError: function(){} // 可选，未能成功返回周边信息
            onPosError: function(){} //定位失败
            onCityError: function(){} //上述服务端返回信息失败
            onCommonError: function(){} //通用错误回调， 优先级在上面三个callback之下
        }
        **/
        getLocationInfo: function(options){
            var self = this;
            var userNewServerApi = !(appAgent.isHybrid() && appAgent.compareAppVersion('7.3') == 1); //7.3之前app使用老接口， 其他（H5，独立APP等）使用新接口， lat lon 取目的地信息， 如果新接口有问题， 此处改为0 就可以；
            options = options || {};
            options.agentName = options.agentName || "destination";
            options.locationType = options.locationType || 3;
            options.timeout = options.timeout || 3000;
            options.fromTag = options.fromTag || '';

            self.myCounterNumber = 0;
            if(!options.noCache && (options.onlyLocalstorage || options.useGSCache)){
                var city = this.cityStore.get();
                if (city) {
                    options.onCityComplete && options.onCityComplete(city);
                    return;
                }

                if(options.onlyLocalstorage){
                    options.onCityError?options.onCityError():options.onCommonError();
                    return;
                }

                var geo = this.geoLocationStore.get();
                if (!!geo) {
                    if (options.onCityComplete) {
                        CommonModel.doGetDistrictByLatlon({lat: geo.lat, lng: geo.lng}, function(obj){
                            var objResult = obj.result || {};

                            self.organizeDistrictInfo({
                                districtId: objResult.districtId,
                                districtName: objResult.districtName,
                                eName: objResult.districtEName
                            }, options.needCity, options.onCityComplete, (options.onCityError || options.onCommonError));
                        }, options.onCityError||options.onCommonError);
                    }
                    return false;
                }
            }

            //删除上一次信息
            this.cityStore.remove();
            this.geoLocationStore.remove();

            if (appAgent.isHybrid() && appAgent.compareAppVersion('7.16') < 1) {
                //App 7.16版本调用基础封装的方法取定位
                self.getLocationInfoOver716(options);
            } else if (appAgent.isHybrid() && appAgent.compareAppVersion('7.3') < 1) {     //携程app 7.3及以上使用新定位
                //App 7.3版本调用攻略封装的方法取定位
                self.getLocationInfoOver703(options);
            } else {
                //其他， 保持原来接口
                var getAddSuccess = false;
                this.GeoLocation.Subscribe(options.agentName, {

                    onStart: function () {
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_geo_start', 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                    },

                    //坐标获取成功回掉, 调用攻略目的地服务获取目标数据
                    onPosComplete: function (lng, lat) {
                        if(1 == options.locationType){
                            getAddSuccess = true;
                        }
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_geo_success', 'lng': lng, 'lat': lat, 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });

                        // 使用新接口， lat lon 取目的地信息
                        if(userNewServerApi){
                            getAddSuccess = true;
                            if (options.onCityComplete) {
                                CommonModel.doGetDistrictByLatlon({lat: lat, lng: lng}, function(obj){
                                    var objResult = obj.result || {};
                                    self.organizeDistrictInfo({
                                        districtId: objResult.districtId,
                                        districtName: objResult.districtName,
                                        eName: objResult.districtEName
                                    }, options.needCity, options.onCityComplete, (options.onCityError || options.onCommonError));
                                }, options.onCityError || options.onCommonError);
                            }
                        }

                        options.onPosComplete && options.onPosComplete({
                            lat: lat,
                            lng: lng
                        });
                    },

                    //定位服务整体成功回掉：刷新缓存，对功能本身无影响
                    onComplete: function (data) {
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_address_success', 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });

                        if(2 == options.locationType){
                            getAddSuccess = true;
                        }
                        this.geoLocationStore.setPosInfo(data);

                        options.onComplete && options.onComplete(data);
                    },

                    //定位失败回掉
                    onPosError: function () {
                        if (!getAddSuccess) {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_geo_fail', 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                            options.onPosError?options.onPosError():options.onCommonError();
                        }
                    },

                    //由于框架奇葩的设计，定位三段服务不管哪一段超时都回调用这个回掉。
                    //获取经纬度失败时会调用onPosError，而获取经纬度超时则不会调用onPosError而会调用onError。
                    //在本服务中如果经纬度获取成功了，即使后面超时或者失败，都不会对服务结果造成影响，因此这里用代码将逻辑串起来。
                    onError: function () {
                        if (!getAddSuccess) {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_geo_timeout', 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                            options.onError?options.onError():options.onCommonError();
                        }
                    },

                    onCityComplete :function(data) {
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_city_success', 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });

                        if(3 == options.locationType){
                            getAddSuccess = true;
                        }

                        // 此处暂时不用， 使用lat lon取接口
                        if(userNewServerApi){
                            self.saveCityInfo(data);
                            return;
                        }

                        if(data.CityEntities && data.CityEntities.length > 0 && data.CityEntities[0].CityID){
                            var geos = this.geoLocationStore.get();
                            CommonModel.getDestinationByCityId(geos.lat, geos.lng, data.CityEntities[0].CityID, options.onCityComplete, options.onCityError||options.onCommonError );
                        }else{
                            options.onCityError?options.onCityError():options.onCommonError();
                        }
                    },

                    onCityError: function () {
                        if (!getAddSuccess) {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'h5_getLocationInfo_geo_trans_city_fail', 'channelType': options.fromTag, 'timeStamp': new Date().getTime() });
                            options.onCityError?options.onCityError():options.onCommonError();
                        }
                    }
                }, this, options.noCache, options.timeout);
            }
        },

        organizeDistrictInfo: function(districtInfo, needCity, callback, eCallBack){
            var geos = this.geoLocationStore.get(),
                self = this;

            self.myCounterNumber++;

            if(!!geos){
                if(needCity && !geos.cityId){
                    if (self.myCounterNumber <= 30) {
                        setTimeout(function(){
                            self.organizeDistrictInfo(districtInfo, needCity, callback, eCallBack);
                        }, 200);
                        return;
                    } else {
                        eCallBack();
                    }
                }
                districtInfo.lat = geos.lat;
                districtInfo.lng = geos.lng;
                districtInfo.geoType = geos.geoType;
                districtInfo.positionLat = geos.lat;
                districtInfo.positionLng = geos.lng;
                districtInfo.address = geos.address || geos.addrs || geos.detailAddress;
                districtInfo.cityId = geos.cityId;

                self.cityStore.set(districtInfo)
                callback && callback(districtInfo);
            }else{
                if (self.myCounterNumber <= 30) {
                    setTimeout(function(){
                        self.organizeDistrictInfo(districtInfo, needCity, callback, eCallBack);
                    }, 200);
                } else {
                    eCallBack();
                }
            }
        },

        saveCityInfo: function(cityInfo){
            var geos = this.geoLocationStore.get(),
                self = this;

            if(!cityInfo){
                return;
            }
            if("string" == typeof cityInfo){
                cityInfo = JSON.parse(cityInfo);
            }

            if(!!geos){
                geos.cityId = cityInfo.CityEntities[0].CityID;
                self.geoLocationStore.setPosInfo(geos);
            }else{
                setTimeout(function(){
                    self.saveCityInfo(cityInfo);
                }, 200);
            }
        },

        getGeolocation: function (successCallback, errorCallback) {
            this.getLocationInfo({
                onlyLocalstorage:1,
                onCityComplete:successCallback,
                onCityError:errorCallback
            });
        },

        startPosition: function (successCallback, errorCallback, isStrict, fromTag) {
            this.getLocationInfo({
                fromTag:fromTag,
                useGSCache:1,
                noCache:isStrict,
                onCityComplete:successCallback,
                onCommonError:errorCallback
            });
        },

        /**
        轻量级定位服务
        仅依靠框架获取到经纬度就调用攻略目的地服务获取最近城市。
        参数：
        agentName：  调用者名称，用于定位服务统计流量
        timeout：    超时时间单位毫秒，默认35秒即35000
        successCallback：不解释
        errorCallbac：   不解释
        */
        startPositionSimple: function (agentName,timeout, successCallback, errorCallback, posCallback) {
            this.getLocationInfo({
                agentName:agentName,
                timeout:timeout,
                noCache:1,
                onPosComplete:posCallback,
                onCityComplete:successCallback,
                onCommonError:errorCallback
            });
        },

    };
    return LocateView;
});

define('gsCommonTradingLogic',[
    'cHybridShell',
    'gsBusinessJob',
    'gsAppAgent',
    'gsCommon',
    'gsCommonGeolocation',
    'gsCommonModel',
    'cAbstractStorage'
], function (
    cHybridShell,
    businessJob,
    gsAppAgent,
    gsCommon,
    gsCommonGeolocation,
    CommonModel,
    cAbstractStorage
    ) {
    var gsCommonTradingLogic = {
        /**
         yan.h  2017/4/24
         app7.4 一条街频道定位逻辑统一处理
         ps1: native缓存优先级最高
         ps2: 当无native缓存或者缓存过期时，先显示上次浏览目的地页面
         ps3: 使用URL参数上经纬度获取目的地推荐列表，判断定位目的地和显示目的地是否一致。一致则刷新列表和筛选条件，不一致则弹出目的地选择列表

         onShow时调用，回调返回目的地ID，经纬度，native缓存是否有效的标识
         options： {
            bizType: '', //必选 首页home、景点 ticket、附近酒店 nearHotel、周边游 travelAround 、美食林 food、攻略 strategy
            trackLogTag：'', //必选，埋点使用 FOODS SIGHT SHOPS localraiders
            onLoadPage: function(){}, // 必选，(native缓存有效回调)(无native缓存或者native缓存过期默认显示之前页面的回调),
        }
         **/
        doCommonTradingOnload: function(options) {
            var self = this,
                lat = Lizard.P('lat')? Lizard.P('lat'): 0,
                lng = Lizard.P('lng')? Lizard.P('lng'): 0,
                storyObj,
                districtId = 2;

            options = options || {};
            options.trackLogTag = options.trackLogTag || "";
            options.onLoadPage = options.onLoadPage || function() {};

            storyObj = window && window.localStorage && window.localStorage.getItem('Common_GsCommonTradingLogic_7.5');

            if (storyObj && JSON.parse(storyObj).city_id) {
                districtId = JSON.parse(storyObj).city_id;
            }

            if (gsAppAgent.isHybrid() && (gsAppAgent.compareAppVersion('7.4') < 1)) {   //携程app 7.4及以上使用

                if (gsAppAgent.compareAppVersion('7.5') < 1) {  //携程app 7.5及以上使用基础提供的缓存
                    CtripBusiness.appGetCityMapping(options.bizType, function(result) {
                        var globalId = 0;
                        if (result && result.cityMapping && result.cityMapping.length > 0) {
                            for (var i = 0; i < result.cityMapping.length; i++) {
                                if (result.cityMapping[i] && (result.cityMapping[i].globalid) && (result.cityMapping[i].type === 'gs_district') && (result.cityMapping[i].geocategoryid > 2)) {
                                    globalId = result.cityMapping[i].globalid;
                                    break;
                                }
                            }
                        }
                        if (globalId) {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingOnload_success_7.5_hasnativeCache', 'channelType': options.trackLogTag, 'districtId': globalId });
                            options.onLoadPage({districtId: globalId, nativeCache: true});
                        } else {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingOnload_fail_7.5_hasnotnativeCache', 'channelType': options.trackLogTag, 'districtId': districtId });
                            options.onLoadPage({districtId: districtId, nativeCache: false});
                        }
                    });
                } else {
                    businessJob.doBusinessJob({
                        businessCode: 80050,
                        data:{ 'isRead': true },
                        callback: function(datas){
                            var tagname = datas.tagname;
                            switch (tagname) {
                                case "do_business_job": {
                                    var obj = datas && datas.param && datas.param.cache,
                                        obj = JSON.parse(obj);

                                    if (obj && obj.destId) {
                                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingOnload_success_7.4_hasnativeCache', 'channelType': options.trackLogTag, 'districtId': obj.destId });
                                        options.onLoadPage({districtId: obj.destId, nativeCache: true});
                                    } else {
                                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingOnload_fail_7.4_hasnotnativeCache', 'channelType': options.trackLogTag, 'districtId': districtId });
                                        options.onLoadPage({districtId: districtId, nativeCache: false});
                                    }
                                }
                            }
                        }
                    });
                }
            } else {
                options.onLoadPage({districtId: districtId, nativeCache: false});
            }
        },

        /* APP 7.15 版本支持，基础提供定位以及弹框逻辑 */
        /**
         options： {
            trackLogTag：'', //必选，埋点使用 FOODS SIGHT SHOPS localraiders
            districtId: 2,  //必选，保底显示的districtId, 避免重复弹框使用
            districtSuccUnDialog: function(){} //必选，获取到目的地 并未弹框
            districtSuccDialogOk: function(){} //必选，获取到目的地 弹框并点击了确定
            districtSuccDialogCancel: function(){} //必选，获取到目的地 弹框并点击了取消
            fail: function(){} //非必选，各种失败集合，目前不需要区分
        }
        **/
        appShowSwitchCityDialogIfNeeded: function(options){
            var self = this;

            if (gsAppAgent.isHybrid() && (gsAppAgent.compareAppVersion('7.15') < 1)) { //携程app 7.15及以上使用
                var hashbu = {
                    'FOODS': 'food',
                    'SHOPS': 'shopping'
                };

                gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'appShowSwitchCityDialogIfNeeded_start', 'bu': hashbu[options.trackLogTag], 'globalId': options.districtId + '', 'sourceType': 'gs_district', 'geocategoryid': '6' });
                CtripLocate.appShowSwitchCityDialogIfNeeded({
                    'bu': hashbu[options.trackLogTag],
                    'globalId': options.districtId + '',
                    'sourceType': 'gs_district',
                    'geocategoryid': '6'
                }, function(obj) {
                    options.fail = options.fail || function() {};
                    var hashError = {
                        1: 'appShowSwitchCityDialogIfNeeded_geo_closed',
                        2: 'appShowSwitchCityDialogIfNeeded_geo_fail',
                        3: 'appShowSwitchCityDialogIfNeeded_geo_timeout',
                        4: 'appShowSwitchCityDialogIfNeeded_geo_trans_address_fail',
                        5: 'appShowSwitchCityDialogIfNeeded_geo_trans_city_fail',
                        6: 'appShowSwitchCityDialogIfNeeded_android_sdk_key_fail',
                        99: 'appShowSwitchCityDialogIfNeeded_other_unknow_fail',
                    };

                    if (obj.switchResult == 7 ||
                        obj.switchResult == 8 ||
                        obj.switchResult == 9) {
                        var handleDataResult = self.handleRecommendLocationData(obj);
                    }

                    if (hashError[obj.switchResult]) {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': hashError[obj.switchResult], 'channelType': options.trackLogTag, 'switchResult': obj.switchResult, 'bu': hashbu[options.trackLogTag], 'globalId': options.districtId + '', 'sourceType': 'gs_district', 'geocategoryid': '6', 'result': JSON.stringify(obj) });
                        options.fail();
                    } else if (obj.switchResult == 7) {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'appShowSwitchCityDialogIfNeeded_district_suc_unDialog', 'channelType': options.trackLogTag, 'switchResult': obj.switchResult, 'bu': hashbu[options.trackLogTag], 'globalId': options.districtId + '', 'sourceType': 'gs_district', 'geocategoryid': '6', 'result': JSON.stringify(obj) });

                        if (handleDataResult &&
                            handleDataResult.__Lat &&
                            handleDataResult.__Lng &&
                            handleDataResult.DistrictId) {
                            options.districtSuccUnDialog(handleDataResult);
                        } else {
                            options.fail();
                        }
                    } else if (obj.switchResult == 8) {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'appShowSwitchCityDialogIfNeeded_district_suc_dialog_ok', 'channelType': options.trackLogTag, 'switchResult': obj.switchResult, 'bu': hashbu[options.trackLogTag], 'globalId': options.districtId + '', 'sourceType': 'gs_district', 'geocategoryid': '6', 'result': JSON.stringify(obj) });

                        if (handleDataResult &&
                            handleDataResult.__Lat &&
                            handleDataResult.__Lng &&
                            handleDataResult.DistrictId) {
                            options.districtSuccDialogOk(handleDataResult);
                        } else {
                            options.fail();
                        }
                    } else if (obj.switchResult == 9) {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'appShowSwitchCityDialogIfNeeded_district_suc_dialog_cancel', 'channelType': options.trackLogTag, 'switchResult': obj.switchResult, 'bu': hashbu[options.trackLogTag], 'globalId': options.districtId + '', 'sourceType': 'gs_district', 'geocategoryid': '6', 'result': JSON.stringify(obj) });

                        if (handleDataResult &&
                            handleDataResult.__Lat &&
                            handleDataResult.__Lng &&
                            handleDataResult.DistrictId) {
                            options.districtSuccDialogCancel(handleDataResult);
                        } else {
                            options.fail();
                        }

                        //用户点击取消的时候需要存入基础缓存
                        self.saveUserActionCache({
                            cacheType: "userAction",
                            bizType: hashbu[options.trackLogTag],
                            destId: options.districtId,
                            timeout: 2
                        });
                    } else {
                        gsCommon.cTrackLog(100091, { 'actionType':  'browse', 'actionCode': 'appShowSwitchCityDialogIfNeeded_基础部门未给出的错误类型', 'channelType': options.trackLogTag, 'switchResult': obj.switchResult, 'bu': hashbu[options.trackLogTag], 'globalId': options.districtId + '', 'sourceType': 'gs_district', 'geocategoryid': '6', 'result': JSON.stringify(obj) });
                        options.fail();
                    }
                });
            }
        },

        handleRecommendLocationData: function(data) {
            var temp = {};
            temp.__Lat = data.geoAddress && data.geoAddress.lat;
            temp.__Lng = data.geoAddress && data.geoAddress.lng;
            temp.__Address = data.geoAddress && data.geoAddress.detailAddress;

            if (data.recommendLocation &&
                data.recommendLocation.key &&
                data.ctripCity &&
                data.ctripCity.RecommendMapList &&
                data.ctripCity.RecommendMapList.length > 0) {

                for (var i = 0; i < data.ctripCity.RecommendMapList.length; i++) {
                    if (data.ctripCity.RecommendMapList[i].Key == data.recommendLocation.key) {

                        temp.DistrictId = data.ctripCity.RecommendMapList[i].GeoID;
                        temp.DistrictName = data.ctripCity.RecommendMapList[i].GeoCName;
                        break;
                    }
                }
            }
            return temp;
        },

        /**
        options： {
        trackLogTag：'', //必选，埋点使用 FOODS SIGHT SHOPS localraiders
        isNeedAddress: boolean, //可选，默认为false, 是否需要显示地址数据
        isForceLocate: boolean, //可选，默认为false, 只有点击页面上强制刷新按钮，强制刷新定位
        latLngAddressInfo: {lat, lng, address} //可选 业务自己的定位信息，则跳过取经纬度逻辑

        needInheritedDistricts, //默认为true 定位接口的坑 一条街true，其他为false
        districtId: num, //必选，doCommonTradingOnload方法返回的ID

        onReloadPageList: function(){}, // 必选，无native缓存或者native缓存过期，定位目的地和显示目的地一致，刷新列表和筛选条件
        onShowSelectDistrict: function(){}, // 必选，无native缓存或者native缓存过期，定位目的地和显示目的地不一致，弹出目的地选择列表

        onFetchLatLngFail: function(){}, // 必选，获取经纬度失败回调
        onFetchDistrictFail: function(){}, // 必选，经纬度获取目的地推荐接口失败
        }
        **/
        doCommonTradingAfterLoad: function(options){
            var self = this,
                startTimer,
                urlLat = Lizard.P("lat")? Lizard.P("lat"): 0,
                urlLng = Lizard.P("lng")? Lizard.P("lng"): 0,
                needInheritedDistricts = true,
                pageDistrictId = options.districtId? options.districtId: 2;

            options = options || {};
            options.trackLogTag = options.trackLogTag || "";

            options.onReloadPageList = options.onReloadPageList || function() {};
            options.onShowSelectDistrict = options.onShowSelectDistrict || function() {};

            options.onFetchLatLngFail = options.onFetchLatLngFail || function() {};
            options.onFetchDistrictFail = options.onFetchDistrictFail || function() {};

            if (options.needInheritedDistricts === false) {
                needInheritedDistricts = false;
            }

            var _FetchDistrictByLatLng = function(param) {   //根据经纬度获取目的地推荐列表
                CommonModel.doGetDistrictByLatlon({
                    lat: param.lat,
                    lng: param.lng,
                    NeedInheritedDistricts: needInheritedDistricts
                }, function(obj){

                    if ((obj && obj.InheritedResult && obj.InheritedResult.length > 0 && obj.InheritedResult[0].DistrictId > 0) ||
                        (obj && obj.GsResult && obj.GsResult.DistrictId > 0)) {     //数组第一个为当前目的地
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_district_recommend_success', 'isHybrid': gsAppAgent.isHybrid(), 'channelType': options.trackLogTag });

                        if (needInheritedDistricts) {
                            obj.InheritedResult[0].__Lat = param.lat;
                            obj.InheritedResult[0].__Lng = param.lng;
                            obj.InheritedResult[0].__Address = param.address;
                            _ReloadPageOrDoSelect(obj.InheritedResult);
                        } else {
                            _ReloadPageOrDoSelect([{
                                '__Lat': param.lat,
                                '__Lng': param.lng,
                                '__Address': param.address,
                                'DistrictId': obj.GsResult.DistrictId,
                                'DistrictName': obj.GsResult.DistrictName,
                                'DistrictEName': obj.GsResult.DistrictEName,
                                'IsInChina': obj.GsResult.IsInChina
                            }]);
                        }
                    } else {
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_district_recommend_0_fail', 'isHybrid': gsAppAgent.isHybrid(), 'channelType': options.trackLogTag });

                        //定位超过5秒，则不显示定位失败弹窗,
                        //提供两套解决方案，1 回调传参，2 直接不回调
                        if (options.trackLogTag === 'FOODS') {
                            if (startTimer && (new Date().getTime() - startTimer > 5000)) {
                                options.onFetchDistrictFail('timeout');
                            } else {
                                options.onFetchDistrictFail();
                            }
                        } else {
                            if (startTimer && (new Date().getTime() - startTimer < 5000)) {
                                options.onFetchDistrictFail();
                            }
                        }
                    }
                }, function() {
                    gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_district_recommend_ajax_fail', 'isHybrid': gsAppAgent.isHybrid(), 'channelType': options.trackLogTag });

                    //定位超过5秒，则不显示定位失败弹窗,
                    //提供两套解决方案，1 回调传参，2 直接不回调
                    if (options.trackLogTag === 'FOODS') {
                        if (startTimer && (new Date().getTime() - startTimer > 5000)) {
                            options.onFetchDistrictFail('timeout');
                        } else {
                            options.onFetchDistrictFail();
                        }
                    } else {
                        if (startTimer && (new Date().getTime() - startTimer < 5000)) {
                            options.onFetchDistrictFail();
                        }
                    }

                });
            };

            var _ReloadPageOrDoSelect = function(arary) { //刷新列表 Or 弹出选项框
                if ((arary.length > 0) && (arary[0].DistrictId == pageDistrictId)) {   //目的地相同刷新列表和筛选条件
                    gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_district_recommend_success_reload_page', 'pageDistrictId': pageDistrictId, 'curDistrictId': arary[0].DistrictId, 'channelType': options.trackLogTag });

                    options.onReloadPageList(arary[0]);
                } else if ((arary.length > 0) && (arary[0].DistrictId !== pageDistrictId)) {    //目的地不同，弹出选项框 京都和京都府事件改为不管目的地是否一样都刷新列表
                    gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_district_recommend_success_show_select_districts', 'pageDistrictId': pageDistrictId, 'curDistrictId': arary[0].DistrictId, 'channelType': options.trackLogTag });

                    options.onReloadPageList(arary[0]);
                    options.onShowSelectDistrict(arary);
                }
            };

            if (options.latLngAddressInfo && options.latLngAddressInfo.lat && options.latLngAddressInfo.lng) {
                //业务有自己的经纬度，通过参数传过来，则不需要定位逻辑
                startTimer = new Date().getTime();
                _FetchDistrictByLatLng({
                    lat: options.latLngAddressInfo.lat,
                    lng: options.latLngAddressInfo.lng,
                    address: options.latLngAddressInfo.address
                });
            } else if (options.isNeedAddress || options.isForceLocate) {
                //强制定位，以及需要地址，则必须实时定位
                startTimer = new Date().getTime();
                gsCommonGeolocation.getLocationInfo({
                    fromTag: options.trackLogTag,
                    locationType: 2,
                    needAddress: true,
                    onComplete: function(obj) {
                        if (obj && obj.lat && obj.lng && obj.address) {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_address_success', 'channelType': options.trackLogTag });
                            _FetchDistrictByLatLng({
                                lat: obj.lat,
                                lng: obj.lng,
                                geoType: obj.geoType,
                                address: obj.address
                            });
                        } else {
                            gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_address_fail', 'flag': 'onComplete', 'channelType': options.trackLogTag });

                            //定位超过5秒，则不显示定位失败弹窗,
                            //提供两套方案，1 回调传参，2 直接不回调
                            if (options.trackLogTag === 'FOODS') {
                                if (startTimer && (new Date().getTime() - startTimer > 5000)) {
                                    options.onFetchLatLngFail('timeout');
                                } else {
                                    options.onFetchLatLngFail();
                                }
                            } else {
                                if (startTimer && (new Date().getTime() - startTimer < 5000)) {
                                    options.onFetchLatLngFail();
                                }
                            }

                        }
                    },
                    onCityError: function() {
                        //城市ID 解析失败
                    },
                    onCommonError: function() {
                        gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_address_fail', 'flag': 'onCommonError', 'channelType': options.trackLogTag });

                        //定位超过5秒，则不显示定位失败弹窗,
                        //提供两套方案，1 回调传参，2 直接不回调
                        if (options.trackLogTag === 'FOODS') {
                            if (startTimer && (new Date().getTime() - startTimer > 5000)) {
                                options.onFetchLatLngFail('timeout');
                            } else {
                                options.onFetchLatLngFail();
                            }
                        } else {
                            if (startTimer && (new Date().getTime() - startTimer < 5000)) {
                                options.onFetchLatLngFail();
                            }
                        }

                    }
                })
            } else {
                if (urlLat && urlLng) {
                    //业务URL上带有经纬度，则不需要定位逻辑
                    startTimer = new Date().getTime();
                    _FetchDistrictByLatLng({
                        lat: urlLat,
                        lng: urlLng
                    });
                } else {
                    //无地址的定位逻辑，一条街不存在这个逻辑了。
                }
            }
        },

        /**
         options： {
            bizType: '', //必选 7.5基础新增 首页home、景点 ticket、附近酒店 nearHotel、周边游 travelAround 、美食林 food、攻略 strategy
            cacheType: '', //必选，system, userAction 用户选择定位目的地传2，否则传1
            destId: num, //必选
            timeout：'', //必选 1 ，2。1用户选择定位目的地缓存5分钟传5*60, 2否则缓存6小时传6*3600
            destName: string, //可不传
            lat: num, //可不传
            lng: num, //可不传
            successCall: function() {}, //可不传，成功回调
            failCall: function() {}, //可不传，失败回调
        }
         **/
        saveUserActionCache: function(data, successCall, failCall) {
            var hash = {"1": 5*60, "2": 6*3600},
                cacheTypeHash = {"system": 1, "userAction": 2};

            data.isRead = false;
            data.timeout = hash[data.timeout];
            data.cacheType = cacheTypeHash[data.cacheType];
            successCall = successCall? successCall: function() {};
            failCall = failCall? failCall: function() {};

            if (gsAppAgent.isHybrid() && (gsAppAgent.compareAppVersion('7.4') < 1)) {   //携程app 7.4及以上使用

                if (gsAppAgent.compareAppVersion('7.5') < 1) {  //携程app 7.5及以上使用基础提供的缓存
                    gsCommon.cTrackLog(100091, { 'actionType': 'browse', 'actionCode': 'doCommonTradingAfterLoad_saveUserActionCache', 'districtId': data.destId, 'bizType': data.bizType });

                    CtripBusiness.appSetCityMapping(data.destId, data.bizType, "gs_district", 6);
                    successCall();
                } else {
                    businessJob.doBusinessJob({
                        businessCode: 80050,
                        data: data,
                        callback: function(datas){
                            var tagname = datas.tagname;
                            if (tagname == "do_business_job") {
                                if (datas.param && datas.param.sequenceId) {
                                    successCall();
                                } else {
                                    failCall();
                                }
                            }
                        }
                    });
                }
            }
        },

        //一条街生活版，旅游版相关方法
        gsTradingVersionStorage: {

            /**
             districtId: 必传目的地ID
             返回：
             isShow 是否显示切换条true false
             version 0后台默认 1生活版 2旅游版
             **/
            getVersion: function (districtId) {
                var isShow = true,
                    version = 0,
                    local = window.localStorage.getItem('Common_GsCommonTrading_Version'),
                    localClose = window.localStorage.getItem('Common_GsCommonTrading_Version_Close');

                local? (local = JSON.parse(local)): local = [];
                localClose? (localClose = JSON.parse(localClose)): localClose = [];

                if (districtId) {
                    for (var i = 0; i < localClose.length; i++) {
                        if ((localClose[i].districtId == districtId) && (new Date().getTime()-localClose[i].closeTimer <= 4*3600*1000)) {
                            isShow = false;
                            break;
                        }
                    }
                    for (var i = 0; i < local.length; i++) {
                        if ((local[i].districtId == districtId) && (new Date().getTime()-local[i].setTimer <= 24*3600*1000)) {
                            version = local[i].version;
                            break;
                        }
                    }
                }

                return {
                    isShow: isShow,
                    version: version
                }
            },

            /**
             districtId: 必传目的地ID
             version: 必传切换的版本ID 1生活版 2旅游版
             **/
            setVersion: function (districtId, version) {
                var local= window.localStorage.getItem('Common_GsCommonTrading_Version');

                local? local = JSON.parse(local): local = [];
                if (districtId && version) {
                    for (var i = 0; i < local.length; i++) {
                        if (local[i].districtId == districtId) {
                            local.splice(i, 1);
                            break;
                        }
                    }
                    local.push({
                        'districtId': districtId,
                        'version': version,
                        'setTimer': new Date().getTime()
                    });
                    window.localStorage.setItem('Common_GsCommonTrading_Version', JSON.stringify(local));
                }
            },

            /**
             districtId: 必传目的地ID
            **/
            closeVersion: function(districtId) {
                var hasTag = false,
                    local= window.localStorage.getItem('Common_GsCommonTrading_Version_Close');

                local? local = JSON.parse(local): local = [];
                if (districtId) {
                    for (var i = 0; i < local.length; i++) {
                        if (local[i].districtId == districtId) {
                            local[i].closeTimer = new Date().getTime();
                            hasTag = true;
                            break;
                        }
                    }
                    if (!hasTag) {
                        local.push({
                            'districtId': districtId,
                            'closeTimer': new Date().getTime()
                        });
                    }
                    window.localStorage.setItem('Common_GsCommonTrading_Version_Close', JSON.stringify(local));
                }
            }
        }

    };
    return gsCommonTradingLogic;
});

define('gsCommentAskTrave',[], function () {

    var commentAskTrave = {
        init:function (dom,title,bottom,url,callback,from,initFun,seoA,seoPageNumber) {
            if(!(Lizard.isHybrid || Lizard.isInCtripApp)){
                var union = this.getcookie("Union") || "";
                var unionList = union.split("&");
                var SID = "0";
                for(var i = 0 ; i < unionList.length ; i++ ){
                    var un = unionList[i];
                    if(un.indexOf("SID=") !== -1){
                        var unList = un.split("=");
                        SID = unList.length > 1 ? unList[1] : "";
                         break;
                    }
                }
                var sidList = ["353693","353694","353696","353698","353699","353700","353701","353703","353704","447459","450748"];
                if(Lizard.P("blockingwakeup") || sidList.indexOf(SID) !== -1){
                    initFun && initFun();
                    $("#blockingwakeupBox").remove();
                    var heightBody = document.documentElement.offsetHeight || document.body.offsetHeight;
                    var heightDom = $(dom).height();
                    if(heightBody * 1.2 > heightDom ){
                        return
                    }
                    $(dom).css({
                        maxHeight : (2 * heightBody < heightDom ? 2 * heightBody : heightDom)+ "px",
                        minHeight :  heightBody * 1.2+ "px",
                        overflow : "hidden",
                        position : "relative"
                    })
                    var createDom = document.createElement("div");
                    createDom.id = "blockingwakeupBox";
                    var textDom = from === "travelDetail" ? "<span>阅读全文</span>" : "";
                    var _number = !!parseInt(seoPageNumber) ? parseInt(seoPageNumber)  : 1 ;
                    var imgA = !!seoA ? "<a href='" + seoA +"' title='携程旅游问答,海量专家为您提供最快/最实优质回答【携程攻略】-第" + _number +"页'>" +
                        "<img src='https://dimg02.c-ctrip.com/images/100p1700000111ech78A7.png'/></a>"
                        : "<img src='https://dimg02.c-ctrip.com/images/100p1700000111ech78A7.png'/>";
                    createDom.innerHTML =   "<div class='imgWakeupBox'>" +
                                            "<div class='imgWakeup'>" +
                                                 textDom  +
                                                 imgA +
                                            "</div>" +
                                            "</div>" +
                                            "<button>" + title + "</button>";
                    if(dom.indexOf(".") !== -1){
                        document.getElementsByClassName(dom.replace(".",""))[0].appendChild(createDom)
                    }else if(dom.indexOf("#") !== -1){
                        document.getElementById(dom.replace("#","")).appendChild(createDom)
                    }
                    $("#blockingwakeupBox").css({
                        position:"absolute",
                        bottom:0,
                        width:"100%",
                        backgroundImage: "linear-gradient(-180deg,rgba(255,255,255,0) 0%,#fff " + (from === "travelDetail" ? "34" : "39")+ "%)",
                        paddingBottom:bottom + 16 + "px",
                        paddingTop: from === "travelDetail"? "171px" : "96px"
                    })
                    $("#blockingwakeupBox .imgWakeupBox").css({
                        position:"absolute",
                        top:from === "travelDetail"? "100px" : "60px",
                        width: "100%",
                        textAlign : "center",
                    })
                    $("#blockingwakeupBox .imgWakeupBox .imgWakeup").css({
                        display : "inline-block",
                    })
                    $("#blockingwakeupBox .imgWakeupBox span").css({
                        fontSize : "15px",
                        fontWeight : "bold",
                        color: "#0086F6",
                        marginRight : "4px"
                    })
                    $("#blockingwakeupBox .imgWakeupBox img").css({
                        width:from === "travelDetail"? "13px" : "20px",
                        marginTop:from === "travelDetail"? "4px" : "0",
                        display : "inline-block"
                    })
                    $("#blockingwakeupBox button").css({
                        width:"93.6%",
                        height:"44px",
                        backgroundColor:"#0086F6",
                        display:"block",
                        margin:"0 auto",
                        color:"white",
                        fontSize:"17px",
                        letterSpacing: "0.22px",
                        borderRadius : "6px"
                    })
                    $("#blockingwakeupBox .imgWakeup").unbind("click").click(function () {
                        $("#blockingwakeupBox").remove();
                        $(dom).css({
                            maxHeight : "none",
                            minHeight :  "auto",
                            overflow : "auto",
                            position : "relative"
                        })
                        return callback && callback();
                    })
                    $("#blockingwakeupBox button").unbind("click").click(function () {
                        if (!!!window['__wakeup']) window['__wakeup'] = [];
                        setTimeout(function () {
                            window['__wakeup'].push({
                                'url': url,
                                'isdown': true,
                                'backurl': url,
                                'waking': ''
                            });
                        }, 100);
                    })
                }
            }

        },
        getcookie:function (c_name) {
            if (document.cookie.length>0){
                var c_start=document.cookie.indexOf(c_name + "=")
                if (c_start != -1 ) {
                    c_start=c_start + c_name.length+1
                    var c_end=document.cookie.indexOf(";",c_start)
                    if (c_end==-1){
                        c_end=document.cookie.length
                    }
                    return unescape(document.cookie.substring(c_start,c_end))
                }else{
                    return ""
                }
            }
            return ""
        },
    };
    return commentAskTrave;
});


define('gsNextPage',[], function () {

    var NextPage = {

        pageIndex: null,
        pageTotal: null,

        bindScrollEvent: function (options) {
            var self = this;

            var winH = 0, $win = $(window),
                content = options.content || window,
                listId = options.listId || "#search_result_list",
                noMoreResultId = options.noMoreResult || ".noMoreResult",
                renderNextPage = options.renderNextPage || function () { },
                topHeight = options.topHeight || 0,
                extra = options.extra || 0,
                windowH = options.windowHeight || $(window).height();

            self.pageIndex = options.pager.pageIndex;

            var total, checkItv;

            var nowScrollT = $(content).scrollTop();
            $(content).off("scroll").on("scroll", function (e) {
                winH = windowH;
                var scrollT = $(content).scrollTop(); //滚动条top
                if (scrollT - nowScrollT > 0) {
                    $('.js_ttdlist').hide();

                    clearTimeout(checkItv);
                    checkItv = setTimeout(function () {
                        $('.js_ttdlist').show();
                    }, 200);
                }

                nowScrollT = $(content).scrollTop();
                if (self.pageTotal) {
                    total = self.pageTotal;
                } else {
                    total = options.pager.totalCount;
                }

                if (self.pageIndex * options.pager.pageNum >= total) {
                    $(".loading_bottom_box").hide();
                    $(noMoreResultId).show();
                    return false;
                }
                var pageH = $(listId).height();
                var remain = winH + scrollT - pageH + extra - topHeight;


                if (remain >= 0) {
                    options.renderNextPage();
                    $('.js_ttdlist').show();
                }
            });
        }
    };
    return NextPage;
});


define('gsRouterRedirect',[
    'cHybridFacade',
    'gsAppAgent',
    'gsCommonStore',
    'cGuiderService'
], function (
    Facade,
    appAgent,

    CommonStore,
    Guider
) {

    var LOCAL_STORAGE_PAGE_HISTORY_MAP = "GS_H5_PAGE_HISTORY_MAP";

    var domainLink = {
        project: {
            "shops": "https://m.fat51.qa.nt.ctripcorp.com"
        },
        type: {
            "fat": "https://m.fat59.qa.nt.ctripcorp.com",
            "uat": "//m.uat.qa.nt.ctripcorp.com",
            "ctrip": "//m.ctrip.com"
        }
    };

    var routerRedirect = {
        IF_OFF_VIDEO : false,
        TARGET_MODEL_MAP : {
            1: 'app',
            2: 'h5',
            3: 'browser',
            4: 'open'
        },
        isHybrid: appAgent.isHybrid(),
        appProtocol: appAgent.appUrl(),
        forwardHistoryStore: CommonStore.ForwardHistoryStore.getInstance(),

        viewMap: {},
        closeAudio: function(){
            this.IF_OFF_VIDEO = true;
        },



        /*
        * 点返回按钮（https://conf.ctripcorp.com/display/Wireless/c.widget.guider）
        * @params
        *     url: 指定页面返回到具体的URL【只对H5有用】
        *     param: APP 返回上一页 带回参数
        */
        toBack: function (params) {
            var self = this;
            var url = params && params.url ? params.url : '',
                opts = params && params.param ? params.param : '';

            // 关闭音屏
            if (self.IF_OFF_VIDEO) {
                if (Lizard.isInCtripApp || Lizard.isHybrid) {
                    param = [];
                    window.CtripUtil.app_open_url('ctrip://wireless/destination/showVoiceView?index=0&size=10&showVoice=0&type=2&voiceList=' + encodeURIComponent(JSON.stringify(param)), 1);
                }
            }

            //独立APP 2.3版本及以上版本
            if ((appAgent.isGsHybrid() || appAgent.isSmlHybrid()) && window.GSApiUtil && GSApiUtil.closeAndPassValue) {
                GSApiUtil.closeAndPassValue(JSON.stringify({param: opts}));
                return false;
            }

            if (self.isHybrid || appAgent.isGsHybrid() || appAgent.isSmlHybrid()) {
                if (typeof (opts) == "object") {
                    Guider.backToLastPage({ param: JSON.stringify(opts) });
                } else {
                    Guider.backToLastPage({ param: opts });
                }
            } else {
                var from = Lizard.P('from');
                
                if (from) {
                    var arr = [],
                        fromUrl;

                    var searchStr = window.location.search;

                    // ERISHEN:: 旅拍站点特殊处理,
                    // 酒店返回特殊处理 https://m.ares.fws.qa.nt.ctripcorp.com/webapp/hotel/cw/tripassisant/TripAssisant.html?orderinfo=eyJvcmRlcklkIjozMTIyMDgyNDE1Mn0=
                    // + 农行首页 https://m.ctrip.com/tangram/NjkzOA==?ctm_ref=vactang_page_6938&isHideNavBar=YES&popup=close&autoawaken=close&adjusthead=1&ext=%7B%22q%22%3A%22scene%3Dnonghang%22%7D
                    if (from.indexOf('/livestream/') == -1 && from.indexOf('/cw/hotel/tripassisant/') == -1 
                        && from.indexOf('/tangram/NjkzOA==') == -1 
                        && from.indexOf('/webapp/you/gspoi') == -1 
                        && from.indexOf('/webapp/you/gsshopping') == -1 
                        && from.indexOf('/webapp/innovation_operation') == -1 && from.indexOf('/webapp/gourmet') == -1) {
                        searchStr = searchStr.toLowerCase(); 
                    }

                    searchStr.replace((/(?:[\?&])(\w+)=([^#&\s]*)/g), function (a, f, s) {
                        if (f == 'from') {
                            arr.push(decodeURIComponent(s));
                        }
                    });

                    _.each(arr, function (v, k) {
                        if (self._checkUrl(v)) {
                            fromUrl = v;
                        };
                    });

                    //console.log('fromUrl', fromUrl);
                    fromUrl ? (window.location.href = fromUrl) : (url ? (window.location.href = url) : window.history.back());
                } else {
                    url ? (window.location.href = url) : window.history.back();
                }
            }
        },

        // 返回首页
        toHome: function () {
            var self = this;

            if (self.isHybrid) {
                Guider.home();
            } else {
                this.toJump({
                    url: ['//m.ctrip.com']
                });
            }
        },

        toCtrip: function(){
            var self = this;

            if (self.isHybrid) {
                Guider.home();
            } else {
                this.toJump({
                    url: ['//m.ctrip.com']
                });
            }
        },

        /*
        * 获取事件元素
        * @options
        *     elem: 元素[默认是a]
        */
        getTarget: function (e, options) {
            var target = e.target,
                $that = '';

            var el = options && options.elem ? options.elem : 'a';

            if (target.nodeName !== el.toUpperCase()) {

                $that = $(target).closest(el);

            } else {

                $that = $(target);

            }

            return $that;
        },

        /*
        * 页面跳转
        * @params
        *     host: 是否启用m.ctrip.com访问页面，启用填true，默认不启用
        *     url: 数组【第一个值是H5 URL，第二个值APP URL，如果两个都一样就填一个, URL传空点击就是刷新当前页】
        *     targetModel:
        *          1: 处理ctrip://协议
        *          2: 开启新的H5页面
        *          3: 使用系统浏览器打开
        *          4: 开启本地新的H5页面，此时URL为相对路径；5.6版本加入
        */
        toJump: function (params) {
            var self = this;

            var url = params && params.url ? params.url : '',
                host = params && params.host ? (Lizard.H5BaseUrl || '//m.ctrip.com') : "",
                targetModel = params && params.targetModel ? params.targetModel : '4',
                hasOpenAudio = params && params.hasOpenAudio ? params.hasOpenAudio : false;

            if (url) {
                switch (parseInt(targetModel)) {
                    case 1:
                        if (self.isHybrid) {
                            if (url.length > 1) {
                                if (url[1].indexOf("ctrip://wireless") > -1) {
                                    url = url[1];
                                } else {
                                    url = self.appProtocol + url[1];
                                }
                            } else {
                                url = self.appProtocol + url[0];
                            }
                        } else {
                            url = host + url[0];
                        }
                        targetModel = 'app';
                        break;
                    case 2:
                        if (self.isHybrid) {
                            if (url.length > 1) {
                                url = host + url[1];
                            } else {
                                url = host + url[0];
                            }
                        } else {
                            url = host + url[0];

                        }

						if(0 == url.indexOf("//")){
                            if(location.protocol.indexOf("https") >= 0){
                                url = "https:" + url;
                            }else{
                                url = "http:" + url;
                            }
						}

                        //7.6统一加白色头
                        if (this.isHybrid || Lizard.isInCtripApp) {
                            url = this.initializeHeaderColorByUrl(url);
                        }

                        if(appAgent.isGsHybrid()){
                            url = "ctripgs://wireless/h5?url=" + encodeURIComponent(url);
						}
						if (appAgent.isSmlHybrid()) {
						    url = "ctripsml://wireless/h5?url=" + encodeURIComponent(url);
						}

                        targetModel = 'h5';
                        break;
                    case 3:
                        url = host + url[0];
                        if(appAgent.isGsHybrid()){
                            url = "ctripgs://wireless/h5?url=" + encodeURIComponent(url);
                        }
                        if (appAgent.isSmlHybrid()) {
                            url = "ctripsml://wireless/h5?url=" + encodeURIComponent(url);
                        }
                        targetModel = 'browser';
                        break;
                    case 4:
                        if (self.isHybrid) {
                            if (url.length > 1) {
                                url = url[1];
                            } else {
                                url = url[0];
                            }
                        } else {
                            url = host + url[0];

                        }

                        //7.6统一加白色头
                        if (this.isHybrid || Lizard.isInCtripApp) {
                            url = this.initializeHeaderColorByUrl(url);
                        }

                        if(appAgent.isGsHybrid()){
                            if(0 != url.indexOf("//") && 0 != url.indexOf("http")){
                                url = (Lizard.H5BaseUrl || '//m.ctrip.com') + url;
                            }

                            if(0 == url.indexOf("//")){
                                if(location.protocol.indexOf("https") >= 0){
                                    url = "https:" + url;
                                }else{
                                    url = "http:" + url;
                                }
                            }
                            url = "ctripgs://wireless/h5?url=" + encodeURIComponent(url);
                        }
                        if (appAgent.isSmlHybrid()) {
                            if (0 != url.indexOf("//") && 0 != url.indexOf("http")) {
                                url = (Lizard.H5BaseUrl || '//m.ctrip.com') + url;
                            }

                            if (0 == url.indexOf("//")) {
                                if (location.protocol.indexOf("https") >= 0) {
                                    url = "https:" + url;
                                } else {
                                    url = "http:" + url;
                                }
                            }
                            url = "ctripsml://wireless/h5?url=" + encodeURIComponent(url);
                        }
                        targetModel = 'open';
                        break;
                }
            } else {
                url = window.location.href;
                targetModel = 'refresh';
            }

            // 关闭音屏
            if (self.IF_OFF_VIDEO && !hasOpenAudio) {
                if (Lizard.isInCtripApp || Lizard.isHybrid) {
                    param = [];
                        window.CtripUtil.app_open_url('ctrip://wireless/destination/showVoiceView?index=0&size=10&showVoice=0&type=2&voiceList=' + encodeURIComponent(JSON.stringify(param)), 1);
                }
            }

            Guider.jump({
                url: self._appendParam(url),
                targetModel: targetModel
            });
        },

        //设置跳转URL，并会在Localstorage里面记录目标页面的Root URL
        _setPageUrl: function (module,page, url) {
            var mapStr = localStorage.getItem(LOCAL_STORAGE_PAGE_HISTORY_MAP);
            var map = [];
            if (mapStr != null && mapStr != "") {
                try {
                    map = JSON.parse(mapStr);
                } catch (e) {
                    map = [];
                }

            };
            var isExist = false;
            for (var i = 0; i < map.length; i++) {
                if (map[i].id == page && map[i].module == module) {
                    map[i].url = url;
                    isExist = true;
                    break;
                }
            }
            if (!isExist) {
                var newpage = {
                    id: page,
                    module: module,
                    url: url
                };
                map.push(newpage);
            }
            var strMap = JSON.stringify(map);
            localStorage.setItem(LOCAL_STORAGE_PAGE_HISTORY_MAP, strMap);
        },

        //根据页面ID获取Root URL
        _getPageUrl: function (module, page, defaultTarget) {
            //规则， 1. 回退到from; 2. 回退到上一页; 2. 回退到默认页; 3. 会退到攻略首页
            if (Lizard.P("from")) {
                return Lizard.P("from");
            }

            var mapStr = localStorage.getItem(LOCAL_STORAGE_PAGE_HISTORY_MAP);
            var map = [];
            if (mapStr != null && mapStr != "") {
                map = JSON.parse(mapStr);
            }
            for (var i = 0; i < map.length; i++) {
                if (map[i].id == page && map[i].module == module) {
                    return map[i].url;
                }
            }

            return defaultTarget || Lizard.appBaseUrl.replace("webapp/you/", "") + "html5";
        },


        _checkUrl : function (url) {
            return (url.indexOf("http://") >= 0 || url.indexOf("https://") >= 0 || url.indexOf("webapp/") >= 0 || url.indexOf("html5/") >= 0)
                    && (url.indexOf("ctripcorp.com") >= 0 || url.indexOf("ctrip.com") >= 0);
        },

        _appendParam: function(url){
            if(!this.isHybrid && !appAgent.isGsHybrid()){
                if(!!Lizard.P("twojumpwakeup")){
                    if(url.search(/openapp=\d+/ig) >= 0){
                        url = url.replace(/openapp=\d+/ig, 'openapp=3');
                    }else{
                        url += (url.search(/\?/ig) >= 0 ? '&openapp=3' :'?openapp=3' );
                    }
                    if(!!Lizard.P('channel_app')){
                        url += (url.search(/\?/ig) >= 0 ? ('&channel_app=' + Lizard.P('channel_app')) : ('?channel_app='+Lizard.P('channel_app')));
                    }
                    if(!!Lizard.P('partner_link')){
                        url += (url.search(/\?/ig) >= 0 ? ('&partner_link=' + Lizard.P('partner_link')) : ('?partner_link='+Lizard.P('partner_link')));
                    }
                }
            }

            return url;
        },

        /**
        *   规则， 1. 回退到from(清空cache);2.回退到传入页 3. 回退到上一页; 4. 回退到默认页; 5. 会退到攻略首页
        *   module: 本频道model
        *   url: 传入页
        *   defaultUrl: 默认页
        */
        getBackUrl: function (module, url, defaultUrl) {
            var from = Lizard.P("from"),
                viewName = Lizard.instance.curView.config.viewName,
                allHistory = this.forwardHistoryStore.get() || {},
                modelHistory = allHistory[module] || [],
                length = modelHistory.length;

            if (from && this._checkUrl(from)) {
                allHistory[module] = [];
                this.forwardHistoryStore.set(allHistory);
                return from;
            }

            if (url) {
                allHistory[module] = [];
                this.forwardHistoryStore.set(allHistory);
                return url;
            }

            if (1 < length && modelHistory[length - 1].viewName == viewName) {
                modelHistory.length = length - 1;
                length--;

                var lastUrl = modelHistory[length - 1].url || "";
                if (modelHistory[length - 1].viewName == "_____FROM_____") {
                    modelHistory = [];
                }
                allHistory[module] = modelHistory;
                this.forwardHistoryStore.set(allHistory);

                if (this._checkUrl(lastUrl)) {
                    return lastUrl;
                }
            }

            if (defaultUrl) {
                allHistory[module] = [];
                this.forwardHistoryStore.set(allHistory);
                return defaultUrl;
            }

            allHistory[module] = [];
            this.forwardHistoryStore.set(allHistory);

            return Lizard.H5BaseUrl + "/webapp/you";
        },

        /**
        *   @params
        *       module: 本频道model
        */
        savePageHistory: function (params) {
            var from = Lizard.P("from"),
                viewName = Lizard.instance.curView.config.viewName,
                url = location.href,
                allHistory = this.forwardHistoryStore.get() || {},
                module = params.module;
                modelHistory = allHistory[module] || [];

            if (!!from) {
                modelHistory = [];
                modelHistory.push({
                    viewName: "_____FROM_____",
                    url: from
                });

                modelHistory.push({
                    viewName: viewName,
                    url: url
                });
            } else {
                if (0 == modelHistory.length || modelHistory[modelHistory.length - 1].viewName != viewName) {
                    modelHistory.push({
                        viewName: viewName,
                        url: url
                    });
                }
            }

            allHistory[module] = modelHistory;
            this.forwardHistoryStore.set(allHistory);

        },

        /*前进逻辑*/
        /**
        * params:
        *       urls: [0] 为h5 url. [1]为hybridurl
        *       opts: 参见h5Redirect
        *       targetModel
        *           1: 处理ctrip://协议
        *           2: 开启新的H5页面
        *           3: 使用系统浏览器打开
        *           4: 开启本地新的H5页面，此时URL为相对路径；5.6版本加入
        *       withFrom: 自动加上本页url为from
        *       module: 本频道model
        *       targetPage： 跳转页面viewName
        *
        */
        ForwardPage: function (params) {
            params = params || {};
            var self = this,
                urls = params.urls || [],
                opts = params.opts || '',
                targetModel = params.targetModel || 4,
                forceJump = params.forceJump,
                host = params && params.host ? (Lizard.H5BaseUrl || '//m.ctrip.com') : "",
                withFrom = params.withFrom,
                url = urls[0];

            // 关闭音屏
            if (self.IF_OFF_VIDEO) {
                if (Lizard.isInCtripApp || Lizard.isHybrid) {
                    param = [];
                    window.CtripUtil.app_open_url('ctrip://wireless/destination/showVoiceView?index=0&size=10&showVoice=0&type=2&voiceList=' + encodeURIComponent(JSON.stringify(param)), 1);
                }
            }

            try {
                if (this.isHybrid || Lizard.isInCtripApp || appAgent.isGsHybrid() || appAgent.isSmlHybrid()) {
                    switch (parseInt(targetModel)) {
                        case 1:
                            if(urls[1]){
                                if(urls[1].indexOf("ctrip://wireless")>=0 || urls[1].indexOf("ctripgs://wireless")>=0){
                                    url= urls[1];
                                }else{
                                    url= this.appProtocol + urls[1];
                                }
                            }else{
                                url=urls[0];
                            }
                            break;
                        case 2:
                            url = host + url;
                            if(0 == url.indexOf("//")){
                                if(location.protocol.indexOf("https") >= 0){
                                    url = "https:" + url;
                                }else{
                                    url = "http:" + url;
                                }
                            }

                            //7.6统一加白色头
                            if (this.isHybrid || Lizard.isInCtripApp) {
                                url = this.initializeHeaderColorByUrl(url);
                            }

                            if(appAgent.isGsHybrid()){
                                url = "ctripgs://wireless/h5?url=" + encodeURIComponent(url);
                            } else if (appAgent.isSmlHybrid()) {
                                url = "ctripsml://wireless/h5?url=" + encodeURIComponent(url);
                            }
                            break;
                        case 4:
                            url = urls[1] ? urls[1] : urls[0];

                            //7.6统一加白色头
                            if (this.isHybrid || Lizard.isInCtripApp) {
                                url = this.initializeHeaderColorByUrl(url);
                            }

                            if(appAgent.isGsHybrid()){
                                url = urls[0];
                                if(0 != url.indexOf("//") && 0 != url.indexOf("http")){
                                    url = (Lizard.H5BaseUrl || '//m.ctrip.com') + url;
                                }

                                if(0 == url.indexOf("//")){
                                    if(location.protocol.indexOf("https") >= 0){
                                        url = "https:" + url;
                                    }else{
                                        url = "http:" + url;
                                    }
                                }
                                url = "ctripgs://wireless/h5?url=" + encodeURIComponent(url);
                            }else if (appAgent.isSmlHybrid()) {
                                url = urls[0];
                                if (0 != url.indexOf("//") && 0 != url.indexOf("http")) {
                                    url = (Lizard.H5BaseUrl || '//m.ctrip.com') + url;
                                }

                                if (0 == url.indexOf("//")) {
                                    if (location.protocol.indexOf("https") >= 0) {
                                        url = "https:" + url;
                                    } else {
                                        url = "http:" + url;
                                    }
                                }
                                url = "ctripsml://wireless/h5?url=" + encodeURIComponent(url);
                            }
                            break;
                        default:
                            url = host + url;
                            if(appAgent.isGsHybrid()){
                                url = "ctripgs://wireless/h5?url=" + encodeURIComponent(url);
                            }else if (appAgent.isSmlHybrid()) {
                                url = "ctripsml://wireless/h5?url=" + encodeURIComponent(url);
                            }
                            break;
                    }

                    Guider.jump({
                        url: url,
                        targetModel: this.TARGET_MODEL_MAP[targetModel]
                    });

                } else {
                    //跟去哪儿合作H5隐藏参数
                    if (Lizard.P('fromType') === 'external') {
                        url += (url.indexOf('?') > 0 ? '&' : '?') + 'fromType=external&popup=close&autoawaken=close';
                    }

                    if (withFrom) {
                        url += (url.indexOf('?') > 0 ? '&' : '?') + 'from=' + encodeURIComponent(location.href)
                    }

                    if (forceJump) {
                        location.href = self._appendParam(url);
                        return;
                    }

                    this.h5Redirect(self._appendParam(url), opts);
                }
            } catch (e) {
                console.log("error in function ForwardPage: "+e.stack);
            }
        },

        /**
        * 7.6新增
        *   通过带入URL参数的方式，初始化Header颜色，仅限于APP环境内
        *   H5链接: 参数 ishideheader=true
         *  hybrid链接: 参数 isHideNavBar=YES
        */
        initializeHeaderColorByUrl: function (url) {
            var isNeedAppend = false,
                isH5Link = false;

            if ((this.isHybrid || Lizard.isInCtripApp) && appAgent.compareAppVersion('7.6') < 1) {
                isNeedAppend = (url.indexOf('isHideNavBar=YES') === -1 && url.indexOf('navBarStyle=white') === -1);
                isH5Link = (url.indexOf('https://') > -1) || (url.indexOf('http://') > -1);

                if (isNeedAppend) {
                    if (isH5Link && url.indexOf('webapp/you/') > -1) {
                        if (url.indexOf('webapp/you/hotelasks') == -1 && url.indexOf('webapp/you/hotels') == -1) {
                            url += (url.indexOf('?') > 0 ? '&' : '?') + 'navBarStyle=white'
                        }
                    } else {
                        if (url.indexOf('food/') > -1 || url.indexOf('destination/') > -1) {
                            url += (url.indexOf('?') > -1 ? '&' : '?') + 'navBarStyle=white'
                        }
                    }
                }
            }
            return url;
        },

        /*返回逻辑*/
        /**
        * params:
        *       url: 强制回退的url
        *       historyBack：强制做historyback
        *       opts: 参见h5Redirect
        *       defaultTarget： 找不到回退页面时的回退url
        *       module: 本频道model
        */
        BackPage: function (params) {
            if (this.isHybrid || Lizard.isInCtripApp || appAgent.isGsHybrid() || appAgent.isSmlHybrid()) {
                if (typeof (params.datas) == "object") {
                    Guider.backToLastPage({ param: JSON.stringify(params.datas) });
                } else {
                    Guider.backToLastPage({ param: params.datas });
                }
            } else if (params.historyBack) {
                window.history.back();
            } else {
                var url = this.getBackUrl(params.module, params.url, params.defaultTarget);
                if (url.indexOf("/you/" + params.module) < 0 || params.forceBack) {
                    location.href = url;
                    return;
                }
                this.h5Redirect(url, params.opts, true);
            }
        },

        /**
        * 在h5环境的页面跳转接口
        * @param url {string}
        * @param opts {Object} 可选的跳转参数集
        *      viewName {string} 视图的唯一标识，用于判断视图是否在视图列表中。该路由已自动处理，不用手动传入
        *      loading {boolean} 页面跳转时是否显示loading
        *      cache {boolean} 是否尝试使用缓存的视图，如果目标视图已经在视图列表中，则复用且跳过'onCreate'方法，直接调'onShow'
        * @param isBack {boolean} 回退还是前进
        */
        h5Redirect: function (url, opts, isBack) {
            opts = opts || {};
            var viewName = this.queryViewName(url);
            if(viewName) {
                opts['viewName'] = viewName;
            }
            this.cacheCurrView();

            Lizard.goTo(url, opts);
        },

        /**
         * 每次跳转的时候都先尝试缓存当前视图，以便于下次再跳到这个视图时可以直接复用
         * 视图的缓存的格式为: {viewName: urlSchema}
         */
        cacheCurrView : function() {
            var url = location.pathname;
            if (!this.queryViewName(url)) {
                var urlSchemaReg = this.queryUrlSchema(url),
                    viewName = Lizard.instance.curView.config.viewName;
                if(urlSchemaReg && viewName) {
                    this.viewMap[viewName] = urlSchemaReg;
                }
            }
        },

        /**
        * 根据url从缓存池中查询'viewName'
        * @param url
        * @returns {string} viewName
        */
        queryViewName : function(url) {
            var urlSchemaReg;
            for (var viewName in this.viewMap) {
                if (this.viewMap.hasOwnProperty(viewName)) {
                    urlSchemaReg = this.viewMap[viewName];
                    if(urlSchemaReg.test(url)) {
                        return viewName;
                    }
                }
            }
            return null;
        },

        /**
         * 根据url查询其对应的schema
         * @param url
         * @returns {RegExp} urlSchema
         */
        queryUrlSchema : function(url) {
            var urlSchemaReg;
            for(var urlSchema in Lizard.urlSchemaMap) {
                if(Lizard.urlSchemaMap.hasOwnProperty(urlSchema)) {
                    // 这里要加个'/', 否则'from'参数里的值也有可能匹配到'urlSchema'
                    urlSchemaReg = new RegExp('/' + urlSchema, 'i');
                    if(urlSchemaReg.test(url)) {
                        return urlSchemaReg;
                    }
                }
            }
            return null;
        },

        /*
        * 直连链接跳转
        * @params:
        *     project:
        *         shops: https://m.fat51.qa.nt.ctripcorp.com
        */
        getStraightLink: function (params) {
            var self = this;

            if (!self.isHybrid) return "";

            var baseLink = domainLink.type.ctrip,
                isPreProduction = window.localStorage.getItem("isPreProduction"); // 0: Fat、1：堡垒、2：UAT 生产不会有该字段

            if (isPreProduction === '0') {

                baseLink = domainLink.type.fat;

                if (params && params.project && domainLink.project[params.project]) {

                    baseLink = domainLink.project[params.project];

                }

            } else if (isPreProduction === '2') {

                baseLink = domainLink.type.uat;

            }

            return baseLink;
        },

        /*
        * 触摸滚动屏幕
        * @param:
        *     isRegister：{ Boolen } 是否重新注册METHOD_WEB_VEW_DID_APPEAR事件, 默认注册
        *     tagname: 默认Facade.METHOD_WEB_VEW_DID_APPEAR
        *     callback: { Function } 触发METHOD_WEB_VEW_DID_APPEAR时用户自定义回调函数
        */
        triggerDrag: function (params) {
            var options = {
                isRegister: true,
                tagname: Facade.METHOD_WEB_VEW_DID_APPEAR,
                callback: ""
            };

            for (i in params) options[i] = params[i];

	        CtripPage.app_enable_drag_animation(true);

	        if (options && options.isRegister) {
	            Facade.register({
	                tagname: options.tagname,
	                callback: function (res) {
	                    CtripPage.app_enable_drag_animation(true);

	                    if (options && options.callback) {
	                        options.callback(res);
	                    }
	                }
	            });
	        }
        },

        /*
        * 关闭ios拖拽效果
        */
	    disableDrag: function () {
	        CtripPage.app_enable_drag_animation(false);
        }
    };

    return routerRedirect;
});

define('gsShowTime',[],function () {
    var ShowTime = {
        /*
        * 时间格式化
        * @params
        *     times: 你需要格式化的时间，数据库里读取的字段直接传进来
        *     sign: 日期分隔的符号
        *     type: 是否显示时间（默认显示时间 true/false）
        */
        getDateTime: function (params) {
            var self = this;

            var options = {
                "times": "",
                "sign": "-",
                "type": true
            };

            for (i in params) options[i] = params[i];

            var date = '';

            self.times = new Date(self.formatDataTime(options.times));
            self.sign  = options.sign;
            self.type  = options.type;

            date = self.formatTime();

            return date;
        },

        /*
        * 当前时间加多少天
        * day: 数字
        */
        getLaterDay: function (day) {
            var self = this,
                tTime = '';

            var tDay = day ? parseInt(day) * 24 * 60 * 60 * 1000 : 0,
                myDate = new Date(new Date().getTime() + tDay),
                objTime = self.transTime(myDate);

            tTime = objTime.tYear + objTime.tMonth + objTime.tDate;

            return tTime;
        },

        formatTime: function () {
            var self = this,
                tDate = '';

            var sign = self.sign;

            var objTime = self.transTime(self.times);

            tDate = objTime.tYear + sign + objTime.tMonth + sign + objTime.tDate

            if (self.type) {
                tDate = tDate + " " + objTime.tHours + ":" + objTime.tMinutes + ":" + objTime.tSeconds;
            }

            return tDate;
        },

        transTime: function (time) {
            var self = this;

            var objTime = {
                tYear: time.getFullYear().toString(),
                tMonth: self.addZero((time.getMonth() + 1).toString()),
                tDate: self.addZero(time.getDate().toString()),
                tHours: self.addZero(time.getHours().toString()),
                tMinutes: self.addZero(time.getMinutes().toString()),
                tSeconds: self.addZero(time.getSeconds().toString())
            };

            return objTime;
        },

        addZero: function (param) {
            return (param < 10) ? ('0' + param) : param;
        },

        /*
        * 格式化数据库里的时间（数据库喷出的时间像这样：/Date(1413434431547+0800)/）
        * time:
        *     时间值 （/Date(1413434431547+0800)/）
        */
        formatDataTime: function (time) {
            time = time || "/Date(0000000000000+0800)/";
            return parseInt(time.match(/\d+/)[0]);
        },

        /*
        * 算时间差值
        * @params:
        *       times: 用户提交时间
        *       now: 当前服务器时间
        *       sign: 日期分隔符
        *       type: 是否显示时间（除年月日以外的时间） 默认不显示（false） true/false
        */
        getSubTime: function (params) {
            var self = this;

            var options = {
                "times": "",
                "now": "",
                "sign": "-",
                "type": false
            };

            for (i in params) options[i] = params[i];

            var result = "",
                tTime = self.formatDataTime(options.times),
                nTime = self.formatDataTime(options.now),
                subTime = (nTime - tTime) / (1000 * 60);

            if (subTime < 1) {

                result = "刚刚";

            } else if (subTime < 60) {

                result = subTime.toFixed(0) + "分钟前";

            } else if (subTime < (60 * 24)) {

                result = (subTime / 60).toFixed(0) + "小时前";

            } else {

                result = self.getDateTime({
                    "times": options.times,
                    "sign": options.sign,
                    "type": options.type
                });

            }

            return result;

        }

        /*
        getSubTime:function(publishTime, nowTime) {
        var result = '';
        publishTime = new Date(parseInt(publishTime.match(/\d+/)[0]));
        nowTime = new Date(parseInt(nowTime.match(/\d+/)[0]));
        var subTime = nowTime.getTime() - publishTime.getTime();
        //转化为分钟
        subTime = subTime / (1000 * 60);

        //判断该差值
        if (subTime<1) {
        result = '刚刚';
        } else if(subTime<60) {
        result = subTime.toFixed(0) + '分钟前';
        } else if(subTime<(60*24)) {
        result = (subTime / 60).toFixed(0) + '小时前';
        } else {
        result = publishTime.getFullYear() + '-' + (publishTime.getMonth() + 1) + '-' + publishTime.getDay();
        }
        return result;
        }
        */
    };

    return ShowTime;
});
/**
* @author vzcb
* @class cHistory
* @description 记录城市历史记录
*/
define('gsCitySearchHistory',['cUIBase', 'libs'], function (Tools, libs) {

  /* 历史记录 */
  var History = function (options) {
    /** 元素 */
    this.element;

    /** 默认class */
    this.clazz = [Tools.config.prefix + 'history'];

    /** 唯一的maskname */
    this.maskName = "maskName";

    /** 自定义样式 */
    this.style = {};

    /** 背景大小偏移 */
    this.size = false;

    /** 显示数目大小 */
    this.listSize = 6;

    /** 点击回调 */
    this.itemClickFun = null;

    /** 获取焦点回调 */
    this.focusFun = null;

    /** 失去焦点回调 */
    this.blursFun = null;

    /** 输入回调 */
    this.inputFun = null;

    /** 唯一id */
    this._id = Tools.getCreateId();

    /** 最外层的层 */
    this._boxDom;

    /** 边线层 */
    this._borderDom;

    /** 内容层 */
    this._contDom;

    /** 清除按键 */
    this._clearButton;

    /** 清除按键标题 */
    this.clearButtonTitle = '清除搜索历史';

    /** 无历史记录时的标题 */
    this.notHistoryButtonTitle = '无搜索历史';

    /** 默认历史数据存取Store */
    this.historyStore = null;

    /** 数据源 */
    this.dataSource = [];

    /** 自动设置尺寸的资源句柄 */
    this._autoLocResoure;

    /** body元素 */
    this._bodyDom;

    /** 根节点 */
    this.rootBox;

    /** 设置显示下拉框 */
    this._oneShow = false;

    var self = this;

    /** 事件定义获取焦点 */
    this.event_focus = function () {
      self.Open();
      if (typeof self.focusFun == 'function') {
        self.focusFun();
      }
    };

    /** 事件定义失去焦点 */
    this.event_blur = function () {
      /*setTimeout(function () {
      if (!self._oneShow) {
      self.Close();
      }
      self._oneShow = false;
      }, 200);*/
      if (typeof self.blurFun == 'function') {
        self.blurFun();
      }
    };

    /** 事件定义文字变化 */
    this.event_input = function () {
      //self.Close();
      if (self.element.val() == "") {
        self._init();
        self.Open();
      }
      self.inputFun(self.element.val());
    };

    this._setOption(options);

    this._init();
  };

  History.prototype = {
    _setOption: function (options) {
      for (var i in options) {
        switch (i) {
          case 'element':
          case 'maskName':
          case 'clearButtonTitle':
          case 'style':
          case 'dataSource':
          case 'historyStore':
          case 'itmeClickFun':
          case 'focusFun':
          case 'blurFun':
          case 'inputFun':
          case 'size':
          case 'listSize':
          case 'rootBox':
            this[i] = options[i];
            break;
          case 'clazz':
            isArray(options[i]) && (this.clazz = this.clazz.concat(options[i]));
            isString(options[i]) && this.clazz.push(options[i]);
            break;
        }
      }
    },
    _init: function () {
      if (this._contDom) {
        this._contDom.find('li.item').unbind('click');
        this._contDom.remove();
      }
      this._boxDom && this._boxDom.remove();
      this._CreateDom();
      this._BuildEvent();
    },
    _CreateDom: function () {
      var C = Tools.createElement;
      this._bodyDom = this.rootBox || $('body');
      this.element = $(this.element);
      this._boxDom = $(C('div', { 'id': this._id, 'class': this.clazz.join(' ') }));
      this._boxDom.css({
        'position': 'absolute',
        'display': 'none'
      });
      this._borderDom = $(C('div', { 'class': Tools.config.prefix + 'history-border' }));
      var list = [];
      //如果没有输入值，去历史记录
      if (this.element.val() == "") {
        list = this._getHistory();
      } else {
        list = this._getSubList(this.dataSource, this.listSize);
      }

      this._contDom = $(C('ul', { 'class': Tools.config.prefix + 'history-list' }));
      for (var i in list) {
        this._contDom.append('<li class="item" data_id="' + list[i].id + '" data_name="' + list[i].name + '" data_cityId="' + list[i].cityId + '" data_isOverseas="' + list[i].isOverseas + '">' + list[i].name + '</li>');
      }
      //如果是在历史记录中取,显示清除提示
      if (this.element.val() == "") {
        this._clearButton = $(C('li', { 'class': [Tools.config.prefix + 'clear-history clearbutton'] }));
        if (list.length > 0) {
          this._clearButton.html(this.clearButtonTitle);
        } else {
          this._clearButton.html(this.notHistoryButtonTitle);
        }
        this._contDom.append(this._clearButton);
      }
      this._borderDom.append(this._contDom);
      this._boxDom.append(this._borderDom);
      this._bodyDom.append(this._boxDom);
    },
    _Location: function () {
      this._boxDom.css({ height: 'auto', width: 'auto' });
      var size = Tools.getPageSize();
      var pos = Tools.getElementPos(this.element[0]),
                left = this.style.left ? this.style.left : (this.size && this.size.left ? this.size.left + pos.left : pos.left) + 'px',
                top = this.style.top ? this.style.top : (this.size && this.size.top ? this.size.top + (pos.top + this.element.height()) : (pos.top + this.element.height())) + 'px',
                width = this.style.width ? this.style.width : this.element.width() + 'px',
                height = this.size && this.size.height ? ((size.height + this.size.height) + 'px') : 'auto';
      this._boxDom.css({
        'left': left,
        'top': top,
        'width': width,
        'height': height
      });
    },
    _AutoLocation: function () {
      this._Location();
      var self = this;
      this._autoLocResoure = function () {
        self._Location();
      };
      $(window).unbind('resize', this._autoLocResoure);
      $(window).bind('resize', this._autoLocResoure);
    },
    _UnAutoLocation: function () {
      $(window).unbind('resize', this._autoLocResoure);
    },
    _BuildEvent: function () {
      var self = this;
      this._contDom.find('li.item').unbind('click').bind('click', function () {
        var d = $(this);
        self.element.val(d.text());
        self.Close();
        if (typeof self.itmeClickFun == 'function') {
          var obj = {
            id: d.attr("data_id"),
            name: d.text(),
            cityId: d.attr("data_cityId"),
            isOverseas: d.attr("data_isOverseas")
          }
          self.itmeClickFun(obj);
        }
      });
      this.element.unbind('focus', this.event_focus);
      this.element.unbind('blur', this.event_blur);
      this.element.unbind('input', this.event_input);
      this.element.bind({
        'focus': this.event_focus,
        'blur': this.event_blur,
        'input': this.event_input
      });
      if (this.element.val() == "") {
        if (this._getHistory().length > 0) {
          this._clearButton.bind('click', function () {
              self.historyStore.remove();
              self.Close();
              self._init();
              self.Open();
          });
        }
      }
    },
    setOpen: function () {
      this._oneShow = true;
    },
    Open: function () {
      this._boxDom.css('z-index', Tools.getBiggerzIndex());
      this._boxDom.show();
      this._AutoLocation();
    },
    Close: function () {
      this._boxDom.hide();
      this._UnAutoLocation();
    },

    setDataSource: function (data) {
      this.dataSource = data;
      this.Close();
      this._init();
      this.Open()
    },

    addHistory: function (data) {
      var hList = this.historyStore.get() || [];
      if (!data.id) {
        data.id = 0;
      }
      //检查关键字已经查询在历史中
      var saveIdx = -1;
      for (var i = 0, ln = hList.length; i < ln; i++) {
        if (hList[i].name == data.name) {
          saveIdx = i;
          break;
        }
      }
      //如在历史中找到
      if (saveIdx > -1) {
        hList.splice(saveIdx, 1);
      }
      hList.unshift(data);
      this.historyStore.set(hList);
      //保存之后,重新生成dom结构
      this._init();
    },

    reset: function () {
      this._init();
    },
    //取历史记录
    _getHistory: function () {
      var hList = this.historyStore.get() || [];
      return this._getSubList(hList, this.listSize);
    },

    _getSubList: function (hList, size) {
      var ln = hList.length;
      if (ln <= size) {
        return hList;
      } else {
        return hList.slice(0, size);
      }
    }
  };
  return History;
}); 
;
define("text!templateCitylist", [], function(){return"<article class=\"greyfont scrollfix modb_clist\"><section class=\"cui-citys-hd cui-input-focus gs_search_wrap\"><div class=\"cui-input-bd clear-input-box gs_search_box\" style=\"width: 100%\"><input id=\"city_keyword\" type=\"text\" class=\"cui-input-box\" placeholder=\"中文/拼音/首字母\"></div><button type=\"button\" class=\"cui-btn-cancle search_cancel\" style=\"display: none\">取消</button></section><div id=\"city_tab_wrapper\"></div><ul id=\"city_all\" class=\"cui-city-itmes city_box\"></ul><ul id=\"city_inland\" class=\"cui-city-itmes city_box\"><li class=\"city_current_nearby modb_gridlist\" style=\"display:none\"><span class=\"cui-city-t\">周边城市</span><ul class=\"cui-city-n\"><li class=\"city_local_nearby gs-citylist-item\">定位中</li></ul></li><li class=\"city_current modb_gridlist\" style=\"display:none\"><span class=\"cui-city-t\">当前城市</span><ul class=\"cui-city-n\"><li><a href=\"#\" class=\"city_local gs-citylist-item\">定位中</a></li></ul></li></ul><ul id=\"city_inter\" class=\"cui-city-itmes city_box\"><li class=\"city_current_nearby modb_gridlist\" style=\"display:none\"><span class=\"cui-city-t\">周边城市</span><ul class=\"cui-city-n\"><li class=\"city_local_nearby gs-citylist-item\">定位中</li></ul></li><li class=\"city_current modb_gridlist\" style=\"display:none\"><span class=\"cui-city-t\">当前城市</span><ul class=\"cui-city-n\"><li><a href=\"#\" class=\"city_local gs-citylist-item\">定位中</a></li></ul></li></ul></article><script type=\"text/lizard-template\" id=\"city_item_tpl\"><%items.forEach(function(item){%><li class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.cityName%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.cityEName%>\"><%=item.cityName%></li><%})%></script><script type=\"text/lizard-template\" id=\"city_item_tpl_seo\"><%items.forEach(function(item){%><li><a href=\"<%=item.districtId ? '/html5/you/place/' + item.districtId + '.html' : '#'%>\" class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.cityName%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.cityEName%>\"><%=item.cityName%></a></li><%})%></script><script type=\"text/lizard-template\" id=\"city_item_tpl_seo_ask\"><%items.forEach(function(item){%><li><a href=\"<%=item.districtId ? '/html5/you/asks/' + item.districtId + '.html' : '#'%>\" title=\"你关心<%=item.cityName%>旅游的问题\" class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.cityName%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.cityEName%>\"><%=item.cityName%></a></li><%})%></script><script type=\"text/lizard-template\" id=\"city_list_tpl\"><%if (history&&!!history.length){%><li class=\"modb_gridlist\"><span class=\"cui-city-t\">历史城市</span><ul class=\"cui-city-n\"><%history.forEach(function(item){%><li class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.name%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.eName%>\"><%=item.name%></li><%})%></ul></li><%}%> <%if (hots&&!!hots.length){%><li class=\"modb_gridlist\"><span class=\"cui-city-t\">热门城市</span><ul class=\"cui-city-n\"><%hots.forEach(function(item){%><li class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.cityName%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.cityEName%>\"><%=item.cityName%></li><%})%></ul></li><%}%> <%'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').forEach(function(item){if(list[item]){%><li class=\"cui-arrow-close c-citylist-parent cityGroup<%=item%>\"><span class=\"cui-city-t\"><%=item%></span><ul class=\"cui-city-n c-citylist-child\"></ul></li><%}})%></script><script type=\"text/lizard-template\" id=\"city_list_tpl_seo\"><%if (history&&!!history.length){%><li class=\"modb_gridlist\"><span class=\"cui-city-t\">历史城市</span><ul class=\"cui-city-n\"><%history.forEach(function(item){%><li><a href=\"<%=item.districtId ? '/html5/you/place/' + item.districtId + '.html' : '#'%>\" class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.name%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.eName%>\"><%=item.name%></a></li><%})%></ul></li><%}%> <%if (hots&&!!hots.length){%><li class=\"modb_gridlist\"><span class=\"cui-city-t\">热门城市</span><ul class=\"cui-city-n\"><%hots.forEach(function(item){%><li><a href=\"<%=item.districtId ? '/html5/you/place/' + item.districtId + '.html' : '#'%>\" class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.cityName%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.cityEName%>\"><%=item.cityName%></a></li><%})%></ul></li><%}%> <%'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').forEach(function(item){if(list[item]){%><li class=\"cui-arrow-close c-citylist-parent cityGroup<%=item%>\"><span class=\"cui-city-t\"><%=item%></span><ul class=\"cui-city-n c-citylist-child\"></ul></li><%}})%></script><script type=\"text/lizard-template\" id=\"city_all_tpl\"><li><ul class=\"cui-city-n\"><li class=\"gs-citylist-item\" data-id=\"0\" data-name=\"全部目的地\" data-attr=\"1\">全部目的地</li></ul></li></script><script type=\"text/lizard-template\" id=\"city_list_tpl_seo_ask\"><%if (history&&!!history.length){%><li class=\"modb_gridlist\"><span class=\"cui-city-t\">历史城市</span><ul class=\"cui-city-n\"><%history.forEach(function(item){%><li><a href=\"<%=item.districtId ? '/html5/you/asks/' + item.districtId + '.html' : '#'%>\" title=\"你关心<%=item.name%>旅游的问题\" class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.name%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.eName%>\"><%=item.name%></a></li><%})%></ul></li><%}%> <%if (hots&&!!hots.length){%><li class=\"modb_gridlist\"><span class=\"cui-city-t\">热门城市</span><ul class=\"cui-city-n\"><%hots.forEach(function(item){%><li><a href=\"<%=item.districtId ? '/html5/you/asks/' + item.districtId + '.html' : '#'%>\" title=\"你关心<%=item.cityName%>旅游的问题\" class=\"gs-citylist-item\" data-id=\"<%=item.districtId%>\" data-name=\"<%=item.cityName%>\" data-attr=\"<%=Number(item.isdomestic)%>\" data-ename=\"<%=item.cityEName%>\"><%=item.cityName%></a></li><%})%></ul></li><%}%> <%'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').forEach(function(item){if(list[item]){%><li class=\"cui-arrow-close c-citylist-parent cityGroup<%=item%>\"><span class=\"cui-city-t\"><%=item%></span><ul class=\"cui-city-n c-citylist-child\"></ul></li><%}})%></script>"});
define('gsCityList',['libs',
    'cPageView',
    'UITab',
    'cUtility',
    'gsCitySearchHistory',
    'gsCommonGeolocation',
    'gsCommonModel',
    'gsCommon',
    'gsCommonStore',
    'text!templateCitylist',
    'gsAppAgent',
    'gsRouterRedirect'
], function (
    libs,
    cPageView,
    UITab,
    cUtility,
    cHistory,
    CommonGeolocation,
    CommonModel,
    Common,
    CommonStore,
    viewHtml,
    AppAgent,
    routerRedirect
) {

    var View = cPageView.extend({
        pageid: 0,
        hpageid: 1,

        specialIds: {
            HK: 38,  //香港
            MC: 39,  //澳门
            TP: 360  //台北
        },
        request: {},
        selectedCity: {
            districtId: 0,
            name: "全部目的地",
            isdomestic: 1
        },
        historyStyle: { width: '100%', left: '0px', top: '48px' },

        defaultTab: 0,

        //城市列表数据查询 Model
        cityListModel: CommonModel.GetCityList.getInstance(),

        //相关目的地查询
        curNearByCityListModel: CommonModel.GetCurNearByCityList.getInstance(),

        //列表数据
        citylistStore: CommonStore.CityListStore.getInstance(),

        historyCityStore: CommonStore.HistoryCityStore.getInstance(),
        //关键字查询历史 Store
        kwHistoryStore: CommonStore.KWHistoryStore.getInstance(),

        //关键字查询 Model
        // keySearchModel: CommonModel.KWListModel.getInstance(),

        //当前选中TAB
        CRT_TAB: 0,

        //本次后台搜索请求的到的数据,
        curSearchList: null,

        initParam: function(){
        },

        render: function () {
            this.$el.html(viewHtml);
            this.els = {
                city_box: this.$el.find('.city_box'),
                city_all: this.$el.find('#city_all'),
                city_inland: this.$el.find('#city_inland'),
                city_inter: this.$el.find('#city_inter'),
                city_associate: this.$el.find('.city_associate'),
                city_search_wrap: this.$el.find('.gs_search_wrap'),
                city_keyword: this.$el.find('#city_keyword'),
                city_tab_wrapper: this.$el.find('#city_tab_wrapper'),

                city_current: this.$el.find('.city_current'),
                city_current_nearby: this.$el.find('.city_current_nearby'),
                city_local: this.$el.find('.city_local'),
                city_local_nearby: this.$el.find('.city_local_nearby'),

                city_list_tpl: this.$el.find('#city_list_tpl'),
                city_list_item_tpl: this.$el.find('#city_item_tpl'),
                city_all_tpl: this.$el.find('#city_all_tpl'),

                searchCancel: this.$el.find('.search_cancel'),
                searchBox: this.$el.find(".gs_search_box")
            };
            this.allCityRender = _.template(this.els.city_all_tpl.html());
            this.listRender = _.template(this.els.city_list_tpl.html());
            this.listItemRender = _.template(this.els.city_list_item_tpl.html());
        },

        events: {
            'click .search_cancel': 'searchCancelAction',
            'click .c-citylist-parent': 'expandCityItemAction',
            'click .gs-citylist-item': 'cityItemAction'
        },

        expandCityItemAction: function (e) {
            var $this = $(e.currentTarget);
            if (!e.currentTarget.dataset.rendered) {
                this.renderCityItem($this);

                this.selectedCity.districtId = this.selectedCity.districtId || 0;
                //$this.find('[data-id="' + this.selectedCity.districtId + '"]').addClass('current');
                e.currentTarget.dataset.rendered = 1;
            }

            if ($this.hasClass('cui-arrow-open')) {
                $this.removeClass('cui-arrow-open').addClass('cui-arrow-close');
                $this.find('.c-citylist-child').hide();
            } else {
                this.$el.find('.c-citylist-parent.cui-arrow-open')
                    .removeClass('cui-arrow-open').addClass('cui-arrow-close')
                    .find('.c-citylist-child').hide();
                $this.removeClass('cui-arrow-close').addClass('cui-arrow-open');
                $this.find('.c-citylist-child').show();
            }
            return false;
        },

        renderCityItem: function (itemBox) {
            var tabIndex = this.cityTabs.getIndex(),
                key = itemBox.find('span').text(),
                itemData = this.data[!tabIndex ? 'inland' : 'inter'][key];

            var citiesHtml = this.listItemRender({ items: itemData });
            itemBox.find('ul').html(citiesHtml);
        },

        //cityConfirmClick: function () {
           // this.els.city_keyword.val('');
           // this.els.city_box.show();
            //this.els.city_associate.hide();
       // },



        onCreate: function () {
            console.log("onCreate..............");

            this.initParam();
            this.render();
            this.initKwHistory();

            var curCity = this.request.curCity;
            if (!!curCity) {
                this.selectedCity = {
                    districtId: curCity.id,
                    name: curCity.name
                };
                this.selectedCity.listType = this._getListType(curCity.id);
            }

            this._onScroll = $.proxy(this.onScroll, this);
            this._touchStartHandler = $.proxy(this.touchStartHandler, this);
            this._touchMoveHandler = $.proxy(this.touchMoveHandler, this);

            //c.ui.InputClear(this.els.city_keyword, null, null, null, false);

            var tabs = [
                { id: 0, name: '国内城市' },
                { id: 1, name: '海外城市' }
            ];


            this.cityTabs = new UITab({
                datamodel:{
                    data: tabs
                },
                wrapper: this.els.city_tab_wrapper,
                onChange: $.proxy(this.onchange, this)
            });

            this.cityTabs.show();


            if (cUtility.isInApp) {
                var match = navigator.userAgent.match(/iP(ad|hone|od)\sos\s(\d)/i);
                if (match && match[2] && match[2] >= 7) {
                    this.els.city_search_wrap.addClass('pt24');
                }
            }

            if (this.autoCompleteInput) {
                this.autoCompleteInput.reset();
            }
        },

        onchange: function (change) {
            console.log("onchange..............");

            this.els.city_keyword.blur(); //解决IOS不失去焦点的问题
            this.historyCityStore.setAttr('tab', change.id);
            this.showList(change.id);
        },

        onShow: function () {
            console.log("onShow..............");
            var self = this;
            //重置上次输入记录
            //this.cityConfirmClick();

            var historyData = this.historyCityStore.get();
            this.CRT_TAB = historyData ? historyData.tab : 0;

            this.showLoading();

            if (!self.request.hideTitle) {
                self.refreshHeader();
            }

            this.updatePage(function(){
                self.hideLoading();
                if ("undefined" != typeof CtripUtil && !!CtripUtil.logMarketPagePerformance) {
                    CtripUtil.logMarketPagePerformance("you", self.hpageid, {});
                }
                self.els.city_current.show();
                self.els.city_current_nearby.show();
                self.els.city_local.text('定位中');
                self.nearbyTourAndPos();
                self.els.city_tab_wrapper.show();

                $(window).bind('touchstart', self._touchStartHandler);
                $(window).bind('touchmove', self._touchMoveHandler);
            }, function () {
                self.hideLoading();
                self.showWarning404(function () {
                    self.hideWarning404();
                });
            });

            if(this.model == 'sight'){
                if(document.cookie.indexOf("AllianceID=807802") > -1 && document.cookie.indexOf("SID=1368984") > -1){
                    $('.js_back').hide();
                }
            }
        },

        onHide: function () {
            $(window).unbind('touchstart', this._touchStartHandler);
            $(window).unbind('touchmove', this._touchMoveHandler);
            $(window).unbind('scroll', this._onScroll);
        },

        refreshHeader: function () {
            var self = this;
            this.header.set({
                whiteBackground: (function() {
                    var result = '';
                    if ((Lizard.isHybrid || Lizard.isInCtripApp) && this.request && this.request.isRestaurant && (AppAgent.compareAppVersion("7.6") < 1)) {
                        result = true;
                    }
                    return result;
                })(),
                left: [{
                    tagname: 'back',
                    color: (AppAgent.compareAppVersion("7.6") < 1)? '#333333': '',
                    highlightColor: (AppAgent.compareAppVersion("7.6") < 1)? '#333333': '',
                    callback: function () {
                        routerRedirect.toBack();
                    }
                }],
                center: {
                    tagname: 'title',
                    value: ['选择城市']
                }
            })

            this.header.show();
        },

        updatePage: function (callback, error) {
            var data = this.citylistStore.get(),
                cityList,
                self = this;
            if(!data){
                if (this.request && this.request.isRestaurant) {
                    this.cityListModel.param.source = 'foods';
                }
                this.cityListModel.excute(function (result) {
                    cityList = self._dataformat(result.appDistricts||[]);
                    localStorage.removeItem("GS_H5_CITY_LIST_V0");
                    self.citylistStore.set(cityList),
                    self.renderList(cityList);
                    callback && callback.call(self);
                }, function () {
                    self.showToast("网络不给力, 稍后再试试吧.");
                    error && error();
                });
            }else{
                this.initSelectedCity(data);
                this.renderList(data);
                callback && callback();
            }
        },

            //为了简化city.html， 将hotFlag 转换成 hFlag
        sortHotCity: function (a, b) {
            return a.hFlag - b.hFlag;
        },

        getCityListByFirstChar: function (cityMap, fistchar) {
            !cityMap[fistchar] && (cityMap[fistchar] = []);
            return cityMap[fistchar];
        },

        classifyCity: function (city, cities) {
            var firstChar = city.firstLetter.toUpperCase();
            this.getCityListByFirstChar(cities, firstChar).push(city);

            // 香港在X和H下都出现，对应xianggang和hongkong
            city.districtId == this.specialIds.HK && this.getCityListByFirstChar(cities, 'H').unshift(city);
            // 澳门在A和M下都出现，对应aomen和macau
            city.districtId == this.specialIds.MC && this.getCityListByFirstChar(cities, 'M').unshift(city);
        },

        initSelectedCity: function(cities){
            var city, cityGroup,
                inland = cities.inland || {};
                inter  = cities.inter || {};
            for (j in inland) {
                cityGroup = inland[j] || [];
                for (var i = 0; i < cityGroup.length; i++) {
                    city = cityGroup[i];
                    if (this.selectedCity.districtId == city.districtId) {
                        this.selectedCity.firstLetter = city.firstLetter.toUpperCase();
                        this.selectedCity.isdomestic = 1;
                        return;
                    }
                }
            }

            for (k in inter) {
                cityGroup = inter[k] || [];
                for (var i = 0; i < cityGroup.length; i++) {
                    city = cityGroup[i];
                    if (this.selectedCity.districtId == city.districtId) {
                        this.selectedCity.firstLetter = city.firstLetter.toUpperCase();
                        this.selectedCity.isdomestic = 0;
                        return;
                    }
                }
            }
        },

        _dataformat: function (cities) {
            var inland = {}, inlandHot = [],
                inter = {}, interHot = [],
                cityMap = {},
                city;

            for (var i = 0; i < cities.length; i++) {
                city = cities[i];
                if (this.selectedCity.districtId == city.districtId) {
                    this.selectedCity.firstLetter = city.firstLetter.toUpperCase();
                    this.selectedCity.isdomestic = (0 === city.countryID || 1 == city.countryID);
                }

                //为了简化city.html， 将countryId 转换成 countryID
                if (0 === city.countryID) { //0 表示既是国内又是国外
                    city.isdomestic = 1;
                    if (!!city.isHot) {  //热门目的地
                        inlandHot.push(city);
                        interHot.push(city);
                    }

                    this.classifyCity(city, inland);
                    this.classifyCity(city, inter);
                } else if (1 === city.countryID) {//1 表示国内
                    city.isdomestic = 1;
                    if (!!city.isHot) {  //热门目的地
                        inlandHot.push(city);
                    }
                    this.classifyCity(city, inland);
                } else {
                    city.isdomestic = 0;
                    if (!!city.isHot) {  //热门目的地
                        interHot.push(city);
                    }
                    this.classifyCity(city, inter);
                }

                //cityMap[city.cityName] = cities[i];
            }

            return {
                //citymap: cityMap,
                inland: inland,
                inlandhot: inlandHot.sort(this.sortHotCity),
                inter: inter,
                interhot: interHot.sort(this.sortHotCity)
            };
        },

        renderList: function (data) {
            this.data = data;
            var history = this.historyCityStore.get() || {},
                _inland = history.inland || [],
                _inter = history.inter || [];
            this.els.city_current.siblings().not(this.els.city_current_nearby).remove();

            if (!this.request.hideAllCity) {
                var allCityHtml = this.allCityRender();
                this.els.city_all.html(allCityHtml);
            }

            if (this.request && this.request.isRestaurant) {
                var restaurantData = this.formatDateForRestaurant(_inland, _inter, data.inland, data.inter);
                _inland = restaurantData._inland;
                _inter = restaurantData._inter;
                data.inland = restaurantData.inland;
                data.inter = restaurantData.inter;
            }

            var inlandHtml = this.listRender({
                hots: data.inlandhot,
                list: data.inland,
                history: _inland,
                tab: 1
            });
            this.els.city_inland.append(inlandHtml);

            var interHtml = this.listRender({
                hots: data.interhot,
                list: data.inter,
                history: _inter
            });
            this.els.city_inter.append(interHtml);
            this.CRT_TAB = this.selectedCity.isdomestic ? 0 : 1;

            if (!!this.defaultTab) {
                this.CRT_TAB = 1;
            }

            this.cityTabs.setIndex(this.CRT_TAB);
            this.showList(this.CRT_TAB);
            this.extendSelected(data);
        },

        formatDateForRestaurant: function(_inland, _inter, inland, inter) {
            var self = this,
                _myinland = [],
                _myinter = [],
                myinland = {},
                myinter = {};

            $.each(_inland, function (k, v) {
                /*if (v.cityId) {
                    _myinland.push(v);
                } else {
                    if (self.getCityInfoByDistrictId(v.districtId).cityId) {
                        _myinland.push(v);
                    }
                }*/
                _myinland.push(v);
            });
            $.each(_inter, function (k, v) {
                /*if (v.cityId) {
                    _myinter.push(v);
                } else {
                    if (self.getCityInfoByDistrictId(v.districtId).cityId) {
                        _myinter.push(v);
                    }
                }*/
                _myinter.push(v);
            });
            $.each(inland, function (k, l) {
                var tempArr = [];
                $.each(l, function (idx, item) {
                    if (item.cityId) {
                        tempArr.push(item);
                    }
                });
                if (tempArr.length == 0) {
                    delete inland[k];
                } else {
                    myinland[k] = tempArr;
                }
            });
            $.each(inter, function (k, l) {
                var tempArr = [];
                $.each(l, function (idx, item) {
                    if (item.cityId) {
                        tempArr.push(item);
                    }
                });
                if (tempArr.length == 0) {
                    delete myinter[k];
                } else {
                    myinter[k] = tempArr;
                }
            });

            return {
                _inland: _myinland,
                _inter: _myinter,
                inland: myinland,
                inter: myinter
            }
        },

        getCityInfoByDistrictId: function(districtId) {
            districtId = parseInt(districtId, 10);
            if (districtId === 0) return {};

            var info = '',
                cityData = this.citylistStore.get() || {};

            $.each(cityData.inland, function (k, l) {
                $.each(l, function (idx, item) {
                    if (item.districtId === districtId) {
                        info = item;
                        return false;
                    }
                });
                if (info) return false;
            });

            if (info == '') {
                $.each(cityData.inter, function (k, l) {
                    $.each(l, function (idx, item) {
                        if (item.districtId === districtId) {
                            info = item;
                            return false;
                        }
                    });
                    if (info) return false;
                });
            }

            return info? info: {};
        },

        extendSelected: function (data) {

            this.selectedCity.districtId = this.selectedCity.districtId || 0;
                var listId = this.selectedCity.isdomestic ? "#city_inland" : "#city_inter";
                $(listId).find(".cityGroup" + this.selectedCity.initial).click();
           // this.$el.find('[data-id="' + this.selectedCity.districtId + '"]').addClass('current');
        },

        showList: function (index) {
            switch (index) {
                case 0:
                    this.els.city_inter.hide();
                    this.els.city_inland.show();
                    break;
                case 1:
                    this.els.city_inter.show();
                    this.els.city_inland.hide();
                    break;
            }
        },

        /**
        * 初始化历史查询
        */
        initKwHistory: function () {
            var self = this;
            this.autoCompleteInput = new cHistory({
                'element': this.els.city_keyword,
                'style': this.historyStyle,
                'size': { height: -5, top: 8 },
                'historyStore': self.kwHistoryStore,
                'listSize': 20,
                'itmeClickFun': function (data) {
                    self._scenicSpotSelect(data);
                },
                'rootBox': this.$el,
                'focusFun': function () {
                    self._inputFocus();
                },
                'inputFun': function () {
                    self._keyInput();
                },
                'clearHistoryAction': function () {
                    self._clearKwHistory();
                }
            });
        },

        cityItemAction: function (e) {
            var cityId = e.currentTarget.dataset.id,
                cityName = e.currentTarget.dataset.name,
                eName = e.currentTarget.dataset.ename,
                cityAttr = e.currentTarget.dataset.attr;

            if (!cityId || !cityName) return;

            var data = {
                districtId: cityId,
                name: cityName,
                eName: eName,
                isdomestic: cityAttr == 1
            };

            this.addHistory(data);

            this.selectedCity = { "districtId": cityId, "name": cityName, "eName": eName };

           // var listType = cityAttr == 1 ? "inland" : "inter";
           // this.selectedCity.listType = listType;
            this.backAction();
        },

        _scenicSpotSelect: function (obj) {

            if(obj.hasOwnProperty("name")){
                obj.name = obj.name.split(",")[0];
            }

            //设置eName
            if (!obj.hasOwnProperty("eName")) {
                var srcData = this._getDataInSearchList(obj.id);
                obj.eName = "";
            if (srcData) {
                obj.eName = srcData.hasOwnProperty("eName") ? srcData.eName : "";
                }

            }
            this.autoCompleteInput.addHistory({ "id": obj.id, "name": obj.name, "eName": obj.eName, "cityId": obj.cityId, "isOverseas": obj.isOverseas });
            this.selectedCity = obj;
            this.selectedCity.districtId = obj.id;

            var listType = this._getListType(this.selectedCity.districtId);
            if (!listType) {
                listType = obj.isOverseas == 'true'? 'inter': 'inland';
            }
            var data = {
                districtId: obj.id,
                name: obj.name,
                eName: obj.eName,
                isdomestic: 'inland' == listType
            };

            this.addHistory(data);

            //this.selectedCity.listType = listType;
            this.searchCancelAction();

            this.backAction();
        },

        _getDataInSearchList: function (id) {
        if (this.curSearchList) {
            for (var k in this.curSearchList) {
                    var item = this.curSearchList[k];
                if (item && item.id * 1 === id * 1) {
                        return item;
                    }
                }
            }
            return null;
        },

        //历史记录STORE处理
        addHistory: function (data) {
            var self = this;
            var _limitHistory = function (historyList, data, maxLength) {
                var _maxLength = maxLength || 4;
                historyList = historyList.filter(function (value, index, array) {
                    return value.districtId != data.districtId && value.name != data.name;
                });
                historyList.unshift(data);
            historyList.splice(_maxLength, historyList.length); //最大长度
                return historyList;
            },
            _addHistory = function (data, crt) {
                var historyCities = self.historyCityStore.get(),
                    key = !crt ? 'inland' : 'inter';
                historyCities[key] = _limitHistory(historyCities[key], data);
				historyCities["last"] = data;
                historyCities.crt = crt;
                self.historyCityStore.set(historyCities);
            };


            if (0 != data.districtId) {
                if (!!data.isdomestic) {
                    _addHistory(data, 0);
                    if (data.districtId == this.specialIds.HK || data.districtId == this.specialIds.MC || data.districtId == this.specialIds.TP) {
                        _addHistory(data, 1);
                    }
                } else {
                    _addHistory(data, 1);
                }
            }
            // return function (data) {
            //     if (0 != data.districtId) {
            //         self = this;
            //         if (!!data.isdomestic) {
            //             _addHistory(data, 0);
            //             if (data.districtId == this.specialIds.HK || data.districtId == this.specialIds.MC || data.districtId == this.specialIds.TP) {
            //                 _addHistory(data, 1);
            //             }
            //         } else {
            //             _addHistory(data, 1);
            //         }
            //     }
            // };
        },

        //返回
        backAction: function () {
            var returnCity;
            if (this.selectedCity) {
                returnCity = {
                    city_id: parseInt(this.selectedCity.districtId, 0),
                    city_name: this.selectedCity.name,
                eName: this.selectedCity.eName
                };
            }

            if (typeof this.request.backAction === 'function') {
                this.request.backAction(returnCity);
            }
        },

        _getListType: function (id) {
            id = parseInt(id, 10);
            if (id === 0) return 'inland';

            var listType = '';
            var cityData = this.citylistStore.get() || {};//this._dataformat(JSON.parse());

            $.each(cityData.inland, function (k, l) {
                $.each(l, function (idx, item) {
                    if (item.districtId === id) {
                        listType = 'inland';
                        return false;
                    }
                });
                if (!!listType) return false;
            });

            if (!listType) {
                $.each(cityData.inter, function (k, l) {
                    $.each(l, function (idx, item) {
                        if (item.districtId === id) {
                            listType = 'inter';
                            return false;
                        }
                    });
                    if (!!listType) return false;
                });
            }

            return listType;
        },

        //Foucs 回调
        _inputFocus: function () {
           // this.els.city_search_wrap.addClass('js_search_opt');
            this.els.searchBox.width("80%");
            this.showSearchArea();
        },

        searchCancelAction: function (e) {
            this.els.city_keyword.val('');
            this._keyInput();
            //this.els.city_search_wrap.removeClass('js_search_opt');
            this.autoCompleteInput.setDataSource([]);
            this.autoCompleteInput.Close();
            this.els.searchBox.width("100%");

            this.hideSearchArea();
        },

        showSearchArea: function () {
            this.els.searchCancel.show();
            this.els.city_inland.hide();
            this.els.city_inter.hide();
        },

        hideSearchArea: function () {
            this.els.searchCancel.hide();

        if (this.cityTabs.getIndex() == 0)
                this.els.city_inland.show();
        if (this.cityTabs.getIndex() == 1)
                this.els.city_inter.show();
        },

        //input 回调
        _keyInput: function () {
            var self = this;
            var v = this.els.city_keyword.val();
            if (v.length > 0) {
                var clazz = this.els.searchBox.attr("class");
                if ($.inArray('clear_txt', clazz)) {
                    this.els.searchBox.addClass('clear_txt');
                }

                /*
                this.keySearchModel.setParam({
                    "pageindex": 1,
                    "pagesize": 20,
                    "searchtype": this.request.searchtype || 1,
                    "keyword": v
                });
                */
                var data = {
                    "Start": 1,
                    "Count": 20,
                    "OrderType": "CtripApp",
                    "OnlyGsShow": true,
                    "Keyword": v,
                    "DistrictType": Lizard.P("fromplace") ? "city" : !!Lizard.P("fromAddmerchant") ? "CITY,SIGHTZONE,PROVINCE" : ''
                };
                //美食6.21去掉DictrictType参数，添加参数PageTypes=400
                if(self.request.pageTypes){
                    data.PageTypes = [self.request.pageTypes];
                }
                if (self.timer) {
                    clearTimeout(self.timer);
                }
                self.timer = setTimeout(function () {
                    CommonModel.getInputCityList(
                        data,
                        function (data) {
                            var list = self._parseLenevoData(data.Result||[]);
                            self.curSearchList = list;      //存一份，用来找到额外的属性，比如ename
                            self.autoCompleteInput.setDataSource(list);

                            if (0 === list.length) {
                                self.els.city_associate.html('<p class="cui-city-novalue" style="">没有结果</p>');
                            }
                        },
                        function () {
                            self.els.city_associate.html('<p class="cui-city-novalue" style="">没有结果</p>');
                        });
                    /*
                    self.keySearchModel.excute(function (data) {
                        var list = self._parseLenevoData(data);

                        self.autoCompleteInput.setDataSource(list);

                        if (0 === list.length) {
                            self.els.city_associate.html('<p class="cui-city-novalue" style="">没有结果</p>');
                        }
                    });
                    */
                }, 1000);
            } else {
                if (self.timer) {
                    clearTimeout(self.timer);
                }
                this.els.searchBox.removeClass('clear_txt');
            }
        },

        _clearKwHistory: function () {
            this.els.searchBox.width("100%");
            this.hideSearchArea();
            //this.els.city_search_wrap.removeClass('js_search_opt');
        },

        _parseLenevoData: function (districts) {
            var list = [];
            $.each(districts, function (index, item) {
                var showName = item.Name + (item.ParentName?(", "+item.ParentName):"");
                list.push({ id: item.Id, name: showName, eName: item.EName, cityId: item.CityId, isOverseas: item.IsOverseas});
            });
            return list;
        },

        //附近景点和定位
        nearbyTourAndPos: function () {
            var self = this;

            var citySuccess = function (json) {
                if (!json) {
                    self.els.city_current.hide();
                } else {
                    self.updateCurrentCity(json);
                }

                if (json && json.lat && json.lng) {
                    self.updateCurrentNearbyCity(json);
                } else {
                    self.els.city_current_nearby.hide();
                }
            };
            var posError = function (msg, e) {
                console.log("posError.......................");
                self.els.city_current.hide();
                self.els.city_current_nearby.hide();
            };

            //获取当前城市 和 相关城市
            //走H5定位逻辑
            CommonGeolocation.getLocationInfo({
                useGSCache:1,
                noCache:1,
                onCityComplete: citySuccess,
                onCommonError: posError
            });
        },

        updateCurrentCity: function (data) {
            var attr = 1;
            if (!data) return;
            this.els.city_local.text(data.districtName);
            this.els.city_local.attr('data-id', data.districtId);
            this.els.city_local.attr('data-name', data.districtName);
            this.els.city_local.attr('data-eName', data.eName);
            //6.18之前这里逻辑有问题，定位并不返回isInChina
            if (this._getListType(data.districtId) == 'inter') {
                attr = 0;
            }
            this.els.city_local.attr('data-attr', attr);
        },

        //调接口获取相关城市
        updateCurrentNearbyCity: function(obj) {
            var self = this,
                text = '',
                id, name, ename, attr;

            if (obj.lat && obj.lng) {
                self.curNearByCityListModel.param.LatLng = {
                    Lat: obj.lat,
                    Lng: obj.lng
                };
                self.curNearByCityListModel.excute(function (result) {
                    if (result && result.Result && result.Result.length > 0) {
                        for (var i = 0; i < result.Result.length; i++ ) {
                            id = result.Result[i].DistrictID;
                            name = result.Result[i].DistrictName;
                            ename = result.Result[i].DistrictEName;
                            attr = result.Result[i].InChina? 1: 0;

                            text += '<li class="city_local_nearby gs-citylist-item" data-id="'+id+'" data-name="'+name+'" data-eName="'+ename+'" data-attr="'+attr+'">'+name+'</li>';
                        }
                        self.els.city_local_nearby.parent().html(text);
                    }
                }, function () {
                    self.showToast("网络不给力, 稍后再试试吧.");
                });
            }
        },

        touchStartHandler: function (e) {
            var touch = e.touches[0];
            this.touchX = touch.pageX;
            this.touchY = touch.pageY;
        },

        touchMoveHandler: function (e) {
            var touch = e.touches[0];
            if (Math.abs(touch.pageX - this.touchX) >= 20 || Math.abs(touch.pageY - this.touchY) >= 20) {
                this.els.city_keyword.blur();
            }
        },

        //当窗口滚动时，触发
        onScroll: function (e) {
            this.els.city_keyword.blur();
            $(window).unbind('scroll', this._onScroll);
        }
    });
    return View;
});

"use strict"
define('gsUIStar',['cCoreInherit', 'UIView'], function (CoreInherit,UIView) {
    var s = null;

    var Star = _.inherit(UIView, {
        propertys: function($super) {
            $super();
            this.datamodel = {
                //当前选择id
                count: 5,//评分的总个数
                curNum: '',//当前选了几颗评分
                showInfo: 'current',//是否显示对应的评价信息
                starInfo: [],//评价信息
                editable: 0,
                initWidth:50
            };
        },
        initialize: function($super, opts) {
            this.setOption(opts);
            $super(opts);

            //评分信息的数组，必须和星星总数对应
            this.datamodel.starInfo = this.datamodel.starInfo ? this.datamodel.starInfo : new Array("谢谢您的评价");
            //若showInfo为true则显示信息html赋值
            var initTemp = this.datamodel.starInfo.length>1?this.datamodel.starInfo[this.datamodel.curNum-1]:this.datamodel.starInfo[0];
            this.showInfoHtml = this.datamodel.showInfo? '<div class="showInfo">'+ initTemp +'</div>' : '';
            //若初始选中评分，则计算评分的长度
            this.datamodel.initWidth = this.datamodel.curNum ? this.datamodel.curNum/this.datamodel.count*100 : 0;

            //this.template = _.template(['<span class="cui-rate"><span class="cui-rate-r1"><%for(var i=0;i<this.count;i++){%><i data-index=<%=i%>></i><%}%></span><span class="cui-rate-r2" style="width:'+this.initWidth+'%"><%for(var i=0;i<this.count;i++){%><i data-index=<%=i%>></i><%}%></span></span>' +  this.showInfoHtml].join(''));
            this.template = _.template('<span class="cui-rate"><span class="cui-rate-r1"><%for(var i=0;i<count;i++){%><i data-index=<%=i%>></i><%}%></span><span class="cui-rate-r2" style="width:'+this.datamodel.initWidth+'%"><%for(var i=0;i<count;i++){%><i data-index=<%=i%>></i><%}%></span></span>' +  this.showInfoHtml)(this.datamodel);

        },
        addEvent: function ($super) {
            $super();
            var that = this;
            this.on('onShow', function () {
                that.wrapper.find('.view').append(that.template);
                $(that.wrapper.selector + ' i').bind('click', $.proxy(function(e) {
                    if(!that.datamodel.editable){
                        return false;
                    }

                    var curNum = $(e.target).attr('data-index');
                    //选中的长度
                    $(that.wrapper).find('.cui-rate-r2').css('width',(parseInt(curNum)+1)/that.datamodel.count*100+'%');
                    var showIndex = (that.datamodel.starInfo.length>1) ?curNum :0;
                    that.datamodel.curNum = curNum*1+1;

                    //是否显示评分信息
                    that.datamodel.showInfo ? $('.showInfo').html(that.datamodel.starInfo[showIndex]):'';

                },that));
            });
        },
        /**
         * 获取当前几颗星星
         * @return {[type]} [description]
         */
        getCurNum:function(){
            return this.datamodel.curNum;
        },
        setOption: function(opts) {
            for(var k in opts) {
                this[k] = opts[k];
            }
        }

    });

    return Star;
});
define('gsImagesZoom',[],function () {

    var document = window.document,
        support = {
            transform3d: ("WebKitCSSMatrix" in window && "m11" in new WebKitCSSMatrix()),
            touch: ("ontouchstart" in window)
        };

    function getTranslate(x, y) {
        var distX = x, distY = y;
        return support.transform3d ? "translate3d(" + distX + "px, " + distY + "px, 0)" : "translate(" + distX + "px, " + distY + "px)";
    }

    function getPage(event, page) {
        return support.touch ? event.changedTouches[0][page] : event[page];
    }

    var ImagesZoom = function () { };

    ImagesZoom.prototype = {
        /*
        * 给初始化数据
        * @params
        *     elem: 元素下的图片
        *     mask: 遮罩层
        */
        init: function (params) {

            var self = this;

            var imgSrc = "";

            self.setConfig(params);

            self._destroy();

            self.zoomClose.addEventListener("click", function () {
                self.hideImage();
            }, false);

            $(".event_image").off("click").on("click", function (e) {

                e.stopPropagation();

                imgSrc = $(e.currentTarget).data("originurl");

                self.zoomMask.style.cssText = "display:block";
                self.zoomImg.src = imgSrc;

                self.zoomImg.onload = function () {

                    self.zoomImg.style.cssText = "margin-top:-" + (self.zoomImg.offsetHeight / 2) + "px";

                    // 禁止页面滚动
                    document.addEventListener("touchmove", self.eventStop, false);

                    self.imgBaseWidth = self.zoomImg.offsetWidth;
                    self.imgBaseHeight = self.zoomImg.offsetHeight;

                    self.addEventStart({
                        wrapX: self.zoomMask.offsetWidth,
                        wrapY: self.zoomMask.offsetHeight,
                        mapX: self.zoomImg.width,
                        mapY: self.zoomImg.height
                    });
                }
            });
        },

        setConfig: function (params) {
            var self = this;

            var dom = (params && params.mask) ? params.mask : '.imgzoom_pack';

            self.imgList = (params && params.elem) ? document.querySelectorAll(params.elem + ' img') : document.querySelectorAll('img');
            self.zoomMask = document.querySelector(dom);
            self.zoomImg = document.querySelector(dom + ' img');
            self.zoomClose = document.querySelector(dom + ' .this_close');

            self.buffMove = 3; //缓冲系数
            self.buffScale = 2; //放大系数
            self.finger = false; //触摸手指的状态 false：单手指 true：多手指
        },

        addEventStart: function (param) {
            var self = this,
                params = param || {};

            // self.zoomImg = document.querySelector(".imgzoom_pack img");

            //config set
            self.wrapX = params.wrapX || 0;     //可视区域宽度
            self.wrapY = params.wrapY || 0;     //可视区域高度
            self.mapX = params.mapX || 0;      //地图宽度
            self.mapY = params.mapY || 0;      //地图高度

            // self.outDistY = (self.mapY - self.wrapY)/2; //图片超过一屏的时候有用

            self.width = self.mapX - self.wrapX;   //地图的宽度减去可视区域的宽度
            self.height = self.mapY - self.wrapY;   //地图的高度减去可视区域的高度

            self.zoomImg.addEventListener('touchstart', function (e) {
                self._touchstart(e);
            }, false);

            self.zoomImg.addEventListener('touchmove', function (e) {
                self._touchmove(e);
            }, false);

            self.zoomImg.addEventListener('touchend', function (e) {
                self._touchend(e);
            }, false);
        },

        // 重置坐标数据
        _destroy: function () {
            this.distX = 0;
            this.distY = 0;
            this.newX = 0;
            this.newY = 0;
        },

        // 更新地图信息
        _changeData: function () {
            this.mapX = this.zoomImg.offsetWidth;     //地图宽度
            this.mapY = this.zoomImg.offsetHeight;      //地图高度
            // this.outDistY = (this.mapY - this.wrapY)/2; //当图片高度超过屏幕的高度时候。图片是垂直居中的，这时移动有个高度做为缓冲带
            this.width = this.mapX - this.wrapX;   //地图的宽度减去可视区域的宽度
            this.height = this.mapY - this.wrapY;   //地图的高度减去可视区域的高度
        },

        _touchstart: function (e) {
            var self = this;

            e.preventDefault();

            var touchTarget = e.targetTouches.length; //获得触控点数

            self._changeData(); //重新初始化图片、可视区域数据，由于放大会产生新的计算

            if (touchTarget == 1) {
                // 获取开始坐标
                self.basePageX = getPage(e, 'pageX');
                self.basePageY = getPage(e, 'pageY');

                self.finger = false;
            } else {
                self.finger = true;

                self.startFingerDist = self.getTouchDist(e).dist;
                self.startFingerX = self.getTouchDist(e).x;
                self.startFingerY = self.getTouchDist(e).y;
            }
        },

        _touchmove: function (e) {
            var self = this;

            e.preventDefault();
            e.stopPropagation();

            var touchTarget = e.targetTouches.length; //获得触控点数

            if (touchTarget == 1 && !self.finger) {
                self._move(e);
            }

            if (touchTarget >= 2) {
                self._zoom(e);
            }
        },

        _touchend: function (e) {
            var self = this;

            self._changeData(); //重新计算数据
            if (self.finger) {
                self.distX = -self.imgNewX;
                self.distY = -self.imgNewY;
            }

            if (self.distX > 0) {
                self.newX = 0;
            } else if (self.distX <= 0 && self.distX >= -self.width) {
                self.newX = self.distX;
                self.newY = self.distY;
            } else if (self.distX < -self.width) {
                self.newX = -self.width;
            }
            self.reset();
        },

        /*
        * 隐藏缩放图片层
        * @params
        *     mask: 遮罩层
        *     img: 图片层
        */
        hideImage: function () {
            var self = this;

            self.zoomMask.style.cssText = 'display:none';
            self.zoomImg.src = '';
            self.zoomImg.style.cssText = '';

            self._destroy();

            document.removeEventListener('touchmove', self.eventStop, false);
        },

        _move: function (e) {
            var self = this,
                pageX = getPage(e, 'pageX'), //获取移动坐标
                pageY = getPage(e, 'pageY');

            // 禁止默认事件
            // e.preventDefault();
            // e.stopPropagation();

            // 获得移动距离
            self.distX = (pageX - self.basePageX) + self.newX;
            self.distY = (pageY - self.basePageY) + self.newY;

            if (self.distX > 0) {

                self.moveX = Math.round(self.distX / self.buffMove);

            } else if (self.distX <= 0 && self.distX >= -self.width) {

                self.moveX = self.distX;

            } else if (self.distX < -self.width) {

                self.moveX = -self.width + Math.round((self.distX + self.width) / self.buffMove);

            }

            self.movePos();

            self.finger = false;
        },

        // 图片缩放
        _zoom: function (e) {
            var self = this;
            // e.preventDefault();
            // e.stopPropagation();

            var nowFingerDist = self.getTouchDist(e).dist, //获得当前长度
                ratio = nowFingerDist / self.startFingerDist, //计算缩放比
                imgWidth = Math.round(self.mapX * ratio), //计算图片宽度
                imgHeight = Math.round(self.mapY * ratio); //计算图片高度

            // 计算图片新的坐标
            self.imgNewX = Math.round(self.startFingerX * ratio - self.startFingerX - self.newX * ratio);
            self.imgNewY = Math.round((self.startFingerY * ratio - self.startFingerY) / 2 - self.newY * ratio);

            if (imgWidth >= self.imgBaseWidth) {
                self.zoomImg.style.width = imgWidth + "px";
                self.refresh(-self.imgNewX, -self.imgNewY, "0s", "ease");
                self.finger = true;
            } else {
                if (imgWidth < self.imgBaseWidth) {
                    self.zoomImg.style.width = self.imgBaseWidth + "px";
                }
            }

            /*
            self.zoomImg.style.width = imgWidth + 'px';
            self.refresh(-self.imgNewX, -self.imgNewY, '0s', 'ease');
            */
            self.finger = true;
        },

        // 移动坐标
        movePos: function () {
            var self = this;

            if (self.height < 0) {

                if (self.zoomImg.offsetWidth == self.imgBaseWidth) {
                    self.moveY = Math.round(self.distY / self.buffMove);
                } else {
                    var moveTop = Math.round((self.zoomImg.offsetHeight - self.imgBaseHeight) / 2);
                    self.moveY = -moveTop + Math.round((self.distY + moveTop) / self.buffMove);
                }

            } else {

                var a = Math.round((self.wrapY - self.imgBaseHeight) / 2),
                    b = self.zoomImg.offsetHeight - self.wrapY + Math.round(self.wrapY - self.imgBaseHeight) / 2;

                if (self.distY >= -a) {
                    self.moveY = Math.round((self.distY + a) / self.buffMove) - a;
                } else if (self.distY <= -b) {
                    self.moveY = Math.round((self.distY + b) / self.buffMove) - b;
                } else {
                    self.moveY = self.distY;
                }

            }

            self.refresh(self.moveX, self.moveY, '0s', 'ease');
        },

        // 重置数据
        reset: function () {
            var self = this,
                hideTime = '.2s';

            if (self.height < 0) {

                self.newY = -Math.round(self.zoomImg.offsetHeight - self.imgBaseHeight) / 2;

            } else {

                var a = Math.round((self.wrapY - self.imgBaseHeight) / 2),
                    b = self.zoomImg.offsetHeight - self.wrapY + Math.round(self.wrapY - self.imgBaseHeight) / 2;

                if (self.distY >= -a) {
                    self.newY = -a;
                } else if (self.distY <= -b) {
                    self.newY = -b;
                } else {
                    self.newY = self.distY;
                }

            }

            self.refresh(self.newX, self.newY, hideTime, 'ease-in-out');
        },

        // 执行图片移动
        refresh: function (x, y, timer, type) {

            this.zoomImg.style.webkitTransitionProperty = '-webkit-transform';
            this.zoomImg.style.webkitTransitionDuration = timer;
            this.zoomImg.style.webkitTransitionTimingFunction = type;
            this.zoomImg.style.webkitTransform = getTranslate(x, y);

        },

        // 获取多点触控
        getTouchDist: function (e) {
            var x1 = 0,
                y1 = 0,
                x2 = 0,
                y2 = 0,
                x3 = 0,
                y3 = 0,
                result = {};

            x1 = e.touches[0].pageX;
            x2 = e.touches[1].pageX;
            y1 = e.touches[0].pageY - document.body.scrollTop;
            y2 = e.touches[1].pageY - document.body.scrollTop;

            if (!x1 || !x2) return;

            if (x1 <= x2) {
                x3 = (x2 - x1) / 2 + x1;
            } else {
                x3 = (x1 - x2) / 2 + x2;
            }
            if (y1 <= y2) {
                y3 = (y2 - y1) / 2 + y1;
            } else {
                y3 = (y1 - y2) / 2 + y2;
            }

            result = {
                dist: Math.round(Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))),
                x: Math.round(x3),
                y: Math.round(y3)
            };
            return result;
        },

        eventStop: function (e) {

            e.preventDefault();
            e.stopPropagation();

        }
    };

    return ImagesZoom;
});
define('gsShowImages',[],function () {
    var document = window.document,
	support = {
	    transform3d: ("WebKitCSSMatrix" in window && "m11" in new WebKitCSSMatrix()),
	    touch: ("ontouchstart" in window)
	};

    var ImagesZoom = {

        finger: false,

        /*
        * @params
        *     imgsUrl: 图片地址（数组）
        *     detail: 文本信息
        **      text: 文本正文信息
        **      from: 文本信息上方
        **      time: 文本信息下方
	    *     isDetail: 是否针对单张图片描述
        *     currentImg: 当前第几张图
        *	  isScale: true/false 是否开启缩放功能
        *     maxScale: 最大缩放值
        */
        init: function (params) {
            var self = this;

            self.setConfig(params);

            self.len = self.imgs.length;

            self.$wrap = $(".appue_scale");
            self.$that = $(".appue_scale .this_img");

            self.bodyWidth = $("body").width();
            self.bodyHeight = $("body").height();

            self.imagesWH = new Array(self.len); // 存取图片高宽

            self.newX = 0;
            self.newY = 0;

            self.initImg();

            self.addEvent();

            self.setTitle();
        },

        setConfig: function (params) {
            var self = this;

            var i,
			options = {
			    imgsUrl: "",
			    detail: "",
                isDetail: false,
			    buffMove: 3,
			    currentImg: 0,
			    isScale: false,
			    maxScale: 2,
			    minDist: 120
			};

            for (i in params) options[i] = params[i];

            self.imgs      = options.imgsUrl; //----------图片地址 数组
            self.detail    = options.detail; //-----------文字描述
            self.isDetail  = options.isDetail; //---------文字描述是否针对单张图片
            self.current   = options.currentImg; //-------当前是第几张图
            self.buffScale = options.maxScale; //---------缩放最大值
            self.isScale   = options.isScale; //----------是否开启缩放[true、false]
            self.buffMove  = options.buffMove; //---------缓冲系数
            self.minDist   = options.minDist; //----------最大移动距离，超过该距离将翻页
        },

        initImg: function () {
            var self = this;

            var str = "";

            for (var i = 0; i < self.len; i++) {
                str = str + '<li style="width:' + self.bodyWidth + 'px;height:' + self.bodyHeight + 'px;"></li>';
            }

            self.$that.append(str);

            self.$wrap.css({
                "display": "block"
            });

            // self.$wrap.find("li").eq(self.current).append('<img src="'+ self.imgs[self.current] +'" />');

            // self.$that.css({
            // 	'-webkit-transform': 'translate3d(-' + self.bodyWidth*self.current + 'px, 0, 0)'
            // });

            self.appendImage();

            self.moveSlide({
                'timer': '0'
            });
        },

        /*
        * 事件绑定
        * touchstart、touchmove、touchend
        */
        addEvent: function () {
            var self = this;

            var that = document.querySelectorAll(".appue_scale li");

            for (var i = 0, len = that.length; i < len; i++) {

                that[i].addEventListener("touchstart", function (e) {
                    self._touchstart(e);
                }, false);

                that[i].addEventListener("touchmove", function (e) {
                    self._touchmove(e);
                }, false);

                that[i].addEventListener("touchend", function (e) {
                    self._touchend(e);
                }, false);

            }
        },

        /*
        * 更新地图信息
        *     e: 点击事件
        */
        _changeData: function (e) {
            var self = this;

            self.mapX = $(e.target).width();  	//地图宽度
            self.mapY = $(e.target).height(); 	//地图高度

            // this.outDistY = (this.mapY - this.wrapY)/2; //当图片高度超过屏幕的高度时候。图片是垂直居中的，这时移动有个高度做为缓冲带
            self.width = self.mapX - self.bodyWidth;   //地图的宽度减去可视区域的宽度
            self.height = self.mapY - self.bodyHeight;   //地图的高度减去可视区域的高度
        },


        /*
        * 获取图片的初始高、宽
        */
        setImagesInfo: function (e) {
            var self = this;

            var $that = self.getTarget(e);

            if (!self.imagesWH[self.current]) {
                self.imagesWH[self.current] = {};
                self.imagesWH[self.current].w = $that.width();
                self.imagesWH[self.current].h = $that.height();
            }
        },

        _touchstart: function (e) {
            var self = this;

            if (e.target.nodeName !== 'IMG') {
                return;
            }

            e.preventDefault();

            self.setImagesInfo(e); // 存取图片信息

            var touchTarget = e.targetTouches.length; //获得触控点数

            self._changeData(e); //重新初始化图片、可视区域数据，由于放大会产生新的计算


            if (touchTarget == 1) {

                self.finger = false;

                // 获取开始坐标
                self.basePageX = self.getPage(e, "pageX");
                self.basePageY = self.getPage(e, "pageY");

            } else {

                if (self.isScale) {

                    self.finger = true;

                    self.startFingerDist = self.getTouchDist(e).dist;
                    self.startFingerX = self.getTouchDist(e).x;
                    self.startFingerY = self.getTouchDist(e).y;

                }

            }
        },

        _touchmove: function (e) {
            var self = this;

            if (e.target.nodeName !== 'IMG') {
                return;
            }

            e.preventDefault();
            e.stopPropagation();

            if (self.isScale) {

                var touchTarget = e.targetTouches.length; //获得触控点数

                if (touchTarget == 1 && !self.finger) {
                    self.finger = false;
                    self._move(e);
                }

                if (touchTarget >= 2) {
                    self.finger = true;
                    self._zoom(e);
                }

            } else {

                self.finger = false;
                self._move(e);

            }
        },

        _touchend: function (e) {
            var self = this;

            if (e.target.nodeName !== 'IMG') {
                return;
            }

            if (self.finger) {

                self.resetZoom(e);

            } else {

                self.resetMove(e);

            }

        },

        _move: function (e) {
            var self = this;

            var imgBaseWidth = self.imagesWH[self.current].w,
			imgBaseHeight = self.imagesWH[self.current].h;

            var pageX = self.getPage(e, "pageX"), //获取移动坐标
			pageY = self.getPage(e, "pageY");

            // 禁止默认事件
            e.preventDefault();
            e.stopPropagation();

            // 获得移动距离
            self.distX = (pageX - self.basePageX) + self.newX;
            self.distY = (pageY - self.basePageY) + self.newY;

            var currentImgWidth = self.getTarget(e).width(),
			endX = currentImgWidth - imgBaseWidth;

            if (self.distX >= 0) {

                self.moveX = Math.round(self.distX / self.buffMove);

            } else {

                if (currentImgWidth == imgBaseWidth) {

                    self.moveX = Math.round(self.distX / self.buffMove);

                } else {

                    if (self.distX <= -endX) {

                        self.moveX = Math.round((self.distX + endX) / self.buffMove - endX);

                    } else {

                        self.moveX = self.distX;

                    }

                }

            }

            self.moveY = 0;

            self.refresh({
                'e': e,
                'x': self.moveX,
                'y': self.moveY,
                'timer': '0s',
                'type': 'ease'
            });
        },

        _zoom: function (e) {
            var self = this;

            var currentWidth = "";

            var imgBaseWidth = self.imagesWH[self.current].w,
			imgBaseHeight = self.imagesWH[self.current].h;

            e.preventDefault();
            e.stopPropagation();

            var nowFingerDist = self.getTouchDist(e).dist, //获得当前长度
			ratio = nowFingerDist / self.startFingerDist, //计算缩放比
			imgWidth = Math.round(self.mapX * ratio), //计算图片宽度
			imgHeight = Math.round(self.mapY * ratio); //计算图片高度

            var $target = self.getTarget(e);

            if (imgWidth <= imgBaseWidth * self.buffScale) {

                if (imgWidth >= imgBaseWidth && imgHeight <= self.bodyHeight) {

                    self.imgNewX = Math.round(self.startFingerX * ratio - self.startFingerX + (-self.newX) * ratio);
                    self.imgNewY = 0;
                    currentWidth = imgWidth;

                } else if (imgHeight > imgBaseHeight) {

                    // // 计算图片新的坐标
                    // self.imgNewX = Math.round(self.startFingerX * ratio - self.startFingerX + (-self.newX) * ratio);
                    // self.imgNewY = Math.round((self.startFingerY * ratio - self.startFingerY)/2 + (-self.newY) * ratio);

                    self.imgNewX = Math.round(self.startFingerX * ratio - self.startFingerX + (-self.newX) * ratio);
                    self.imgNewY = Math.round((imgHeight - self.bodyHeight) / 2);
                    currentWidth = imgWidth;

                } else if (imgWidth < imgBaseWidth) {

                    self.imgNewX = Math.round(self.startFingerX * ratio - self.startFingerX + (-self.newX) * ratio);
                    self.imgNewY = Math.round((imgHeight - self.bodyHeight) / 2);

                    currentWidth = imgBaseWidth;

                }

                $target.css({
                    'width': currentWidth + 'px',
                    'max-width': 'none',
                    'max-height': 'none'
                });

                self.refresh({
                    'e': e,
                    'x': -self.imgNewX,
                    'y': -self.imgNewY,
                    'timer': 0,
                    'type': 'ease'
                });

            }

        },

        resetMove: function (e) {
            var self = this;

            var imgBaseWidth = self.imagesWH[self.current].w,
			imgBaseHeight = self.imagesWH[self.current].h;

            var currentImgWidth = self.getTarget(e).width(),
			endX = currentImgWidth - imgBaseWidth;

            if (!self.distX) {
                self.distX = 0;
            }

            if (self.current == 0) {

                if (self.distX >= 0) {

                    moveDist(0);

                } else {
                    if (self.len == 1) {
                        moveDist(-endX);
                    } else {
                        if (self.distX <= -(self.minDist + endX)) {
                            moveNext();
                        } else if (self.distX <= -endX && self.distX > -(self.minDist + endX)) {
                            moveDist(-endX);
                        } else {
                            moveDist(self.distX);
                        }
                    }
                }

            } else if (self.current == (self.len - 1)) {

                if (self.distX >= 0) {

                    if (self.distX < self.minDist) {
                        moveDist(0);
                    } else {
                        movePrev();
                    }

                } else {

                    if (self.distX <= -endX) {
                        moveDist(-endX);
                    } else {
                        moveDist(self.distX);
                    }
                }

            } else {

                if (self.distX >= 0) {

                    if (self.distX < self.minDist) {
                        moveDist(0);
                    } else {
                        movePrev();
                    }

                } else {

                    if (self.distX <= -(self.minDist + endX)) {
                        moveNext();
                    } else if (self.distX <= -endX && self.distX > -(self.minDist + endX)) {
                        moveDist(-endX);
                    } else {
                        moveDist(self.distX);
                    }

                }

            }

            self.newY = 0;


            function moveDist(distX) {

                self.newX = distX;

                self.refresh({
                    'e': e,
                    'x': self.newX,
                    'y': 0,
                    'timer': '.5s',
                    'type': 'ease'
                });

            }

            function movePrev() {

                self.reset();

                self.current--;

                self.moveSlide({
                    'timer': '.5s'
                });

                self.resetImage({
                    'e': e,
                    'z': self.current + 1
                });

                self.setTitle();
            }

            function moveNext() {

                self.reset();

                self.current++;

                self.moveSlide({
                    'timer': '.5s'
                });

                self.resetImage({
                    'e': e,
                    'z': self.current - 1
                });

                self.setTitle();
            }
        },

        resetZoom: function (e) {
            var self = this;

            var imgBaseWidth = self.imagesWH[self.current].w,
			imgBaseHeight = self.imagesWH[self.current].h;

            var currentImgWidth = self.getTarget(e).width(),
			endX = currentImgWidth - imgBaseWidth;

            self.distX = -self.imgNewX;
            self.distY = -self.imgNewY;

            if (self.distX > 0) {

                self.newX = 0;

            } else {

                // self.distX 小于0

                if ((self.distX + endX) < 0) {

                    self.newX = self.bodyWidth - currentImgWidth; // 是个负值

                } else {

                    self.newX = self.distX;

                }
            }

            self.newY = 0;

            self.refresh({
                'e': e,
                'x': self.newX,
                'y': self.newY,
                'timer': '.5s',
                'type': 'ease'
            });

        },

        reset: function () {
            var self = this;

            self.newX = 0;
            self.newY = 0;
            self.distX = 0;
            self.distY = 0;
        },

        /*
        * @params
        *     el: 执行移动的元素
        *     timer: 时间
        *     type: 动画滚动类型
        *     x: 横向移动距离 
        *     y: 纵向移动距离
        */
        refresh: function (params) {
            var self = this;

            var $target = self.getTarget(params.e);

            $target.css({
                '-webkit-transition': '-webkit-transform ' + params.timer + ' ' + params.type,
                '-webkit-transform': self.getTranslate(params.x, params.y)
            });
        },

        /*
        * 插入图片和文本
        * none parmas
        */
        appendImage: function () {
            var self = this;
            var $that = self.$wrap.find("li").eq(self.current),
                content = $that.html();

            if (!content) {
                $that.html('<div class="this_loading"></div>');
            }

            var image = new Image();

            image.onload = function () {

                var str = "";

                if (self.detail && self.isDetail) {

                    str = '<img src="' + self.imgs[self.current] + '" />' +
				          '<div class="this_text">' + self.detail[self.current] + '</div>';

                } else {

                    str = '<img src="' + self.imgs[self.current] + '" />';

                }

                if (!content || (content.search(/img/) == -1)) {
                    $that.html(str);
                }

            };

            image.src = self.imgs[self.current];
        },

        /*
        * 移动幻灯片
        * @params
        *     timer: 时间
        */
        moveSlide: function (params) {
            var self = this;

            self.$that.css({
                '-webkit-transition': '-webkit-transform ' + params.timer + ' ease',
                '-webkit-transform': self.getTranslate(-self.current * self.bodyWidth, 0)
            });
        },

        /*
        * 重置图片样式
        * @params:
        *     e:
        *     z: 
        */
        resetImage: function (params) {
            var self = this;

            self.$that.on('webkitTransitionEnd', function (e) {
                // $('.appue_scale li').eq(params.z).find('img').attr('style', '');

                $('.appue_scale li img').attr('style', '');

                self.appendImage();
            });
        },

        setTitle: function () {
            var self = this;
            var num = parseInt(self.current, 0);
            var current = num + 1;
            self.setDetail(num);
            $(".appue_scale .this_title").html(current + "/" + self.len);
        },

        setDetail: function (index) {
            var self = this;

            if (!self.isDetail && self.detail && self.detail.length && self.detail[index]) {
                var str = '';
                // if(!!self.detail[0] && (self.detail[0].tagtext === null || self.detail[0].tagtext === undefined)){
                //     index = 0;
                // }
                var detail = self.detail[index];
                Object.keys(detail).forEach(k => {
                    if (typeof detail[k] === 'string') {
                        detail[k] = detail[k].replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    }
                });

                if (self.detail[index].tagtext) {
                    str += '<address>' + self.detail[index].tagtext + '</address>';
                }
                if (self.detail[index].from) {
                    str += '<address>' + self.detail[index].from + '</address>';
                }
                if (self.detail[index].text) {
                    str += '<div id="textScroll"><p>' + self.detail[index].text + '</p></div>';
                }
                if (self.detail[index].time) {
                    str += '<article>' + self.detail[index].time + '</article>';
                }

                if(!!self.detail[index].provider && !!self.detail[index].linkBackUrl){
                    str += ('<a id="c_image_source" onclick="window.open(\'' + self.detail[index].linkBackUrl + '\')"><address>图片来源： ' + self.detail[index].provider  + '</address> </a>');
                }

                $(".appue_scale .this_intro").html(str);
            }
        },

        // 获取多点触控
        getTouchDist: function (e) {
            var x1 = 0,
            y1 = 0,
            x2 = 0,
            y2 = 0,
            x3 = 0,
            y3 = 0,
            result = {};

            x1 = e.touches[0].pageX;
            x2 = e.touches[1].pageX;
            y1 = e.touches[0].pageY - document.body.scrollTop;
            y2 = e.touches[1].pageY - document.body.scrollTop;

            if (!x1 || !x2) return;

            if (x1 <= x2) {
                x3 = (x2 - x1) / 2 + x1;
            } else {
                x3 = (x1 - x2) / 2 + x2;
            }
            if (y1 <= y2) {
                y3 = (y2 - y1) / 2 + y1;
            } else {
                y3 = (y1 - y2) / 2 + y2;
            }

            result = {
                dist: Math.round(Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))),
                x: Math.round(x3),
                y: Math.round(y3)
            };

            return result;
        },

        getTarget: function (e) {
            var $target = "";

            if (e.target.nodeName == 'IMG') {

                $target = $(e.target);

            } else {

                $target = $(e.target).find("img");
            }

            return $target;
        },

        eventStop: function (e) {
            e.preventDefault();
            e.stopPropagation();
        },

        getTranslate: function (x, y) {
            var distX = x, distY = y;
            return support.transform3d ? "translate3d(" + distX + "px, " + distY + "px, 0)" : "translate(" + distX + "px, " + distY + "px)";
        },

        getPage: function (event, page) {
            return support.touch ? event.changedTouches[0][page] : event[page];
        }
    };

    return ImagesZoom;
});
define('gsUserPhotoModel',[
    'cModel', 
    'cCoreInherit',
    'gsShowTime'
], function(
    abstractModel, 
    cCoreInherit,
    showtime
) {
    var PhotoModel = PhotoModel || {};
    PhotoModel.GetMyPhotoNextPage = new cCoreInherit.Class(abstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10318/json/GetUserAlbum";
            this.param = {
                "PageInfo":{
                    "PageSize": 10,
                    "PageIndex": 1
                },
                "UserId": Lizard.P("userId") || "",
                "Width": 200,
                "Height": 200
            };
            this.dataformat = this.parse;
        },

        initialize: function ($super, options) {
            $super(options);
        },

        parse: function (datas) {
            _.each(datas.Result,function(v,k){
                v.FirstUploadTime = showtime.getDateTime({
                    "times": v.FirstUploadTime,
                    "sign": ".",
                    "type": false
                });
                v.LastUploadTime = showtime.getDateTime({
                    "times": v.LastUploadTime,
                    "sign": ".",
                    "type": false
                });
            });
            return datas;
        }

    });

    PhotoModel.GetPoiPhotoNextPage = new cCoreInherit.Class(abstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10318/json/GetUserPoiAlbumList";
            this.param = {
                "PageInfo":{
                    "PageSize": 10,
                    "PageIndex": 1
                },
                "UserId": Lizard.P("userId") || "",
                "DistrictId": Lizard.P("districtId"),
                "ImageSize": ["C_200_200","C_640_10000"],
                "TakeNum": 8
            };
            this.dataformat = this.parse;
        },

        initialize: function ($super, options) {
            $super(options);
        },

        parse: function (datas) {
            _.each(datas.Result,function(v,k){
                if(v.BizType == 11){
                    v.BizTypeClass = "icon_poi_type_attraction";
                }else if(v.BizType == 12){
                    v.BizTypeClass = "icon_poi_type_gourmet";
                }else if(v.BizType == 13){
                    v.BizTypeClass = "icon_poi_type_shop";
                }else if(v.BizType == 18){
                    v.BizTypeClass = "icon_poi_type_entertainment";
                }
                _.each(v.ImageList,function(vm,km){
                    vm.UploadTime = commonUtil.getDateTime({
                        "times": vm.UploadTime,
                        "sign": "-",
                        "type": false
                    });
                    if(vm.PublishStatus == 3){
                        vm.PublishStatusText = "审核中";
                    }
                });
            });
            return datas;
        }
    });

    PhotoModel.GetPoiListPhotoNextPage = new cCoreInherit.Class(abstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10318/json/GetUserPoiAlbumDetail";
            this.param = {
                "PageInfo":{
                    "PageSize": 20,
                    "PageIndex": 1
                },
                "UserId": Lizard.P("userId") || "",
                "PoiId": Lizard.P("poiId") || "0",
                "BizId": Lizard.P("businessId"),
                "BizType": Lizard.P("businessType"),
                "ImageSize": ["C_300_225","C_640_10000"]
            };
            this.dataformat = this.parse;
        },

        initialize: function ($super, options) {
            $super(options);
        },

        parse: function (datas) {
            _.each(datas.Result.ImageList,function(v,k){
                v.UploadTime = commonUtil.getDateTime({
                    "times": v.UploadTime,
                    "sign": "-",
                    "type": false
                });
                if(v.PublishStatus == 3){
                    v.PublishStatusText = "审核中";
                }
            });
            return datas;
        }

    });

    PhotoModel.DetelMyPhotoImg = new cCoreInherit.Class(abstractModel, {
        __propertys__: function () {
            this.url = "/soa2/10318/json/DelUserImage";
            this.param = {
                "ImageId":""
            };
        },

        initialize: function ($super, options) {
            $super(options);
        }
    });
    
    return PhotoModel;
});
define('gsUserShowImages',[
    'libs',
    'cPageView',
    'UIToast',
    'gsUserPhotoModel',
    'gsRouterRedirect'
], function (
    libs,
    cPageView,
    toast,
    gsUserPhotoModel,
    RouterRedirect
) {
    var document = window.document,
	support = {
	    transform3d: ("WebKitCSSMatrix" in window && "m11" in new WebKitCSSMatrix()),
	    touch: ("ontouchstart" in window)
	};

    var ImagesZoom = {

        finger: false,
        toasts: new toast(),
        /*
        * @params
        *     imgsUrl: 图片地址（数组）
        *     detail: 文本信息
	    *     isDetail: 是否针对单张图片描述
        *     currentImg: 当前第几张图
        *     maxScale: 最大缩放值
        */
        init: function (params) {
            var self = this;

            self.setConfig(params);

            self.len = self.imgs.length;

            self.$wrap = $(".appue_scale");
            self.$that = $(".appue_scale .this_img");
            self.$delmask = $(".js_del_mask");
            self.$delbox = $(".js_del_box");

            self.bodyWidth = $("body").width();
            self.bodyHeight = $("body").height();

            self.imagesWH = new Array(self.len); // 存取图片高宽

            self.newX = 0;
            self.newY = 0;

            self.initImg();

            self.addEvent();

            self.imageMsgHidden();

            self.setTitle();
            self.setDetail(self.current);
            self.showDelTip();
            self.cancelDel();
            self.deteleImg();
            self.toClose();
        },

        setConfig: function (params) {
            var self = this;

            var i,
			options = {
			    imgsUrl: "",
			    detail: "",
                isDetail: false,
			    buffMove: 3,
			    currentImg: 0,
			    minDist: 120,
                titles: "我的相册"
			};

            for (i in params) options[i] = params[i];

            self.imgs      = options.imgsUrl; //----------图片地址 数组
            self.detail    = options.detail; //-----------文字描述
            self.isDetail  = options.isDetail; //---------文字描述是否针对单张图片
            self.current   = options.currentImg; //-------当前是第几张图
            self.buffMove  = options.buffMove; //---------缓冲系数
            self.minDist   = options.minDist; //----------最大移动距离，超过该距离将翻页
            self.titles   = options.titles; //----------图片标题
        },

        initImg: function () {
            var self = this;

            var str = "";

            for (var i = 0; i < self.len; i++) {
                str = str + '<li style="width:' + self.bodyWidth + 'px;height:' + self.bodyHeight + 'px;"></li>';
            }

            self.$that.append(str);

            self.$wrap.css({
                "display": "block"
            });

            self.appendImage();

            self.moveSlide({
                'timer': '0'
            });
        },

        /*
        * 事件绑定
        * touchstart、touchmove、touchend
        */
        addEvent: function () {
            var self = this;

            var that = document.querySelectorAll(".appue_scale li");

            for (var i = 0, len = that.length; i < len; i++) {

                that[i].addEventListener("touchstart", function (e) {
                    self._touchstart(e);
                }, false);

                that[i].addEventListener("touchmove", function (e) {
                    self._touchmove(e);
                }, false);

                that[i].addEventListener("touchend", function (e) {
                    self._touchend(e);
                }, false);

            }
        },

        /*
        * 获取图片的初始高、宽
        */
        setImagesInfo: function (e) {
            var self = this;

            var $that = self.getTarget(e);

            if (!self.imagesWH[self.current]) {
                self.imagesWH[self.current] = {};
                self.imagesWH[self.current].w = $that.width();
                self.imagesWH[self.current].h = $that.height();
            }
        },

        _touchstart: function (e) {
            var self = this;

            // if (e.target.nodeName !== 'IMG') {
            //     return;
            // }

            e.preventDefault();

            self.setImagesInfo(e); // 存取图片信息

            var touchTarget = e.targetTouches.length; //获得触控点数


            if (touchTarget == 1) {

                self.finger = false;

                // 获取开始坐标
                self.basePageX = self.getPage(e, "pageX");
                self.basePageY = self.getPage(e, "pageY");

            }
        },

        _touchmove: function (e) {
            var self = this;

            // if (e.target.nodeName !== 'IMG') {
            //     return;
            // }

            e.preventDefault();
            e.stopPropagation();

            self.finger = false;
            self._move(e);
        },

        _touchend: function (e) {
            var self = this;

            // if (e.target.nodeName !== 'IMG') {
            //     return;
            // }

            if (self.finger) {

                

            } else {

                self.resetMove(e);

            }

        },

        _move: function (e) {
            var self = this;

            var imgBaseWidth = self.imagesWH[self.current].w,
			imgBaseHeight = self.imagesWH[self.current].h;

            var pageX = self.getPage(e, "pageX"), //获取移动坐标
			pageY = self.getPage(e, "pageY");

            // 禁止默认事件
            e.preventDefault();
            e.stopPropagation();

            // 获得移动距离
            self.distX = (pageX - self.basePageX) + self.newX;
            self.distY = (pageY - self.basePageY) + self.newY;

            var currentImgWidth = self.getTarget(e).width(),
			endX = currentImgWidth - imgBaseWidth;

            if (self.distX >= 0) {

                self.moveX = Math.round(self.distX / self.buffMove);

            } else {

                if (currentImgWidth == imgBaseWidth) {

                    self.moveX = Math.round(self.distX / self.buffMove);

                } else {

                    if (self.distX <= -endX) {

                        self.moveX = Math.round((self.distX + endX) / self.buffMove - endX);

                    } else {

                        self.moveX = self.distX;

                    }

                }

            }

            self.moveY = 0;

            self.refresh({
                'e': e,
                'x': self.moveX,
                'y': self.moveY,
                'timer': '0s',
                'type': 'ease'
            });
        },

        resetMove: function (e) {
            var self = this;

            var imgBaseWidth = self.imagesWH[self.current].w,
			imgBaseHeight = self.imagesWH[self.current].h;

            var currentImgWidth = self.getTarget(e).width(),
			endX = currentImgWidth - imgBaseWidth;

            if (!self.distX) {
                self.distX = 0;
            }

            if (self.current == 0) {

                if (self.distX > 0) {
                    self.toastsfn("第一张了！",0.5);
                    moveDist(0);

                } else {
                    if (self.len == 1) {
                        self.toastsfn("最后一张了！",0.5);
                        moveDist(-endX);
                    } else {
                        if (self.distX <= -(self.minDist + endX)) {
                            moveNext();
                        } else if (self.distX <= -endX && self.distX > -(self.minDist + endX)) {
                            moveDist(-endX);
                        } else {
                            moveDist(self.distX);
                        }
                    }
                }

            } else if (self.current == (self.len - 1)) {

                if (self.distX >= 0) {

                    if (self.distX < self.minDist) {
                        moveDist(0);
                    } else {
                        movePrev();
                    }

                } else {

                    if (self.distX < -endX) {
                        self.toastsfn("最后一张了！",0.5);
                        moveDist(-endX);
                    } else {
                        moveDist(self.distX);
                    }
                }

            } else {

                if (self.distX >= 0) {

                    if (self.distX < self.minDist) {
                        moveDist(0);
                    } else {
                        movePrev();
                    }

                } else {

                    if (self.distX <= -(self.minDist + endX)) {
                        moveNext();
                    } else if (self.distX <= -endX && self.distX > -(self.minDist + endX)) {
                        moveDist(-endX);
                    } else {
                        moveDist(self.distX);
                    }

                }

            }

            self.newY = 0;


            function moveDist(distX) {

                self.newX = distX;

                self.refresh({
                    'e': e,
                    'x': self.newX,
                    'y': 0,
                    'timer': '.5s',
                    'type': 'ease'
                });

            }

            function movePrev() {

                self.reset();

                self.current--;

                self.moveSlide({
                    'timer': '.5s'
                });

                self.resetImage({
                    'e': e,
                    'z': self.current + 1
                });

                self.setTitle();
                self.setDetail(self.current);
            }

            function moveNext() {

                self.reset();

                self.current++;

                self.moveSlide({
                    'timer': '.5s'
                });

                self.resetImage({
                    'e': e,
                    'z': self.current - 1
                });

                self.setTitle();
                self.setDetail(self.current);
            }
        },

        reset: function () {
            var self = this;

            self.newX = 0;
            self.newY = 0;
            self.distX = 0;
            self.distY = 0;
        },

        /*
        * @params
        *     el: 执行移动的元素
        *     timer: 时间
        *     type: 动画滚动类型
        *     x: 横向移动距离 
        *     y: 纵向移动距离
        */
        refresh: function (params) {
            var self = this;

            var $target = self.getTarget(params.e);

            $target.css({
                '-webkit-transition': '-webkit-transform ' + params.timer + ' ' + params.type,
                '-webkit-transform': self.getTranslate(params.x, params.y)
            });
        },

        /*
        * 插入图片和文本
        * none parmas
        */
        appendImage: function () {
            var self = this;

            var $that = self.$wrap.find("li").eq(self.current),
                content = $that.html();

            if (!content) {
                $that.html('<div class="this_loading"></div>');
            }

            var image = new Image();

            image.onload = function () {
                var str = "";
                $that = self.$wrap.find("li").eq(self.current);
                content = $that.html();
                str = '<img src="' + self.imgs[self.current] + '" />';
                if(!content || (content.search(/img/) == -1)){
                    $that.html(str);
                }
            };

            image.src = self.imgs[self.current];
        },

        /*
        * 移动幻灯片
        * @params
        *     timer: 时间
        */
        moveSlide: function (params) {
            var self = this;

            self.$that.css({
                '-webkit-transition': '-webkit-transform ' + params.timer + ' ease',
                '-webkit-transform': self.getTranslate(-self.current * self.bodyWidth, 0)
            });
        },

        /*
        * 重置图片样式
        * @params:
        *     e:
        *     z: 
        */
        resetImage: function (params) {
            var self = this;

            self.$that.on('webkitTransitionEnd', function (e) {

                $('.appue_scale li img').attr('style', '');

                self.appendImage();
            });
        },

        setTitle: function () {
            var self = this;

            var current = parseInt(self.current, 0) + 1;

            // $(".appue_scale .this_title").html(current + "/" + self.len);
            $(".appue_scale .this_title").html(self.titles);
        },

        setDetail: function (i) {
            var self = this;

            if (!self.isDetail && self.detail) {
                var str = '<article>' + self.detail[i].time + '</article>' +
                       '<p>由 ' + self.detail[i].nickName + ' 上传</p>'
					   '<p>' + self.detail[i].text + '</p>';

                $(".appue_scale .this_intro").html(str);
            }
        },

        showDelTip: function(){
            var self = this;
            $(".js_del_left").off("click").on("click",function(e){
                self.$delmask.addClass('del_mask_show');
                self.$delbox.addClass('del_box_up');
            });
        },

        hideDelTip: function(){
            this.$delbox.removeClass('del_box_up');
            this.$delmask.removeClass('del_mask_show');
        },

        deteleImg: function(e){
            var self = this,
                $del = $(".js_del");
            $(".js_del").off("click").on("click",function(e){
                var i = self.current;
                localStorage.setItem("isdelete","isdelete");
                self.hideDelTip();
                self.delCallback(self.detail[i].imgid,self.len,i);
                self.arrayRemove(self.imgs,self.current);
                self.arrayRemove(self.detail,self.current);
                if(self.len > 1){
                    --self.len;
                    if(self.current > (self.len - 1)){
                        --self.current;
                        self.appendImage();
                        self.$that.css({
                            '-webkit-transition': '-webkit-transform 0ms ease',
                            '-webkit-transform': self.getTranslate(-self.len * self.bodyWidth + 320,0)
                        });
                        if(self.len == 1){
                            self.appendImage();
                            self.$that.css({
                                '-webkit-transition': '-webkit-transform 0ms ease',
                                '-webkit-transform': self.getTranslate(0,0)
                            });
                        }
                    }
                    var localObj = {"details":self.detail,"imgs":self.imgs,"indexs":self.current,"titleName":self.titles};
                    localStorage.setItem("localobj",JSON.stringify(localObj));
                    self.setDetail(self.current);
                }
            });
        },

        cancelDel: function(){
            var self = this;
            $(".js_cancel,.js_del_mask").off("click").on("click",function(e){
                self.hideDelTip();
            });
        },

        toClose: function (e) {
            var self = this;
            self.$wrap.off("click").on("click", ".js_close", function (e) {
                RouterRedirect.toBack();
            });
        },

        delCallback: function(imgid,len,i){
            var self = this,
                toasts =  new toast(),
                detelMyPhotoImgData = gsUserPhotoModel.DetelMyPhotoImg.getInstance();
            detelMyPhotoImgData.setParam({
                "ImageId": imgid
            });
            detelMyPhotoImgData.excute(function (json) {
                if(json.Result){
                    self.toastsfn("删除照片成功！",1);
                    if(len < 2){
                        RouterRedirect.toBack();
                    }else{
                        var $li = $(".this_img").find("li").eq(i);
                        $li.remove();
                        self.appendImage();
                    }
                }else{
                    self.toastsfn("删除照片失败！",2);
                }
            }, function () {

            });
        },

        toastsfn: function(toastContent,time){
            var self = this;
            Lizard.showToast(toastContent);
            $(".cui-toast").css("z-index","999999999");
        },

        getTarget: function (e) {
            var $target = "";

            if (e.target.nodeName == 'IMG') {

                $target = $(e.target);

            } else {

                $target = $(e.target).find("img");
            }

            return $target;
        },

        // 点击屏幕隐藏大图文字
        imageMsgHidden: function () {
            var self = this,
                $js_ishide = self.$that.siblings(".js_ishide");
            $("body").off("click").on("click", ".js_this_img", function (e) {
                if (!$(e.target).is('img')){
                    if ($js_ishide.hasClass('js_ishide_hide')) {
                        $js_ishide.removeClass('js_ishide_hide');
                    } else {
                        $js_ishide.addClass('js_ishide_hide');
                    } 
                }
            });
        },

        eventStop: function (e) {
            e.preventDefault();
            e.stopPropagation();
        },

        getTranslate: function (x, y) {
            var distX = x, distY = y;
            return support.transform3d ? "translate3d(" + distX + "px, " + distY + "px, 0)" : "translate(" + distX + "px, " + distY + "px)";
        },

        getPage: function (event, page) {
            return support.touch ? event.changedTouches[0][page] : event[page];
        },
        /**
        *删除数组指定下标或指定对象
        */
        arrayRemove: function(arr,num,obj){
            Array.prototype.remove = function(obj){
                for(var i =0;i <this.length;i++){
                    var temp = this[i];
                    if(!isNaN(obj)){
                        temp=i;
                    }
                    if(temp == obj){
                        for(var j = i;j <this.length;j++){
                            this[j]=this[j+1];
                        }
                        this.length = this.length-1;
                    }   
                }
            }
            arr.remove(num);
        }
    };

    return ImagesZoom;
});
define('gsCommonAddSchedule',[
    'UICalendarCommon',

    'gsRouterRedirect',
    'gsCommonModel',
    'cMemberService',
    'gsCommon'
], function (
    Calendar,

    routerRedirect,
    CommonModel,
    member,
    gscommon
) {

    var model = CommonModel.addSchedule.getInstance(),
        addPlaneHotelScheduleModel = CommonModel.addPlaneHotelSchedule.getInstance(),
        addTravelPlanModel = CommonModel.addTravelPlan.getInstance(),
        top = 0;

    var addCalendar = {
        /*
        * 日历调用
        * @params:
        * {
        *     subType: 9:景点 11:购物 10:娱乐 12:餐馆
        *     poiId: 目的地ID
        *     businessId: 详情页的ID
        *     bussinessName: 餐馆或者景点的名称
        * }
        */
        init: function(params) {
            var self = this;
            if (member.isLogin()) {
                self._showCalendar();

                self._setDeploy();

                self._addEvent(params);

                self.params = params;

                self._nodate();
            } else {
                member.memberLogin({
                    param: 'from=' + window.encodeURIComponent(window.location.href) + '&backurl=' + window.encodeURIComponent(window.location.href),
                    callback: function () {
                        if (member.isLogin()) {
                            self._showCalendar();

                            self._setDeploy();

                            self._addEvent(params);

                            self.params = params;

                            self._nodate();
                        }
                    }
                });
            }



        },

        formatTime: function(fmt,times){
            var timess = new Date(times);
            var o = {
                "M+" : timess.getMonth() + 1, //月份
                "d+" : timess.getDate(), //日
                "h+" : timess.getHours(), //小时
                "m+" : timess.getMinutes(), //分
                "s+" : timess.getSeconds(), //秒
                "q+" : Math.floor((timess.getMonth() + 3) / 3), //季度
                "S" : timess.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt)){
                fmt = fmt.replace(RegExp.$1, (timess.getFullYear() + "").substr(4 - RegExp.$1.length));
            }
            for (var k in o){
                if (new RegExp("(" + k + ")").test(fmt)){
                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
                }
            }
            return fmt;
        },

        _setDeploy: function() {
            var self = this;

            $(".js_poi_detailScroll").addClass("poi_detailScroll");
            $('.js_schedule').show();

            $(".js_schedule").animate({
                  opacity: 1
            }, 300, 'ease-in');

            setTimeout(function(){
                $('.js_schedule .this_wrapper').addClass('this_show');
            }, 5);

            top = $("body").scrollTop();
        },

        _addEvent: function(params) {
            var self = this;

            var $cancel = $('.js_schedule_cancel'),
                $submit = $('.js_schedule_submit'),
                $goto = $('.js_schedule_goto');

            $cancel.off().on('click', function () {
                self._hideCalendar();
            });

            $submit.off().on('click', function() {
                if (!self.calendar.selectDate) {
                    self._showMsg('请选择日期！');

                    // addTravelPlanModel.setParam({
                    //     Guid: new self.getGUID().newGUID(),
                    //     PoiId: self.params.poiId,
                    //     TravelPlanId: 0,
                    //     playDate: null
                    // });
                    // addTravelPlanModel.excute(function (data) {
                    //     if (data && data.ResponseStatus && data.ResponseStatus.Ack == 'Success') {

                    //         self._ShowTip73('标题为' + self.params.bussinessName);
                    //     } else {
                    //         Lizard.showToast("加入旅行计划失败");
                    //     }
                    //     self._hideCalendar();
                    // });




                    //self._hideCalendar();
                    return;
                } else {
                    self._updateData(params);
                }


            });

            //7.3跳转旅行计划列表页
            $('.js_schedule').undelegate().delegate(".js_schedule_goto", 'click', function (e) {
                routerRedirect.toJump({
                    url: [Lizard.H5BaseUrl + "/webapp/you/journeys/travelplan/list.html?from=" + window.location.href, "destination/journey/index.html#travelplan/list.html"],
                    targetModel: 4
                });
            });
        },

        _showCalendar: function() {
            var self = this;

            self.calendar = new Calendar({
                datamodel: {
                    // startTime: new Date(), //----------开始可选日期
                    endTime: null, //---------------------new Date(2015, 3, 20),//结束日期
                    displayMonthNum: 13 //-----------------共显示多少个月
                },
                wrapper: $('.js_schedule_calendar'), //----------历包裹层
                onItemClick: function (date, el, e) { //--点击日历项触发的事件

                    $('.js_calendar_item').removeClass('cui_cld_daycrt');
                    $(el).addClass('cui_cld_daycrt');
                    self.calendar.selectDate = date;

                },
                onShow: function () {
                    //$('.js_schedule_calendar .view').show();
                    $('.cm-calendar-bd').css('height', '307px');
                },
                onHide: function() {}

            });

            self.calendar.show();
        },

        _hideCalendar: function() {
            var self = this;

            document.body.scrollTop = top;

            $(".js_poi_detailScroll").removeClass("poi_detailScroll");

            $('.js_schedule .this_wrapper').removeClass("this_show");

            $(".js_schedule").animate({
                  opacity: 0
            }, 300, 'ease-out');

            setTimeout(function() {
                $(".js_schedule").hide();

                self.calendar.hide();
            }, 300);
        },

        _updateData: function(params) {
            var self = this;

            model.setParam({
                'poiId': params.poiId,
                'itemId': params.businessId,
                'itemName': params.bussinessName,
                'subType': params.subType,
                'type': 9,
                'source': params.source || 2,
                'ddate': self.formatTime('yyyy-MM-dd hh:mm:ss',self.calendar.selectDate)
            });

            model.excute(function (data) {
                if (data.ResponseStatus.Ack == "Success" && data.result == 0) {
                    var Date = self.calendar.selectDate || new Date();

                    if (!!Lizard.P("isfromplanehotel")) {
                        //来自度假则不提示
                    } else {
                        self._ShowTip((Date.getMonth()+1)+'月'+ Date.getDate() + '日', params.poiId);
                    }

                    //添加行程成功改变底部图标及内容
                    $('.menu-inApp .js_add_travel_plan_shop').addClass('added').find('a').text('已加入行程');

                    var _name = '';
                    if(params.subType==9){
                        _name = 'poi';
                    }else if(params.subType==11){
                        _name = 'shopping';
                    }else if(params.subType==12){
                        _name = 'food';
                    }

                    gscommon.cTrackLog(100844, {
                        actioncode: '0_schedule_add_sucess',
                        actiontype: 'click',
                        value: _name
                    });
                    //美食 加入行程 动态修改
                    $('.menu-bottom-new .add-date .bar-icon').removeClass('icon-add-date').removeClass('icon-add-dateing').addClass('icon-add-dateing')
                    $('.menu-bottom-new .add-date .bar-text').text('已加入行程');
                } else {
                    if (!!Lizard.P("isfromplanehotel")) {
                        //来自度假则不提示
                    } else {
                        self._showMsg('添加行程失败！');
                    }
                }

                self._hideCalendar();
            });

            if(!!Lizard.P("isfromplanehotel") && !!Lizard.P("sid")){
                var typeMap = {
                    9: 'SIGHT',
                    10: '',
                    11: 'SHOP',
                    12: 'RESTAURANT'
                }
                addPlaneHotelScheduleModel.setParam({
                    ChannelCode: 0, //固定0表示app
                    PlatfromId: 1, //固定1表示携程渠道
                    BuType: 'gs', //攻略传 gs
                    Version: "71400", //版本号
                    Method: "add",
                    ShoppingId: Lizard.P("sid") , //url上带的sid
                    QueryDatas: [{
                        ResourceType: 'travelPlan', //行程计划固定为此值
                        Resource: JSON.stringify({ //注意这里要用JSON字符串
                            from: 'gs', //攻略传 gs ，这个是为了和以前来自我们自己的历史数据区分
                            startDate: self.formatTime('yyyy-MM-dd',self.calendar.selectDate), //选中的日期 “2018-01-01”
                            travelPlan: {
                                poiId:  params.poiId,
                                poiType:  typeMap[params.subType], //SIGHT、SHOP (景点、购物)
                                name: params.bussinessName,
                                businessId: params.businessId,
                                cityId: params.cityId,
                                cityName: params.cityName,
                                countryName: '', //非必传
                                openTime: '', //开放时间 如果没有可不传
                                imageUrl: "", //头图  如果没有可不传
                                GGCoord: { //谷歌地图 ，非必传，有的话要传
                                   Lat: '',
                                   Lon: ''
                                },
                                GDCoord: { //高德地图，结构同上
                                   Lat: '',
                                   Lon: ''
                                },
                                BDCoord: { //百度地图，结构同上
                                   Lat: '',
                                   Lon: ''
                                }
                            }
                        })
                    }]
                });
                addPlaneHotelScheduleModel.excute(function (data) {
                    if (data.ResponseStatus.Ack == "Success") {
                        self._showMsg('添加行程成功！');
                    } else {
                        self._showMsg('添加行程失败！');
                    }
                });
            }

            //var d = new Date(self.calendar.selectDate);
            //var cd = d.getFullYear() + '-' + (parseInt(d.getMonth()) + 1) + '-' + d.getDate();
            //addTravelPlanModel.setParam({
            //    Guid: new self.getGUID().newGUID(),
            //    PoiId: self.params.poiId,
            //    TravelPlanId: 0,
            //    playDate: cd
            //});
            //addTravelPlanModel.excute(function (data) {
            //    if (data && data.ResponseStatus && data.ResponseStatus.Ack == 'Success') {

            //        self._ShowTip('可在APP首页底部行程查看');
            //    } else {
            //        Lizard.showToast("加入旅行计划失败");
            //    }
            //    self._hideCalendar();
            //});

        },

        _showMsg: function(text) {

            Lizard.showToast({
                datamodel: {
                    content: text
                },
                needMask: false
            });
        },

        _ShowTip: function(dateTime,poiid) {
            var self = this;
            // $('.js_schedule_success').children().addClass('rlink_msg');
            // $('.js_schedule_success .js_schedule_time').text(dateTime);
            // $('.js_schedule_success').children().children().find('dt').html('已添加到行程');
            // $('.js_schedule_goto').hide();
            // $('.js_schedule_success').show();

            // setTimeout(function(){
            //     $('.js_schedule_success .this_msg').addClass("this_show");
            // }, 5);

            // setTimeout(function(){
            //     $('.js_schedule_success .this_msg').removeClass("this_show");
            // }, 2000);
            console.log($('.js_schedule_success'))
            if($('.js_add_schedule_success_toast').length==0){
                $('.js_schedule_success').after('<div class="journey_toast js_add_schedule_success_toast" style="display:none"><div class="journey_inner"><div class="tips_text"><p>已添加到行程</p><span class="js_schedule_time"></span></div><p class="find_arrow js_go_to_schedule" id="c_ticket_add_check">去查看</p></div></div>');
            }


            var toast = $('.js_add_schedule_success_toast');
            toast.show();
            toast.find('.js_schedule_time').html(dateTime);

            toast.undelegate().delegate(".js_go_to_schedule", 'click', function (e) {
                if (Lizard.isInCtripApp || Lizard.isHybrid) {
                    routerRedirect.toJump({
                        url: ["ctrip://wireless/schedule?c3=100&c4="+poiid, "ctrip://wireless/schedule?c3=100&c4="+poiid],
                        targetModel: 1
                    });
                }
            });

            setTimeout(function(){
                toast.hide();
                //$('.js_schedule_goto').css('display', 'block');
            }, 2300);

            gscommon.cTrackLog(100663, {
                actioncode: 'poi_plus_schedule_success'
            });

        },

        _ShowTip73: function (dateTime) {
            var self = this;

            //$('.js_schedule_success').children().removeClass('rlink_msg');
            //$('.js_schedule_success .js_schedule_time').text(dateTime);
            //$('.js_schedule_success').children().children().find('dt').html('已添加到旅行计划');
            //$('.js_schedule_goto').remove();
            //$('.js_schedule_success').children().append('<a id="c_schedule" class="js_schedule_goto">去查看</a>');
            //$('.js_schedule_success').show();

            //// setTimeout(function(){
            ////     $('.js_schedule_success .this_msg').addClass("this_show");
            //// }, 5);

            //// setTimeout(function(){
            ////     $('.js_schedule_success .this_msg').removeClass("this_show");
            //// }, 2000);

            //setTimeout(function () {
            //    $('.js_schedule_success').hide();
            //    $('.js_schedule_goto').css('display', 'block');
            //}, 4000);

            $(".js_add_travel_plan_background").addClass("opacity-6").show();
            self.forbidBodyScroll();
            //$(".js_add_travel_plan_suc").data('travelplanid', travelPlanId);
            //$('body').undelegate().delegate(".js_add_travel_plan_suc", 'click', function (e) {
                // var travelPlanId = $(this).data("travelplanid");
            $('.js_add_travel_plan_suc').click(function (e) {
                    e.stopImmediatePropagation();
                    $('.js_add_travel_plan_background').hide();
                    self.allowBodyScroll();
                    $('.js_add_travel_plan_suc').hide();
                    self.gotoTravelPage();
                    $('.js_image_fly').show();
                    window.setTimeout(function () {
                        $('.js_image_fly').hide();
                    }, 2000);
                })

            //});
            $('.cui-white-layer-padding').undelegate().delegate(".js_add_travel_plan_suc_close", 'click', function (e) {
                $('.js_add_travel_plan_background').hide();
                self.allowBodyScroll();
                $('.js_add_travel_plan_suc').hide();
                $('.js_image_fly').show();
                window.setTimeout(function () {
                    $('.js_image_fly').hide();
                }, 2000);
                e.stopImmediatePropagation();
                return false;
            });
            $(".js_add_travel_plan_suc").children().find('.cui-layer-content').find('h2').html('已添加到旅行计划');
            $(".js_add_travel_plan_suc").children().find('.cui-layer-content').find('h4').html('标题为"' + self.params.bussinessName + '"去查看');
            $(".js_add_travel_plan_suc").show();

            gscommon.cTrackLog(100664, {
                actioncode: 'poi_plus_plan_success'
            });

        },

        gotoTravelPage: function (travelPlanId) {

                routerRedirect.toJump({
                    url: [Lizard.H5BaseUrl + "/webapp/you/journeys/travelplan/list.html?from=" + window.location.href, "destination/journey/index.html#travelplan/list.html"],
                    targetModel: 4
                });

        },

        _nodate: function () {
            var self = this;

            $('.js_schedule').undelegate().delegate(".js_schedule_no_date", 'click', function (e) {
                addTravelPlanModel.setParam({
                    Guid: new self.getGUID().newGUID(),
                    PoiId: self.params.poiId,
                    TravelPlanId: 0,
                    playDate: null
                });
                addTravelPlanModel.excute(function (data) {
                    if (data && data.ResponseStatus && data.ResponseStatus.Ack == 'Success') {

                        self._ShowTip73('标题为' + self.params.bussinessName);
                    } else {
                        Lizard.showToast("加入旅行计划失败");
                    }
                    self._hideCalendar();
                });




                self._hideCalendar();
            });
        },

        forbidBodyScroll: function () {
            $(".js_add_travel_plan_background").on('touchmove', function (e) {
                e.stopImmediatePropagation();
                e.preventDefault;
                return false;
            });
        },

        allowBodyScroll: function () {
            $(".js_add_travel_plan_background").off('touchmove');
        },

        getGUID: function GUID() {
            this.date = new Date();

            /* 判断是否初始化过，如果初始化过以下代码，则以下代码将不再执行，实际中只执行一次 */
            if (typeof this.newGUID != 'function') {

                /* 生成GUID码 */
                GUID.prototype.newGUID = function () {
                    this.date = new Date();
                    var guidStr = '';
                    sexadecimalDate = this.hexadecimal(this.getGUIDDate(), 16);
                    sexadecimalTime = this.hexadecimal(this.getGUIDTime(), 16);
                    for (var i = 0; i < 9; i++) {
                        guidStr += Math.floor(Math.random() * 16).toString(16);
                    }
                    guidStr += sexadecimalDate;
                    guidStr += sexadecimalTime;
                    while (guidStr.length < 32) {
                        guidStr += Math.floor(Math.random() * 16).toString(16);
                    }
                    return this.formatGUID(guidStr);
                }

                /*
          * 功能：获取当前日期的GUID格式，即8位数的日期：19700101
          * 返回值：返回GUID日期格式的字条串
          */
                GUID.prototype.getGUIDDate = function () {
                    return this.date.getFullYear() + this.addZero(this.date.getMonth() + 1) + this.addZero(this.date.getDay());
                }

                /*
          * 功能：获取当前时间的GUID格式，即8位数的时间，包括毫秒，毫秒为2位数：12300933
          * 返回值：返回GUID日期格式的字条串
          */
                GUID.prototype.getGUIDTime = function () {
                    return this.addZero(this.date.getHours()) + this.addZero(this.date.getMinutes()) + this.addZero(this.date.getSeconds()) + this.addZero(parseInt(this.date.getMilliseconds() / 10));
                }

                /*
           * 功能: 为一位数的正整数前面添加0，如果是可以转成非NaN数字的字符串也可以实现
          * 参数: 参数表示准备再前面添加0的数字或可以转换成数字的字符串
          * 返回值: 如果符合条件，返回添加0后的字条串类型，否则返回自身的字符串
          */
                GUID.prototype.addZero = function (num) {
                    if (Number(num).toString() != 'NaN' && num >= 0 && num < 10) {
                        return '0' + Math.floor(num);
                    } else {
                        return num.toString();
                    }
                }

                /*
          * 功能：将y进制的数值，转换为x进制的数值
          * 参数：第1个参数表示欲转换的数值；第2个参数表示欲转换的进制；第3个参数可选，表示当前的进制数，如不写则为10
          * 返回值：返回转换后的字符串
          */
                GUID.prototype.hexadecimal = function (num, x, y) {
                    if (y != undefined) {
                        return parseInt(num.toString(), y).toString(x);
                    } else {
                        return parseInt(num.toString()).toString(x);
                    }
                }

                /*
          * 功能：格式化32位的字符串为GUID模式的字符串
          * 参数：第1个参数表示32位的字符串
          * 返回值：标准GUID格式的字符串
          */
                GUID.prototype.formatGUID = function (guidStr) {
                    var str1 = guidStr.slice(0, 8) + '-',
                        str2 = guidStr.slice(8, 12) + '-',
                        str3 = guidStr.slice(12, 16) + '-',
                        str4 = guidStr.slice(16, 20) + '-',
                        str5 = guidStr.slice(20);
                    return str1 + str2 + str3 + str4 + str5;
                }
            }
        }
    };

    return addCalendar;
});

define('gsCommonAddTravelPlan',[
    'cHybridShell',
    'gsAppAgent',
    'gsBusinessJob',
    'gsRouterRedirect',
    'cMemberService',
    'gsCommonModel',
    'gsCommonAddSchedule',
    'gsCommon',
],
function(
    cHybridShell,
    appAgent,
    businessJob,
    routerRedirect,
    member,
    CommonModel,
    commonAddSchedule,
    gscommon
    ){
    var addTravelPlanModel = CommonModel.addTravelPlan.getInstance();
    var getTravelPlanListModel = CommonModel.getTravelPlanList.getInstance();

	var TravelPlan = {
        param: {
        },
        hasTravelPlan : false,
		init: function(param, scrollDom){
		    var self = this;
			self.param = param || {};
			self.scrollDom = scrollDom;
			
			//self.hasTravelPlanOrNot();

			


            //H5调试需要
            /*$(".js_add_travel_plan_background").addClass("opacity-6").show();
            self.forbidBodyScroll();
            $(".js_add_travel_plan_btns").show();*/
            //H5调试需要

            //if (Lizard.isInCtripApp || Lizard.isHybrid) {
                //self.isShowTipPop();
			$('body').delegate(".js_add_travel_plan", 'click', function (e) {
			    commonAddSchedule.init({
			        'subType': self.param.subType,
			        'poiId': self.param.poiId,
			        'businessId': self.param.businessId,
			        'bussinessName': self.param.bussinessName
			    });
                //  commonAddSchedule.calendar.selectDate = new Date(2019,6,1);
                if (Lizard.P('isfromplanehotel') == 'true'){
                    // Lizard.showToast('1');
                    var hotel_time_url = Lizard.P('startDate');
                    var hotel_time = hotel_time_url.split('-');
                    var beginTime = {
                        year : hotel_time[0],
                        month : hotel_time[1],
                        day : hotel_time[2],
                    };
                    var tempTime = (new Date(beginTime.year,beginTime.month,beginTime.day) - commonAddSchedule.calendar.datamodel.startTime);
                    var monthCount = new Date(tempTime).getMonth();
                    var divs = $('.cm-calendar-bd ul').slice(0,monthCount);
                    
                    var height = 0;
                    $(divs).forEach(function(item){
                        height+= $(item).height() + 50;
                    });
                    $('.cm-calendar-bd').scrollTop(height);
                }
			    return;
                   // self.clickEvent();
                    e.stopPropagation();
                });

                $('body').delegate(".js_add_travel_plan_background, .js_add_travel_plan_btns", 'click', function (e) {
                    $(".js_add_travel_plan_btns").hide();
                    $(".js_add_travel_plan_suc").hide();
                    $(".js_add_travel_plan_background").hide();
                    $(".js_add_travel_plan_list").hide();
                    self.allowBodyScroll();
                });

                $('body').delegate(".js_add_travel_plan_list li", 'click', function (e) {
                    $(".js_add_travel_plan_list li").removeClass("current");
                    $(this).addClass("current");
                });

                //只能点击关闭
                $('body').delegate(".js_add_travel_plan_suc_close", 'click', function (e) {
                    $('.js_add_travel_plan_background').hide();
                    self.allowBodyScroll();
                    $('.js_add_travel_plan_suc').hide();
                    //$('.js_image_fly').show();
                    //window.setTimeout(function(){
                    //    $('.js_image_fly').hide();
                    //},2000);
                    e.stopImmediatePropagation();
                    return false;
                });

                $('body').delegate(".js_add_travel_plan_suc", 'click', function (e) {
                    var travelPlanId = $(this).data("travelplanid");
                    $('.js_add_travel_plan_background').hide();
                    self.allowBodyScroll();
                    $('.js_add_travel_plan_suc').hide();
                    self.gotoTravelPage(travelPlanId);
                    $('.js_image_fly').show();
                    window.setTimeout(function(){
                        $('.js_image_fly').hide();
                    },2000);
                });

                $('body').delegate(".js_add_travel_plan_cancle", 'click', function (e) {
                    $(".js_add_travel_plan_list").hide();
                    $(".js_add_travel_plan_background").hide();
                    self.allowBodyScroll();
                });

                $('body').delegate(".js_add_travel_plan_submit", 'click', function (e) {
                    $(".js_add_travel_plan_list").hide();
                    $(".js_add_travel_plan_background").hide();
                    self.allowBodyScroll();
                    var travelPlanId = $(".js_add_travel_plan_list li.current").data('planid'),
                        sightname = $(".js_add_travel_plan_list li.current").html(),
                        hasdate = $(".js_add_travel_plan_list li.current").data('jumptoschedule');

                    //if(travelPlanId == "0"){
                    //    CtripBusiness.app_do_business_job(7, 70008, {'count':0});
                    //}
                    
                    self.addTravelPlan(travelPlanId, sightname, hasdate);
                });

            //}
		},

        clickEvent: function() {
            var self = this;
            if (member.isLogin()) {
                self.getTravelPlanList();
            } else {
                member.memberLogin({
                    param: 'from=' + window.encodeURIComponent(window.location.href) + '&backurl=' + window.encodeURIComponent(window.location.href),
                    callback: function () {
                        if (member.isLogin()) {
                            self.getTravelPlanList();
                        }
                    }
                });
            }
        },

        getTravelPlanList: function() {
            var self = this;
            
            getTravelPlanListModel.setParam({
                Guid: new self.getGUID().newGUID()
            });
            getTravelPlanListModel.excute(function (data) {

                //data = {"ResponseStatus":{"Timestamp":"2016-07-15T16:33:27.6464826+08:00","Ack":"Success","Errors":[],"Build":"","Version":"","Extension":[{"Id":"CLOGGING_TRACE_ID","Value":"2986875324462798524"},{"Id":"auth","Value":"3C074D9637DC2C6E3E3C4EE5110A7321AC0792EF2FC18C666F5E864832A3083C"}]},"Results":[{"TravelPlanId":22733,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg03.c-ctrip.com/images/tg/771/893/597/7a1e3ae94c164239a13fda4542122e27_D_180_120.jpg"},{"TravelPlanId":22385,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg03.c-ctrip.com/images/tg/771/893/597/7a1e3ae94c164239a13fda4542122e27_D_180_120.jpg"},{"TravelPlanId":22373,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg03.c-ctrip.com/images/tg/771/893/597/7a1e3ae94c164239a13fda4542122e27_D_180_120.jpg"},{"TravelPlanId":22362,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg03.c-ctrip.com/images/tg/771/893/597/7a1e3ae94c164239a13fda4542122e27_D_180_120.jpg"},{"TravelPlanId":21752,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg07.c-ctrip.com/images/fd/tg/g3/M03/FA/1B/CggYGlbK9VGAfMLzAABu2huaIrY664_D_180_120.jpg"},{"TravelPlanId":21699,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg07.c-ctrip.com/images/fd/tg/g3/M03/FA/1B/CggYGlbK9VGAfMLzAABu2huaIrY664_D_180_120.jpg"},{"TravelPlanId":21698,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg07.c-ctrip.com/images/fd/tg/g3/M03/FA/1B/CggYGlbK9VGAfMLzAABu2huaIrY664_D_180_120.jpg"},{"TravelPlanId":21697,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg07.c-ctrip.com/images/fd/tg/g3/M03/FA/1B/CggYGlbK9VGAfMLzAABu2huaIrY664_D_180_120.jpg"},{"TravelPlanId":21696,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg07.c-ctrip.com/images/fd/tg/g3/M03/FA/1B/CggYGlbK9VGAfMLzAABu2huaIrY664_D_180_120.jpg"},{"TravelPlanId":21675,"Title":"香港一日游","DayCount":1,"PoiNum":1,"CoverImgUrl":"https://dimg07.c-ctrip.com/images/fd/tg/g3/M03/FA/1B/CggYGlbK9VGAfMLzAABu2huaIrY664_D_180_120.jpg"}]}
                var str = '<li data-index="0" data-planid="0" class="js_new_plan">新建</li>',
                    className = '';
                if (data && data.Results && data.Results.length > 0) {
                    //有旅行计划
                    //console.log(data)
                    for (var i = 0; i < data.Results.length; i++ ) {
                        (0 == i)? className = 'current': className = '';
                        str += '<li class="' + className + '" data-index="' + (i + 1) + '" data-planid="' + data.Results[i].TravelPlanId + '" data-jumptoschedule="' + data.Results[i].JumpToSchedule + '">' + data.Results[i].Title.substring(0, 30) + '</li>';
                    }
                    $('.js_add_travel_plan_list ul').html(str);
                    $(".js_add_travel_plan_background").addClass("opacity-6").show();
                    $(".js_add_travel_plan_list").show();
                    self.forbidBodyScroll();

                } else {
                    //无旅行计划
                    //self.addTravelPlan(0);
                    commonAddSchedule.init({
                        'subType': self.param.subType,
                        'poiId': self.param.poiId,
                        'businessId': self.param.businessId,
                        'bussinessName': self.param.bussinessName
                    });

                }
                $('body').delegate(".js_add_travel_plan_list .js_new_plan", 'click', function (e) {

                    $(".js_add_travel_plan_list").hide();
                    $(".js_add_travel_plan_background").hide();
                    commonAddSchedule.init({
                        'subType': self.param.subType,
                        'poiId': self.param.poiId,
                        'businessId': self.param.businessId,
                        'bussinessName': self.param.bussinessName
                    });
                });
                
            });
        },

        addTravelPlan: function (travelPlanId, sightName, hasdate) {
            var self = this;
            if (travelPlanId == 0) {
                commonAddSchedule.init({
                    'subType': self.param.subType,
                    'poiId': self.param.poiId,
                    'businessId': self.param.businessId,
                    'bussinessName': self.param.bussinessName
                });
            } else {
                addTravelPlanModel.setParam({
                    Guid: new self.getGUID().newGUID(),
                    PoiId: self.param.poiId,
                    TravelPlanId: travelPlanId
                });
                addTravelPlanModel.excute(function (data) {
                    if (data && data.ResponseStatus && data.ResponseStatus.Ack == 'Success') {
                        self.showAddSucPop(data.TravelPlanId, sightName, hasdate);
                    } else {
                        Lizard.showToast("加入旅行计划失败");
                    }
                });
            }
            

            
        },

        showAddSucPop: function(travelPlanId,sightName,hasdate) {
            var self = this;

            
            if (hasdate) {
                self._ShowTip('可在APP首页底部行程查看');
                //$(".js_add_travel_plan_suc").children().find('.cui-layer-content').find('h2').html('已添加到行程');
                //$(".js_add_travel_plan_suc").children().find('.cui-layer-content').find('h4').html('可在APP首页底部行程查看');
            } else {
                $(".js_add_travel_plan_background").addClass("opacity-6").show();
                self.forbidBodyScroll();
                $(".js_add_travel_plan_suc").data('travelplanid', travelPlanId);
                

                    //$('.js_add_travel_plan_suc').click(function () {
                    //    var travelPlanId = $(this).data("travelplanid");
                    //    $('.js_add_travel_plan_background').hide();
                    //    self.allowBodyScroll();
                    //    $('.js_add_travel_plan_suc').hide();
                    //    self.gotoTravelPage(travelPlanId);
                    //    $('.js_image_fly').show();
                    //    window.setTimeout(function () {
                    //        $('.js_image_fly').hide();
                    //    }, 2000);
                    //})
                    
                
                $(".js_add_travel_plan_suc").children().find('.cui-layer-content').find('h2').html('已添加到旅行计划');
                $(".js_add_travel_plan_suc").children().find('.cui-layer-content').find('h4').html('标题为"' + sightName + '"去查看');
                $(".js_add_travel_plan_suc").show();

                gscommon.cTrackLog(100664, {
                    actioncode:'poi_plus_plan_success'
                });

            }
            
            

        },
        _ShowTip: function (dateTime) {
            var self = this;
            $('.js_schedule_success').children().addClass('rlink_msg');
            $('.js_schedule_success .js_schedule_time').text(dateTime);
            $('.js_schedule_success').children().children().find('dt').html('已添加到行程');
            $('.js_schedule_goto').hide();
            $('.js_schedule_success').show();

            // setTimeout(function(){
            //     $('.js_schedule_success .this_msg').addClass("this_show");
            // }, 5);

            // setTimeout(function(){
            //     $('.js_schedule_success .this_msg').removeClass("this_show");
            // }, 2000);

            setTimeout(function () {
                $('.js_schedule_success').hide();
                $('.js_schedule_goto').css('display', 'block');
            }, 2300);

            gscommon.cTrackLog(100663, {
                actioncode: 'poi_plus_schedule_success'
            });

        },

        isShowTipPop: function() {
            var self = this;
            try {
                businessJob.doBusinessJob({
                    businessCode : 801001,
                    data:{
                        "type": 1,
                        "key": "travelFirstAccessFlag"
                    },
                    callback: function(res){
                        if (res && res.param && res.param.code && (res.param.code == 801001) && res.param.sequenceId) {
                            if (res.param && res.param.context) {
                                // DO nothing
                            } else {

                                if (self.param.unShowGuide) {
                                    //DO nothing 不显示引导浮层
                                } else {
                                    //显示提示引导浮层
                                    $(".js_add_travel_plan_background").addClass("opacity-6").show();
                                    self.forbidBodyScroll();
                                    $(".js_add_travel_plan_btns").show();
                                    setTimeout(function() {
                                        $(".js_add_travel_plan_background").hide();
                                        self.allowBodyScroll();
                                        $(".js_add_travel_plan_btns").hide();
                                    }, 5000);
                                }

                                //第一次打开该页面，存入KEY值
                                try {
                                    businessJob.doBusinessJob({
                                        businessCode : 801001,
                                        data:{
                                            "type": 0,
                                            "key": "travelFirstAccessFlag",
                                            "context": 1,
                                            "expiry": 20000
                                        },
                                        callback: function(res){
                                            // DO nothing
                                        }
                                    });
                                } catch (e) {
                                    // DO nothing
                                }
                            }
                        }
                    }
                });
            } catch (e) {
                // DO nothing
            }
        },

        gotoTravelPage: function (travelPlanId) {
            if (Lizard.isHybrid || Lizard.isInCtripApp) {
                if (appAgent.compareAppVersion('7.2') <= 0) {
                    routerRedirect.toJump({
                        url: [Lizard.H5BaseUrl + "/webapp/you/journeys/travelplan/list.html?from=" + window.location.href, "destination/journey/index.html#travelplan/list.html"],
                        targetModel: 4
                    });
                } else if (appAgent.compareAppVersion('7.1') == 1) {
                    routerRedirect.toJump({
                        url: ['', 'destination/journey/index.html#travelscheme/' + travelPlanId + '.html?hideBrandTip=1'],
                        targetModel: 4
                    });
                } else {
                    routerRedirect.toJump({
                        url: ['ctrip://wireless/destination/toTravlePlanEdit?packageId=' + travelPlanId, 'ctrip://wireless/destination/toTravlePlanEdit?packageId=' + travelPlanId],
                        targetModel: 1
                    });
                }
            } else {
                routerRedirect.toJump({
                    url: [Lizard.H5BaseUrl + "/webapp/you/journeys/travelplan/list.html?from=" + window.location.href, "destination/journey/index.html#travelplan/list.html"],
                    targetModel: 4
                });
            }
        
        },

        forbidBodyScroll: function () {
            $(".js_add_travel_plan_background").on('touchmove', function(e) {
                e.stopImmediatePropagation();
                e.preventDefault;
                return false;
            });
        },

        allowBodyScroll: function () {
            $(".js_add_travel_plan_background").off('touchmove');
        },

        getGUID: function GUID() {
            this.date = new Date();

            /* 判断是否初始化过，如果初始化过以下代码，则以下代码将不再执行，实际中只执行一次 */
            if (typeof this.newGUID != 'function') {

                /* 生成GUID码 */
                GUID.prototype.newGUID = function() {
                    this.date = new Date();
                    var guidStr = '';
                    sexadecimalDate = this.hexadecimal(this.getGUIDDate(), 16);
                    sexadecimalTime = this.hexadecimal(this.getGUIDTime(), 16);
                    for (var i = 0; i < 9; i++) {
                        guidStr += Math.floor(Math.random()*16).toString(16);
                    }
                    guidStr += sexadecimalDate;
                    guidStr += sexadecimalTime;
                    while(guidStr.length < 32) {
                        guidStr += Math.floor(Math.random()*16).toString(16);
                    }
                    return this.formatGUID(guidStr);
                }

                /*
          * 功能：获取当前日期的GUID格式，即8位数的日期：19700101
          * 返回值：返回GUID日期格式的字条串
          */
                GUID.prototype.getGUIDDate = function() {
                    return this.date.getFullYear() + this.addZero(this.date.getMonth() + 1) + this.addZero(this.date.getDay());
                }

                /*
          * 功能：获取当前时间的GUID格式，即8位数的时间，包括毫秒，毫秒为2位数：12300933
          * 返回值：返回GUID日期格式的字条串
          */
                GUID.prototype.getGUIDTime = function() {
                    return this.addZero(this.date.getHours()) + this.addZero(this.date.getMinutes()) + this.addZero(this.date.getSeconds()) + this.addZero( parseInt(this.date.getMilliseconds() / 10 ));
                }

                /*
           * 功能: 为一位数的正整数前面添加0，如果是可以转成非NaN数字的字符串也可以实现
          * 参数: 参数表示准备再前面添加0的数字或可以转换成数字的字符串
          * 返回值: 如果符合条件，返回添加0后的字条串类型，否则返回自身的字符串
          */
                GUID.prototype.addZero = function(num) {
                    if (Number(num).toString() != 'NaN' && num >= 0 && num < 10) {
                        return '0' + Math.floor(num);
                    } else {
                        return num.toString();
                    }
                }

                /*
          * 功能：将y进制的数值，转换为x进制的数值
          * 参数：第1个参数表示欲转换的数值；第2个参数表示欲转换的进制；第3个参数可选，表示当前的进制数，如不写则为10
          * 返回值：返回转换后的字符串
          */
                GUID.prototype.hexadecimal = function(num, x, y) {
                    if (y != undefined) {
                        return parseInt(num.toString(), y).toString(x);
                    } else {
                        return parseInt(num.toString()).toString(x);
                    }
                }

                /*
          * 功能：格式化32位的字符串为GUID模式的字符串
          * 参数：第1个参数表示32位的字符串
          * 返回值：标准GUID格式的字符串
          */
                GUID.prototype.formatGUID = function(guidStr) {
                    var str1 = guidStr.slice(0, 8) + '-',
                        str2 = guidStr.slice(8, 12) + '-',
                        str3 = guidStr.slice(12, 16) + '-',
                        str4 = guidStr.slice(16, 20) + '-',
                        str5 = guidStr.slice(20);
                    return str1 + str2 + str3 + str4 + str5;
                }
            }
        }

	};

	return TravelPlan;
});
define('gsErrorPopModel',[
    'cModel',
    'cCoreInherit'
], function (
    abstractModel,
    cCoreInherit
) {
    var ErrorModel = {

        SetDetail: new cCoreInherit.Class(abstractModel, {
            __propertys__: function () {
                this.url = "/soa2/10356/json/InsertPoiErrorInfo";

                this.param = {
                    "PoiId": 0,
                    "ErrorType": 0, //错误类型:1 已经关闭、2 地图位置错误、3 信息错误
                    "OtherInfo": '',
                    "Email": ''
                };

                // this.dataformat = this.parse;
            },

            initialize: function ($super, options) {
                $super(options);
            },

            parse: function (datas) {
                var res = {};

                return res;
            }
        })
    }

    return ErrorModel;
});
define('gsErrorPop',[
    'gsErrorPopModel',
    'gsRouterRedirect',
    'gsAppAgent'
], function (
    ErrorPopModel,
    routerRedirect,
    AppAgent
) {
    var model = ErrorPopModel.SetDetail.getInstance();

    var ErrorPop = {
        /*
        * @params:
        * {
        *     PoiId: //--PoiId
        *     PoiType: //--Poi类型 1:景点; 2:娱乐; 3:购物; 4:美食
        * }
        */
        init: function (params) {
            var self = this;

            self._setDeploy();

            self.opts = params;

            self._getType();

            self._setHtml();
        },

        _setDeploy: function () {
            var self = this;

            self.poiName = ''; //--1:景点; 2:娱乐; 3:购物; 4:美食
            self.poiEName = ''; //--1:sight; 2:resort; 3:shops; 4:foods

            self.currentUrl = encodeURIComponent(window.location.href);
        },

        _getType: function () {
            var self = this;

            switch (self.opts.PoiType) {
                case 1:
                    self.poiName = "景点";
                    self.poiEName = "sight";
                    break;

                case 2:
                    self.poiName = "玩乐";
                    self.poiEName = "resort";
                    break;

                case 3:
                    self.poiName = "商户";
                    self.poiEName = "shops";
                    break;

                case 4:
                    self.poiName = "餐馆";
                    self.poiEName = "foods";
                    break;
            }
        },

        _setHtml: function () {
            var self = this;

            if (AppAgent.isHybrid()) {
                var html = "<div class='js_error_pop mod_msg_pop' style='display:none;'>" +
                "    <div class='js_error_pop_show this_wrap'>" +
                "        <div class='this_list'>" +
                "            <div class='js_error_pop_list this_group'>" +
                "                <a data-type='1' id='c_sight_status'>" + self.poiName + "已关</a>" +
                "                <a data-type='4' id='c_duplicate'>" + self.poiName + "重复</a>" +
                "                <a data-type='2' id='c_sight_latitude'>地图位置错误</a>" +
                "                <a data-type='3' id='c_sight_info'>其它信息错误</a>" +
                "            </div>" +
                "            <div class='this_group'>" +
                "                <a class='js_error_close' id='c_sight_cancel'>取消</a>" +
                "            </div>" +
                "        </div>" +
                "    </div>" +
                "</div>";
            } else {
                var html = "<div class='js_error_pop mod_msg_pop' style='display:none;'>" +
                "    <div class='js_error_pop_show this_wrap'>" +
                "        <div class='this_list'>" +
                "            <div class='js_error_pop_list this_group'>" +
                "                <a data-type='1' id='c_sight_status'>" + self.poiName + "已关</a>" +
                "                <a data-type='2' id='c_sight_latitude'>地图位置错误</a>" +
                "                <a data-type='3' id='c_sight_info'>其它信息错误</a>" +
                "            </div>" +
                "            <div class='this_group'>" +
                "                <a class='js_error_close' id='c_sight_cancel'>取消</a>" +
                "            </div>" +
                "        </div>" +
                "    </div>" +
                "</div>";
            }
            

            var $that = $('.main-viewport');

            $that.append(html);

            self.$pop = $('.js_error_pop');
            self.$popShow = $('.js_error_pop_show');

            self._addEvent();
        },

        _addEvent: function () {
            var self = this;

            var $that = $('.js_error_pop_list a'),
                $btn = $('.js_error_close');

            $that.off().on('click', function () {
                var type = $(this).data('type');

                self._toClose();
                switch (type) {
                    case 1:
                        if (AppAgent.isHybrid() && (self.opts.PoiType == '1' || self.opts.PoiType == '4' || self.opts.PoiType == '3')) {
                            routerRedirect.toJump({
                                'url': [Lizard.H5BaseUrl + "/webapp/you/sparkplan/recovery/" + self.poiEName + "_" + self.opts.PoiId + ".html"],
                                'targetModel': 2
                            });
                        } else {
                            var msg = "确认该" + self.poiName + "已经关闭了吗？";
                            self._setCommit({
                                "msg": msg,
                                "type": 1
                            });
                        }

                        break;

                    case 2:
                        if (AppAgent.isHybrid() && (self.opts.PoiType == '1' || self.opts.PoiType == '4' || self.opts.PoiType == '3')) {

                            if(1 == AppAgent.compareAppVersion("6.16")){ //6.16之前跳转直连
                                routerRedirect.toJump({
                                    'url': [Lizard.H5BaseUrl + "/webapp/you/sparkplan/location/map/" + self.poiEName + "_" + self.opts.PoiId + ".html?originLat=" + self.opts.Lat + "&originLng=" + self.opts.Lng],
                                    'targetModel': 2
                                });
                            }else{//6.16之后，跳hybrid， 因为直连的https google地图无法显示
                                routerRedirect.toJump({
                                    'url': [
                                        Lizard.H5BaseUrl + "/webapp/you/map/location/select.html?type=" + self.poiEName + "&poiId=" + self.opts.PoiId + "&originSource=0&originLat=" + self.opts.Lat + "&originLng=" + self.opts.Lng,
                                        "destination/map/index.html#map/location/select.html?type=" + self.poiEName + "&poiId=" + self.opts.PoiId + "&originSource=0&originLat=" + self.opts.Lat + "&originLng=" + self.opts.Lng
                                    ],
                                    'targetModel': 4
                                });
                            }



                        } else {
                            var msg = "确认该" + self.poiName + "的地图位置是错误的吗？";
                            self._setCommit({
                                "msg": msg,
                                "type": 2
                            });
                        }

                        break;

                    case 3:
                        if (AppAgent.isHybrid() && (self.opts.PoiType == '1' || self.opts.PoiType == '4' || self.opts.PoiType == '3')) {
                            routerRedirect.toJump({
                                'url': [Lizard.H5BaseUrl + "/webapp/you/sparkplan/info/" + self.poiEName + "_" + self.opts.PoiId + ".html"],
                                'targetModel': 2
                            });
                        } else {
                            routerRedirect.toJump({
                                'url': [routerRedirect.getStraightLink() + '/webapp/you/shops/' + self.opts.PoiId + '-error.html?from=' + self.currentUrl],
                                'targetModel': 2
                            });
                        }

                        break;

                    case 4:
                        if (AppAgent.isHybrid() && (self.opts.PoiType == '1' || self.opts.PoiType == '4' || self.opts.PoiType == '3')) {
                            routerRedirect.toJump({
                                'url': [Lizard.H5BaseUrl + "/webapp/you/sparkplan/repeat/" + self.poiEName + "_" + self.opts.PoiId + ".html?districtId=" + self.opts.DistrictId],
                                'targetModel': 2
                            });
                        } 

                        break;
                }
            });

            $btn.off().on('click', function () {
                self._toClose();
            });

            self.$pop.on('click', function () {
                self._toClose();
            });
        },

        _setCommit: function (params) {
            var self = this;

            setTimeout(function () {
                Lizard.showMessage({
                    datamodel: {
                        content: params.msg,
                        btns: [
                            { name: '取消', className: 'cui-btns-cancel' },
                            { name: '确定', className: 'cui-btns-ok' }
                        ]
                    },
                    okAction: function () {
                        this.hide();

                        self.updateData(params.type);
                    },
                    cancleAction: function () {
                        this.hide();
                    }
                });

            }, 400);
        },

        showLayout: function () {
            var self = this;

            self.$pop.show();

            setTimeout(function () {
                self.$popShow.addClass('this_slideUp');
            }, 1);

        },

        _toClose: function () {
            var self = this;

            self.$popShow.removeClass('this_slideUp');

            setTimeout(function () {
                self.$pop.hide();
            }, 300);

        },

        updateData: function (type) {
            var self = this;

            model.setParam({
                "PoiId": self.opts.PoiId,
                "ErrorType": type //错误类型:1 已经关闭、2 地图位置错误、3 信息错误
            });

            model.excute(function (res) {

                setTimeout(function () {  //两个动画容易冲突， 所以这里加了300 ms的延时
                    Lizard.showMessage({
                        datamodel: {
                            content: "非常感谢你的反馈！",
                            btns: [
                                { name: '确定', className: 'cui-btns-ok' }
                            ]
                        },
                        okAction: function () {
                            this.hide();
                        }
                    });
                }, 300);


            }, function (error) {

                Lizard.showMessage({
                    datamodel: {
                        content: "网络不给力，请稍候再试试吧！",
                        btns: [
                            { name: '确定', className: 'cui-btns-ok' }
                        ]
                    },
                    okAction: function () {
                        this.hide();
                    }
                });
            });
        }
    };

    return ErrorPop;
});
/**
 * 百度push代码 for h5专用
 * @author Mark.Chen
 * @description 需要使用的页面直接在AMD模块中使用 gsBaiduGrab
 */

define('gsBaiduGrab',[],function() {
	// if(Lizard.renderAt !== 'client'){
 //        var bp = document.createElement('script');
 //        bp.src = '//push.zhanzhang.baidu.com/push.js';
 //        var s = document.getElementsByTagName("script")[0];
 //        s && s.parentNode.insertBefore(bp, s);
 //    }
});
/*! iScroll v5.2.0 ~ (c) 2008-2016 Matteo Spinelli ~ https://cubiq.org/license */
(function (window, document, Math) {
var rAF = window.requestAnimationFrame	||
	window.webkitRequestAnimationFrame	||
	window.mozRequestAnimationFrame		||
	window.oRequestAnimationFrame		||
	window.msRequestAnimationFrame		||
	function (callback) { window.setTimeout(callback, 1000 / 60); };

var utils = (function () {
	var me = {};

	var _elementStyle = document.createElement('div').style;
	var _vendor = (function () {
		var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
			transform,
			i = 0,
			l = vendors.length;

		for ( ; i < l; i++ ) {
			transform = vendors[i] + 'ransform';
			if ( transform in _elementStyle ) return vendors[i].substr(0, vendors[i].length-1);
		}

		return false;
	})();

	function _prefixStyle (style) {
		if ( _vendor === false ) return false;
		if ( _vendor === '' ) return style;
		return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	}

	me.getTime = Date.now || function getTime () { return new Date().getTime(); };

	me.extend = function (target, obj) {
		for ( var i in obj ) {
			target[i] = obj[i];
		}
	};

	me.addEvent = function (el, type, fn, capture) {
		el.addEventListener(type, fn, !!capture);
	};

	me.removeEvent = function (el, type, fn, capture) {
		el.removeEventListener(type, fn, !!capture);
	};

	me.prefixPointerEvent = function (pointerEvent) {
		return window.MSPointerEvent ?
			'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8):
			pointerEvent;
	};

	me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
		var distance = current - start,
			speed = Math.abs(distance) / time,
			destination,
			duration;

		deceleration = deceleration === undefined ? 0.0006 : deceleration;

		destination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? -1 : 1 );
		duration = speed / deceleration;

		if ( destination < lowerMargin ) {
			destination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;
			distance = Math.abs(destination - current);
			duration = distance / speed;
		} else if ( destination > 0 ) {
			destination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;
			distance = Math.abs(current) + destination;
			duration = distance / speed;
		}

		return {
			destination: Math.round(destination),
			duration: duration
		};
	};

	var _transform = _prefixStyle('transform');

	me.extend(me, {
		hasTransform: _transform !== false,
		hasPerspective: _prefixStyle('perspective') in _elementStyle,
		hasTouch: 'ontouchstart' in window,
		hasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed
		hasTransition: _prefixStyle('transition') in _elementStyle
	});

	/*
	This should find all Android browsers lower than build 535.19 (both stock browser and webview)
	- galaxy S2 is ok
    - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`
    - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
   - galaxy S3 is badAndroid (stock brower, webview)
     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
   - galaxy S4 is badAndroid (stock brower, webview)
     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
   - galaxy S5 is OK
     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
   - galaxy S6 is OK
     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
  */
	me.isBadAndroid = (function() {
		var appVersion = window.navigator.appVersion;
		// Android browser is not a chrome browser.
		if (/Android/.test(appVersion) && !(/Chrome\/\d/.test(appVersion))) {
			var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
			if(safariVersion && typeof safariVersion === "object" && safariVersion.length >= 2) {
				return parseFloat(safariVersion[1]) < 535.19;
			} else {
				return true;
			}
		} else {
			return false;
		}
	})();

	me.extend(me.style = {}, {
		transform: _transform,
		transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
		transitionDuration: _prefixStyle('transitionDuration'),
		transitionDelay: _prefixStyle('transitionDelay'),
		transformOrigin: _prefixStyle('transformOrigin')
	});

	me.hasClass = function (e, c) {
		var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
		return re.test(e.className);
	};

	me.addClass = function (e, c) {
		if ( me.hasClass(e, c) ) {
			return;
		}

		var newclass = e.className.split(' ');
		newclass.push(c);
		e.className = newclass.join(' ');
	};

	me.removeClass = function (e, c) {
		if ( !me.hasClass(e, c) ) {
			return;
		}

		var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
		e.className = e.className.replace(re, ' ');
	};

	me.offset = function (el) {
		var left = -el.offsetLeft,
			top = -el.offsetTop;

		// jshint -W084
		while (el = el.offsetParent) {
			left -= el.offsetLeft;
			top -= el.offsetTop;
		}
		// jshint +W084

		return {
			left: left,
			top: top
		};
	};

	me.preventDefaultException = function (el, exceptions) {
		for ( var i in exceptions ) {
			if ( exceptions[i].test(el[i]) ) {
				return true;
			}
		}

		return false;
	};

	me.extend(me.eventType = {}, {
		touchstart: 1,
		touchmove: 1,
		touchend: 1,

		mousedown: 2,
		mousemove: 2,
		mouseup: 2,

		pointerdown: 3,
		pointermove: 3,
		pointerup: 3,

		MSPointerDown: 3,
		MSPointerMove: 3,
		MSPointerUp: 3
	});

	me.extend(me.ease = {}, {
		quadratic: {
			style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
			fn: function (k) {
				return k * ( 2 - k );
			}
		},
		circular: {
			style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',	// Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
			fn: function (k) {
				return Math.sqrt( 1 - ( --k * k ) );
			}
		},
		back: {
			style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
			fn: function (k) {
				var b = 4;
				return ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;
			}
		},
		bounce: {
			style: '',
			fn: function (k) {
				if ( ( k /= 1 ) < ( 1 / 2.75 ) ) {
					return 7.5625 * k * k;
				} else if ( k < ( 2 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;
				} else if ( k < ( 2.5 / 2.75 ) ) {
					return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;
				} else {
					return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;
				}
			}
		},
		elastic: {
			style: '',
			fn: function (k) {
				var f = 0.22,
					e = 0.4;

				if ( k === 0 ) { return 0; }
				if ( k == 1 ) { return 1; }

				return ( e * Math.pow( 2, - 10 * k ) * Math.sin( ( k - f / 4 ) * ( 2 * Math.PI ) / f ) + 1 );
			}
		}
	});

	me.tap = function (e, eventName) {
		var ev = document.createEvent('Event');
		ev.initEvent(eventName, true, true);
		ev.pageX = e.pageX;
		ev.pageY = e.pageY;
		e.target.dispatchEvent(ev);
	};

	me.click = function (e) {
		var target = e.target,
			ev;

		if ( !(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName) ) {
			// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent
			// initMouseEvent is deprecated.
			ev = document.createEvent(window.MouseEvent ? 'MouseEvents' : 'Event');
			ev.initEvent('click', true, true);
			ev.view = e.view || window;
			ev.detail = 1;
			ev.screenX = target.screenX || 0;
			ev.screenY = target.screenY || 0;
			ev.clientX = target.clientX || 0;
			ev.clientY = target.clientY || 0;
			ev.ctrlKey = !!e.ctrlKey;
			ev.altKey = !!e.altKey;
			ev.shiftKey = !!e.shiftKey;
			ev.metaKey = !!e.metaKey;
			ev.button = 0;
			ev.relatedTarget = null;
			ev._constructed = true;
			target.dispatchEvent(ev);
		}
	};

	return me;
})();
function IScroll (el, options) {
	this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
	this.scroller = this.wrapper.children[0];
	this.scrollerStyle = this.scroller.style;		// cache style for better performance

	this.options = {

		resizeScrollbars: true,

		mouseWheelSpeed: 20,

		snapThreshold: 0.334,

// INSERT POINT: OPTIONS
		disablePointer : !utils.hasPointer,
		disableTouch : utils.hasPointer || !utils.hasTouch,
		disableMouse : utils.hasPointer || utils.hasTouch,
		startX: 0,
		startY: 0,
		scrollY: true,
		directionLockThreshold: 5,
		momentum: true,

		bounce: true,
		bounceTime: 600,
		bounceEasing: '',

		preventDefault: true,
		preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },

		HWCompositing: true,
		useTransition: true,
		useTransform: true,
		bindToWrapper: typeof window.onmousedown === "undefined",
		dir:'forward',
		thisY:'',
		maxY:'',

	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	// Normalize options
	this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

	this.options.useTransition = utils.hasTransition && this.options.useTransition;
	this.options.useTransform = utils.hasTransform && this.options.useTransform;

	this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
	this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

	// If you want eventPassthrough I have to lock one of the axes
	this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
	this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

	// With eventPassthrough we also need lockDirection mechanism
	this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
	this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

	this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

	this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

	if ( this.options.tap === true ) {
		this.options.tap = 'tap';
	}

	// https://github.com/cubiq/iscroll/issues/1029
	if (!this.options.useTransition && !this.options.useTransform) {
		if(!(/relative|absolute/i).test(this.scrollerStyle.position)) {
			this.scrollerStyle.position = "relative";
		}
	}

	if ( this.options.shrinkScrollbars == 'scale' ) {
		this.options.useTransition = false;
	}

	this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

// INSERT POINT: NORMALIZATION

	// Some defaults
	this.x = 0;
	this.y = 0;
	this.directionX = 0;
	this.directionY = 0;
	this._events = {};

// INSERT POINT: DEFAULTS

	this._init();
	this.refresh();

	this.scrollTo(this.options.startX, this.options.startY);
	this.enable();
}

IScroll.prototype = {
	version: '5.2.0',

	_init: function () {
		this._initEvents();

		if ( this.options.scrollbars || this.options.indicators ) {
			this._initIndicators();
		}

		if ( this.options.mouseWheel ) {
			this._initWheel();
		}

		if ( this.options.snap ) {
			this._initSnap();
		}

		if ( this.options.keyBindings ) {
			this._initKeys();
		}

// INSERT POINT: _init

	},

	destroy: function () {
		this._initEvents(true);
		clearTimeout(this.resizeTimeout);
 		this.resizeTimeout = null;
		this._execEvent('destroy');
	},

	_transitionEnd: function (e) {
		if ( e.target != this.scroller || !this.isInTransition ) {
			return;
		}

		this._transitionTime();
		if ( !this.resetPosition(this.options.bounceTime) ) {
			this.isInTransition = false;
			this._execEvent('scrollEnd');
		}
	},

	_start: function (e) {
		// React to left mouse button only
		if ( utils.eventType[e.type] != 1 ) {
		  // for button property
		  // https://unixpapa.com/js/mouse.html
		  var button;
	    if (!e.which) {
	      /* IE case */
	      button = (e.button < 2) ? 0 :
	               ((e.button == 4) ? 1 : 2);
	    } else {
	      /* All others */
	      button = e.button;
	    }
			if ( button !== 0 ) {
				return;
			}
		}

		if ( !this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated) ) {
			return;
		}

		if ( this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();
		}

		var point = e.touches ? e.touches[0] : e,
			pos;

		this.initiated	= utils.eventType[e.type];
		this.moved		= false;
		this.distX		= 0;
		this.distY		= 0;
		this.directionX = 0;
		this.directionY = 0;
		this.directionLocked = 0;

		this.startTime = utils.getTime();

		if ( this.options.useTransition && this.isInTransition ) {
			this._transitionTime();
			this.isInTransition = false;
			pos = this.getComputedPosition();
			this._translate(Math.round(pos.x), Math.round(pos.y));
			this._execEvent('scrollEnd');
		} else if ( !this.options.useTransition && this.isAnimating ) {
			this.isAnimating = false;
			this._execEvent('scrollEnd');
		}

		this.startX    = this.x;
		this.startY    = this.y;
		this.absStartX = this.x;
		this.absStartY = this.y;
		this.pointX    = point.pageX;
		this.pointY    = point.pageY;

		this._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault ) {	// increases performance on Android? TODO: check!
			e.preventDefault();
		}

		var point		= e.touches ? e.touches[0] : e,
			deltaX		= point.pageX - this.pointX,
			deltaY		= point.pageY - this.pointY,
			timestamp	= utils.getTime(),
			newX, newY,
			absDistX, absDistY;

		this.pointX		= point.pageX;
		this.pointY		= point.pageY;

		this.distX		+= deltaX;
		this.distY		+= deltaY;
		absDistX		= Math.abs(this.distX);
		absDistY		= Math.abs(this.distY);

		// We need to move at least 10 pixels for the scrolling to initiate
		if ( timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10) ) {
			return;
		}

		// If you are scrolling in one direction lock the other
		if ( !this.directionLocked && !this.options.freeScroll ) {
			if ( absDistX > absDistY + this.options.directionLockThreshold ) {
				this.directionLocked = 'h';		// lock horizontally
			} else if ( absDistY >= absDistX + this.options.directionLockThreshold ) {
				this.directionLocked = 'v';		// lock vertically
			} else {
				this.directionLocked = 'n';		// no lock
			}
		}

		if ( this.directionLocked == 'h' ) {
			if ( this.options.eventPassthrough == 'vertical' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'horizontal' ) {
				this.initiated = false;
				return;
			}

			deltaY = 0;
		} else if ( this.directionLocked == 'v' ) {
			if ( this.options.eventPassthrough == 'horizontal' ) {
				e.preventDefault();
			} else if ( this.options.eventPassthrough == 'vertical' ) {
				this.initiated = false;
				return;
			}

			deltaX = 0;
		}

		/*
		* 修复bug
		* 在app内当手指划过边框，无法回弹
		*/
		if((this.y < this.maxScrollY) && (this.pointY < 1)){
			this.scrollTo(0, this.maxScrollY, 400);
			return;
		} else if (this.y > 0 && (this.pointY > window.innerHeight - 1)) {
			this.scrollTo(0, 0, 400);
			return;
		}
		//end

		deltaX = this.hasHorizontalScroll ? deltaX : 0;
		deltaY = this.hasVerticalScroll ? deltaY : 0;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		// Slow down if outside of the boundaries
		if ( newX > 0 || newX < this.maxScrollX ) {
			newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
		}
		if ( newY > 0 || newY < this.maxScrollY ) {
			newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
		}

		this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
		this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

		if ( !this.moved ) {
			this._execEvent('scrollStart');
		}

		this.moved = true;
		/*
		 * 增加手指滑动方向
		 */
		if (newX > this.x || newY > this.y) {
			this.dir = 'forward';
		} else {
			this.dir = 'back';
		}
		this.thisY=this.y;
		this.maxY=this.maxScrollY;
		//end
		this._translate(newX, newY);

/* REPLACE START: _move */

		if ( timestamp - this.startTime > 300 ) {
			this.startTime = timestamp;
			this.startX = this.x;
			this.startY = this.y;
		}

/* REPLACE END: _move */

	},

	_end: function (e) {
		if ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {
			return;
		}

		if ( this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {
			e.preventDefault();
		}

		var point = e.changedTouches ? e.changedTouches[0] : e,
			momentumX,
			momentumY,
			duration = utils.getTime() - this.startTime,
			newX = Math.round(this.x),
			newY = Math.round(this.y),
			distanceX = Math.abs(newX - this.startX),
			distanceY = Math.abs(newY - this.startY),
			time = 0,
			easing = '';

		this.isInTransition = 0;
		this.initiated = 0;
		this.endTime = utils.getTime();

		// reset if we are outside of the boundaries
		if ( this.resetPosition(this.options.bounceTime) ) {
			return;
		}

		this.scrollTo(newX, newY);	// ensures that the last position is rounded

		// we scrolled less than 10 pixels
		if ( !this.moved ) {
			if ( this.options.tap ) {
				utils.tap(e, this.options.tap);
			}

			if ( this.options.click ) {
				utils.click(e);
			}

			this._execEvent('scrollCancel');
			return;
		}

		if ( this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100 ) {
			this._execEvent('flick');
			return;
		}

		// start momentum animation if needed
		if ( this.options.momentum && duration < 300 ) {
			momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };
			momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };
			newX = momentumX.destination;
			newY = momentumY.destination;
			time = Math.max(momentumX.duration, momentumY.duration);
			this.isInTransition = 1;
		}


		if ( this.options.snap ) {
			var snap = this._nearestSnap(newX, newY);
			this.currentPage = snap;
			time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(newX - snap.x), 1000),
						Math.min(Math.abs(newY - snap.y), 1000)
					), 300);
			newX = snap.x;
			newY = snap.y;

			this.directionX = 0;
			this.directionY = 0;
			easing = this.options.bounceEasing;
		}

// INSERT POINT: _end

		if ( newX != this.x || newY != this.y ) {
			// change easing function when scroller goes out of the boundaries
			if ( newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY ) {
				easing = utils.ease.quadratic;
			}

			this.scrollTo(newX, newY, time, easing);
			return;
		}

		this._execEvent('scrollEnd');
	},

	_resize: function () {
		var that = this;

		clearTimeout(this.resizeTimeout);

		this.resizeTimeout = setTimeout(function () {
			that.refresh();
		}, this.options.resizePolling);
	},

	resetPosition: function (time) {
		var x = this.x,
			y = this.y;

		time = time || 0;

		if ( !this.hasHorizontalScroll || this.x > 0 ) {
			x = 0;
		} else if ( this.x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( !this.hasVerticalScroll || this.y > 0 ) {
			y = 0;
		} else if ( this.y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		if ( x == this.x && y == this.y ) {
			return false;
		}

		this.scrollTo(x, y, time, this.options.bounceEasing);

		return true;
	},

	disable: function () {
		this.enabled = false;
	},

	enable: function () {
		this.enabled = true;
	},

	refresh: function () {
		var rf = this.wrapper.offsetHeight;		// Force reflow

		this.wrapperWidth	= this.wrapper.clientWidth;
		this.wrapperHeight	= this.wrapper.clientHeight;

/* REPLACE START: refresh */

		this.scrollerWidth	= this.scroller.offsetWidth;
		this.scrollerHeight	= this.scroller.offsetHeight;

		this.maxScrollX		= this.wrapperWidth - this.scrollerWidth;
		this.maxScrollY		= this.wrapperHeight - this.scrollerHeight;

/* REPLACE END: refresh */

		this.hasHorizontalScroll	= this.options.scrollX && this.maxScrollX < 0;
		this.hasVerticalScroll		= this.options.scrollY && this.maxScrollY < 0;

		if ( !this.hasHorizontalScroll ) {
			this.maxScrollX = 0;
			this.scrollerWidth = this.wrapperWidth;
		}

		if ( !this.hasVerticalScroll ) {
			this.maxScrollY = 0;
			this.scrollerHeight = this.wrapperHeight;
		}

		this.endTime = 0;
		this.directionX = 0;
		this.directionY = 0;

		this.wrapperOffset = utils.offset(this.wrapper);

		this._execEvent('refresh');

		this.resetPosition();

// INSERT POINT: _refresh

	},

	on: function (type, fn) {
		if ( !this._events[type] ) {
			this._events[type] = [];
		}

		this._events[type].push(fn);
	},

	off: function (type, fn) {
		if ( !this._events[type] ) {
			return;
		}

		var index = this._events[type].indexOf(fn);

		if ( index > -1 ) {
			this._events[type].splice(index, 1);
		}
	},

	_execEvent: function (type) {
		if ( !this._events[type] ) {
			return;
		}

		var i = 0,
			l = this._events[type].length;

		if ( !l ) {
			return;
		}

		for ( ; i < l; i++ ) {
			this._events[type][i].apply(this, [].slice.call(arguments, 1));
		}
	},

	scrollBy: function (x, y, time, easing) {
		x = this.x + x;
		y = this.y + y;
		time = time || 0;

		this.scrollTo(x, y, time, easing);
	},

	scrollTo: function (x, y, time, easing) {
		easing = easing || utils.ease.circular;

		this.isInTransition = this.options.useTransition && time > 0;
		var transitionType = this.options.useTransition && easing.style;
		if ( !time || transitionType ) {
				if(transitionType) {
					this._transitionTimingFunction(easing.style);
					this._transitionTime(time);
				}
			this._translate(x, y);
		} else {
			this._animate(x, y, time, easing.fn);
		}
	},

	scrollToElement: function (el, time, offsetX, offsetY, easing) {
		el = el.nodeType ? el : this.scroller.querySelector(el);

		if ( !el ) {
			return;
		}

		var pos = utils.offset(el);

		pos.left -= this.wrapperOffset.left;
		pos.top  -= this.wrapperOffset.top;

		// if offsetX/Y are true we center the element to the screen
		if ( offsetX === true ) {
			offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
		}
		if ( offsetY === true ) {
			offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
		}

		pos.left -= offsetX || 0;
		pos.top  -= offsetY || 0;

		pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
		pos.top  = pos.top  > 0 ? 0 : pos.top  < this.maxScrollY ? this.maxScrollY : pos.top;

		time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x-pos.left), Math.abs(this.y-pos.top)) : time;

		this.scrollTo(pos.left, pos.top, time, easing);
	},

	_transitionTime: function (time) {
		if (!this.options.useTransition) {
			return;
		}
		time = time || 0;
		var durationProp = utils.style.transitionDuration;
		if(!durationProp) {
			return;
		}

		this.scrollerStyle[durationProp] = time + 'ms';

		if ( !time && utils.isBadAndroid ) {
			this.scrollerStyle[durationProp] = '0.0001ms';
			// remove 0.0001ms
			var self = this;
			rAF(function() {
				if(self.scrollerStyle[durationProp] === '0.0001ms') {
					self.scrollerStyle[durationProp] = '0s';
				}
			});
		}


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTime(time);
			}
		}


// INSERT POINT: _transitionTime

	},

	_transitionTimingFunction: function (easing) {
		this.scrollerStyle[utils.style.transitionTimingFunction] = easing;


		if ( this.indicators ) {
			for ( var i = this.indicators.length; i--; ) {
				this.indicators[i].transitionTimingFunction(easing);
			}
		}


// INSERT POINT: _transitionTimingFunction

	},

	_translate: function (x, y) {
		if ( this.options.useTransform ) {

/* REPLACE START: _translate */

			this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

/* REPLACE END: _translate */

		} else {
			x = Math.round(x);
			y = Math.round(y);
			this.scrollerStyle.left = x + 'px';
			this.scrollerStyle.top = y + 'px';
		}

		this.x = x;
		this.y = y;


	if ( this.indicators ) {
		for ( var i = this.indicators.length; i--; ) {
			this.indicators[i].updatePosition();
		}
	}


// INSERT POINT: _translate

	},

	_initEvents: function (remove) {
		var eventType = remove ? utils.removeEvent : utils.addEvent,
			target = this.options.bindToWrapper ? this.wrapper : window;

		eventType(window, 'orientationchange', this);
		eventType(window, 'resize', this);

		if ( this.options.click ) {
			eventType(this.wrapper, 'click', this, true);
		}

		if ( !this.options.disableMouse ) {
			eventType(this.wrapper, 'mousedown', this);
			eventType(target, 'mousemove', this);
			eventType(target, 'mousecancel', this);
			eventType(target, 'mouseup', this);
		}

		if ( utils.hasPointer && !this.options.disablePointer ) {
			eventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);
			eventType(target, utils.prefixPointerEvent('pointermove'), this);
			eventType(target, utils.prefixPointerEvent('pointercancel'), this);
			eventType(target, utils.prefixPointerEvent('pointerup'), this);
		}

		if ( utils.hasTouch && !this.options.disableTouch ) {
			eventType(this.wrapper, 'touchstart', this);
			eventType(target, 'touchmove', this);
			eventType(target, 'touchcancel', this);
			eventType(target, 'touchend', this);
		}

		eventType(this.scroller, 'transitionend', this);
		eventType(this.scroller, 'webkitTransitionEnd', this);
		eventType(this.scroller, 'oTransitionEnd', this);
		eventType(this.scroller, 'MSTransitionEnd', this);
	},

	getComputedPosition: function () {
		var matrix = window.getComputedStyle(this.scroller, null),
			x, y;

		if ( this.options.useTransform ) {
			matrix = matrix[utils.style.transform].split(')')[0].split(', ');
			x = +(matrix[12] || matrix[4]);
			y = +(matrix[13] || matrix[5]);
		} else {
			x = +matrix.left.replace(/[^-\d.]/g, '');
			y = +matrix.top.replace(/[^-\d.]/g, '');
		}

		return { x: x, y: y };
	},
	_initIndicators: function () {
		var interactive = this.options.interactiveScrollbars,
			customStyle = typeof this.options.scrollbars != 'string',
			indicators = [],
			indicator;

		var that = this;

		this.indicators = [];

		if ( this.options.scrollbars ) {
			// Vertical scrollbar
			if ( this.options.scrollY ) {
				indicator = {
					el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeScrollbars,
					shrink: this.options.shrinkScrollbars,
					fade: this.options.fadeScrollbars,
					listenX: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}

			// Horizontal scrollbar
			if ( this.options.scrollX ) {
				indicator = {
					el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
					interactive: interactive,
					defaultScrollbars: true,
					customStyle: customStyle,
					resize: this.options.resizeScrollbars,
					shrink: this.options.shrinkScrollbars,
					fade: this.options.fadeScrollbars,
					listenY: false
				};

				this.wrapper.appendChild(indicator.el);
				indicators.push(indicator);
			}
		}

		if ( this.options.indicators ) {
			// TODO: check concat compatibility
			indicators = indicators.concat(this.options.indicators);
		}

		for ( var i = indicators.length; i--; ) {
			this.indicators.push( new Indicator(this, indicators[i]) );
		}

		// TODO: check if we can use array.map (wide compatibility and performance issues)
		function _indicatorsMap (fn) {
			if (that.indicators) {
				for ( var i = that.indicators.length; i--; ) {
					fn.call(that.indicators[i]);
				}
			}
		}

		if ( this.options.fadeScrollbars ) {
			this.on('scrollEnd', function () {
				_indicatorsMap(function () {
					this.fade();
				});
			});

			this.on('scrollCancel', function () {
				_indicatorsMap(function () {
					this.fade();
				});
			});

			this.on('scrollStart', function () {
				_indicatorsMap(function () {
					this.fade(1);
				});
			});

			this.on('beforeScrollStart', function () {
				_indicatorsMap(function () {
					this.fade(1, true);
				});
			});
		}


		this.on('refresh', function () {
			_indicatorsMap(function () {
				this.refresh();
			});
		});

		this.on('destroy', function () {
			_indicatorsMap(function () {
				this.destroy();
			});

			delete this.indicators;
		});
	},

	_initWheel: function () {
		utils.addEvent(this.wrapper, 'wheel', this);
		utils.addEvent(this.wrapper, 'mousewheel', this);
		utils.addEvent(this.wrapper, 'DOMMouseScroll', this);

		this.on('destroy', function () {
			clearTimeout(this.wheelTimeout);
			this.wheelTimeout = null;
			utils.removeEvent(this.wrapper, 'wheel', this);
			utils.removeEvent(this.wrapper, 'mousewheel', this);
			utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
		});
	},

	_wheel: function (e) {
		if ( !this.enabled ) {
			return;
		}

		e.preventDefault();

		var wheelDeltaX, wheelDeltaY,
			newX, newY,
			that = this;

		if ( this.wheelTimeout === undefined ) {
			that._execEvent('scrollStart');
		}

		// Execute the scrollEnd event after 400ms the wheel stopped scrolling
		clearTimeout(this.wheelTimeout);
		this.wheelTimeout = setTimeout(function () {
			if(!that.options.snap) {
				that._execEvent('scrollEnd');
			}
			that.wheelTimeout = undefined;
		}, 400);

		if ( 'deltaX' in e ) {
			if (e.deltaMode === 1) {
				wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;
				wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;
			} else {
				wheelDeltaX = -e.deltaX;
				wheelDeltaY = -e.deltaY;
			}
		} else if ( 'wheelDeltaX' in e ) {
			wheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;
			wheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
		} else if ( 'wheelDelta' in e ) {
			wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
		} else if ( 'detail' in e ) {
			wheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;
		} else {
			return;
		}

		wheelDeltaX *= this.options.invertWheelDirection;
		wheelDeltaY *= this.options.invertWheelDirection;

		if ( !this.hasVerticalScroll ) {
			wheelDeltaX = wheelDeltaY;
			wheelDeltaY = 0;
		}

		if ( this.options.snap ) {
			newX = this.currentPage.pageX;
			newY = this.currentPage.pageY;

			if ( wheelDeltaX > 0 ) {
				newX--;
			} else if ( wheelDeltaX < 0 ) {
				newX++;
			}

			if ( wheelDeltaY > 0 ) {
				newY--;
			} else if ( wheelDeltaY < 0 ) {
				newY++;
			}

			this.goToPage(newX, newY);

			return;
		}

		newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);
		newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);

		this.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;
		this.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;

		if ( newX > 0 ) {
			newX = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
		}

		if ( newY > 0 ) {
			newY = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
		}

		this.scrollTo(newX, newY, 0);

// INSERT POINT: _wheel
	},

	_initSnap: function () {
		this.currentPage = {};

		if ( typeof this.options.snap == 'string' ) {
			this.options.snap = this.scroller.querySelectorAll(this.options.snap);
		}

		this.on('refresh', function () {
			var i = 0, l,
				m = 0, n,
				cx, cy,
				x = 0, y,
				stepX = this.options.snapStepX || this.wrapperWidth,
				stepY = this.options.snapStepY || this.wrapperHeight,
				el;

			this.pages = [];

			if ( !this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight ) {
				return;
			}

			if ( this.options.snap === true ) {
				cx = Math.round( stepX / 2 );
				cy = Math.round( stepY / 2 );

				while ( x > -this.scrollerWidth ) {
					this.pages[i] = [];
					l = 0;
					y = 0;

					while ( y > -this.scrollerHeight ) {
						this.pages[i][l] = {
							x: Math.max(x, this.maxScrollX),
							y: Math.max(y, this.maxScrollY),
							width: stepX,
							height: stepY,
							cx: x - cx,
							cy: y - cy
						};

						y -= stepY;
						l++;
					}

					x -= stepX;
					i++;
				}
			} else {
				el = this.options.snap;
				l = el.length;
				n = -1;

				for ( ; i < l; i++ ) {
					if ( i === 0 || el[i].offsetLeft <= el[i-1].offsetLeft ) {
						m = 0;
						n++;
					}

					if ( !this.pages[m] ) {
						this.pages[m] = [];
					}

					x = Math.max(-el[i].offsetLeft, this.maxScrollX);
					y = Math.max(-el[i].offsetTop, this.maxScrollY);
					cx = x - Math.round(el[i].offsetWidth / 2);
					cy = y - Math.round(el[i].offsetHeight / 2);

					this.pages[m][n] = {
						x: x,
						y: y,
						width: el[i].offsetWidth,
						height: el[i].offsetHeight,
						cx: cx,
						cy: cy
					};

					if ( x > this.maxScrollX ) {
						m++;
					}
				}
			}

			this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

			// Update snap threshold if needed
			if ( this.options.snapThreshold % 1 === 0 ) {
				this.snapThresholdX = this.options.snapThreshold;
				this.snapThresholdY = this.options.snapThreshold;
			} else {
				this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
				this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
			}
		});

		this.on('flick', function () {
			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.x - this.startX), 1000),
						Math.min(Math.abs(this.y - this.startY), 1000)
					), 300);

			this.goToPage(
				this.currentPage.pageX + this.directionX,
				this.currentPage.pageY + this.directionY,
				time
			);
		});
	},

	_nearestSnap: function (x, y) {
		if ( !this.pages.length ) {
			return { x: 0, y: 0, pageX: 0, pageY: 0 };
		}

		var i = 0,
			l = this.pages.length,
			m = 0;

		// Check if we exceeded the snap threshold
		if ( Math.abs(x - this.absStartX) < this.snapThresholdX &&
			Math.abs(y - this.absStartY) < this.snapThresholdY ) {
			return this.currentPage;
		}

		if ( x > 0 ) {
			x = 0;
		} else if ( x < this.maxScrollX ) {
			x = this.maxScrollX;
		}

		if ( y > 0 ) {
			y = 0;
		} else if ( y < this.maxScrollY ) {
			y = this.maxScrollY;
		}

		for ( ; i < l; i++ ) {
			if ( x >= this.pages[i][0].cx ) {
				x = this.pages[i][0].x;
				break;
			}
		}

		l = this.pages[i].length;

		for ( ; m < l; m++ ) {
			if ( y >= this.pages[0][m].cy ) {
				y = this.pages[0][m].y;
				break;
			}
		}

		if ( i == this.currentPage.pageX ) {
			i += this.directionX;

			if ( i < 0 ) {
				i = 0;
			} else if ( i >= this.pages.length ) {
				i = this.pages.length - 1;
			}

			x = this.pages[i][0].x;
		}

		if ( m == this.currentPage.pageY ) {
			m += this.directionY;

			if ( m < 0 ) {
				m = 0;
			} else if ( m >= this.pages[0].length ) {
				m = this.pages[0].length - 1;
			}

			y = this.pages[0][m].y;
		}

		return {
			x: x,
			y: y,
			pageX: i,
			pageY: m
		};
	},

	goToPage: function (x, y, time, easing) {
		easing = easing || this.options.bounceEasing;

		if ( x >= this.pages.length ) {
			x = this.pages.length - 1;
		} else if ( x < 0 ) {
			x = 0;
		}

		if ( y >= this.pages[x].length ) {
			y = this.pages[x].length - 1;
		} else if ( y < 0 ) {
			y = 0;
		}

		var posX = this.pages[x][y].x,
			posY = this.pages[x][y].y;

		time = time === undefined ? this.options.snapSpeed || Math.max(
			Math.max(
				Math.min(Math.abs(posX - this.x), 1000),
				Math.min(Math.abs(posY - this.y), 1000)
			), 300) : time;

		this.currentPage = {
			x: posX,
			y: posY,
			pageX: x,
			pageY: y
		};

		this.scrollTo(posX, posY, time, easing);
	},

	next: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x++;

		if ( x >= this.pages.length && this.hasVerticalScroll ) {
			x = 0;
			y++;
		}

		this.goToPage(x, y, time, easing);
	},

	prev: function (time, easing) {
		var x = this.currentPage.pageX,
			y = this.currentPage.pageY;

		x--;

		if ( x < 0 && this.hasVerticalScroll ) {
			x = 0;
			y--;
		}

		this.goToPage(x, y, time, easing);
	},

	_initKeys: function (e) {
		// default key bindings
		var keys = {
			pageUp: 33,
			pageDown: 34,
			end: 35,
			home: 36,
			left: 37,
			up: 38,
			right: 39,
			down: 40
		};
		var i;

		// if you give me characters I give you keycode
		if ( typeof this.options.keyBindings == 'object' ) {
			for ( i in this.options.keyBindings ) {
				if ( typeof this.options.keyBindings[i] == 'string' ) {
					this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
				}
			}
		} else {
			this.options.keyBindings = {};
		}

		for ( i in keys ) {
			this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
		}

		utils.addEvent(window, 'keydown', this);

		this.on('destroy', function () {
			utils.removeEvent(window, 'keydown', this);
		});
	},

	_key: function (e) {
		if ( !this.enabled ) {
			return;
		}

		var snap = this.options.snap,	// we are using this alot, better to cache it
			newX = snap ? this.currentPage.pageX : this.x,
			newY = snap ? this.currentPage.pageY : this.y,
			now = utils.getTime(),
			prevTime = this.keyTime || 0,
			acceleration = 0.250,
			pos;

		if ( this.options.useTransition && this.isInTransition ) {
			pos = this.getComputedPosition();

			this._translate(Math.round(pos.x), Math.round(pos.y));
			this.isInTransition = false;
		}

		this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

		switch ( e.keyCode ) {
			case this.options.keyBindings.pageUp:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX += snap ? 1 : this.wrapperWidth;
				} else {
					newY += snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.pageDown:
				if ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {
					newX -= snap ? 1 : this.wrapperWidth;
				} else {
					newY -= snap ? 1 : this.wrapperHeight;
				}
				break;
			case this.options.keyBindings.end:
				newX = snap ? this.pages.length-1 : this.maxScrollX;
				newY = snap ? this.pages[0].length-1 : this.maxScrollY;
				break;
			case this.options.keyBindings.home:
				newX = 0;
				newY = 0;
				break;
			case this.options.keyBindings.left:
				newX += snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.up:
				newY += snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.right:
				newX -= snap ? -1 : 5 + this.keyAcceleration>>0;
				break;
			case this.options.keyBindings.down:
				newY -= snap ? 1 : 5 + this.keyAcceleration>>0;
				break;
			default:
				return;
		}

		if ( snap ) {
			this.goToPage(newX, newY);
			return;
		}

		if ( newX > 0 ) {
			newX = 0;
			this.keyAcceleration = 0;
		} else if ( newX < this.maxScrollX ) {
			newX = this.maxScrollX;
			this.keyAcceleration = 0;
		}

		if ( newY > 0 ) {
			newY = 0;
			this.keyAcceleration = 0;
		} else if ( newY < this.maxScrollY ) {
			newY = this.maxScrollY;
			this.keyAcceleration = 0;
		}

		this.scrollTo(newX, newY, 0);

		this.keyTime = now;
	},

	_animate: function (destX, destY, duration, easingFn) {
		var that = this,
			startX = this.x,
			startY = this.y,
			startTime = utils.getTime(),
			destTime = startTime + duration;

		function step () {
			var now = utils.getTime(),
				newX, newY,
				easing;

			if ( now >= destTime ) {
				that.isAnimating = false;
				that._translate(destX, destY);

				if ( !that.resetPosition(that.options.bounceTime) ) {
					that._execEvent('scrollEnd');
				}

				return;
			}

			now = ( now - startTime ) / duration;
			easing = easingFn(now);
			newX = ( destX - startX ) * easing + startX;
			newY = ( destY - startY ) * easing + startY;
			that._translate(newX, newY);

			if ( that.isAnimating ) {
				rAF(step);
			}
		}

		this.isAnimating = true;
		step();
	},
	handleEvent: function (e) {
		switch ( e.type ) {
			case 'touchstart':
			case 'pointerdown':
			case 'MSPointerDown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'pointermove':
			case 'MSPointerMove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'pointerup':
			case 'MSPointerUp':
			case 'mouseup':
			case 'touchcancel':
			case 'pointercancel':
			case 'MSPointerCancel':
			case 'mousecancel':
				this._end(e);
				break;
			case 'orientationchange':
			case 'resize':
				this._resize();
				break;
			case 'transitionend':
			case 'webkitTransitionEnd':
			case 'oTransitionEnd':
			case 'MSTransitionEnd':
				this._transitionEnd(e);
				break;
			case 'wheel':
			case 'DOMMouseScroll':
			case 'mousewheel':
				this._wheel(e);
				break;
			case 'keydown':
				this._key(e);
				break;
			case 'click':
				if ( this.enabled && !e._constructed ) {
					e.preventDefault();
					e.stopPropagation();
				}
				break;
		}
	}
};
function createDefaultScrollbar (direction, interactive, type) {
	var scrollbar = document.createElement('div'),
		indicator = document.createElement('div');

	if ( type === true ) {
		scrollbar.style.cssText = 'position:absolute;z-index:9999';
		indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';
	}

	indicator.className = 'iScrollIndicator';

	if ( direction == 'h' ) {
		if ( type === true ) {
			scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
			indicator.style.height = '100%';
		}
		scrollbar.className = 'iScrollHorizontalScrollbar';
	} else {
		if ( type === true ) {
			scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
			indicator.style.width = '100%';
		}
		scrollbar.className = 'iScrollVerticalScrollbar';
	}

	scrollbar.style.cssText += ';overflow:hidden';

	if ( !interactive ) {
		scrollbar.style.pointerEvents = 'none';
	}

	scrollbar.appendChild(indicator);

	return scrollbar;
}

function Indicator (scroller, options) {
	this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
	this.wrapperStyle = this.wrapper.style;
	this.indicator = this.wrapper.children[0];
	this.indicatorStyle = this.indicator.style;
	this.scroller = scroller;

	this.options = {
		listenX: true,
		listenY: true,
		interactive: false,
		resize: true,
		defaultScrollbars: false,
		shrink: false,
		fade: false,
		speedRatioX: 0,
		speedRatioY: 0
	};

	for ( var i in options ) {
		this.options[i] = options[i];
	}

	this.sizeRatioX = 1;
	this.sizeRatioY = 1;
	this.maxPosX = 0;
	this.maxPosY = 0;

	if ( this.options.interactive ) {
		if ( !this.options.disableTouch ) {
			utils.addEvent(this.indicator, 'touchstart', this);
			utils.addEvent(window, 'touchend', this);
		}
		if ( !this.options.disablePointer ) {
			utils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
			utils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(this.indicator, 'mousedown', this);
			utils.addEvent(window, 'mouseup', this);
		}
	}

	if ( this.options.fade ) {
		this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
		var durationProp = utils.style.transitionDuration;
		if(!durationProp) {
			return;
		}
		this.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms';
		// remove 0.0001ms
		var self = this;
		if(utils.isBadAndroid) {
			rAF(function() {
				if(self.wrapperStyle[durationProp] === '0.0001ms') {
					self.wrapperStyle[durationProp] = '0s';
				}
			});
		}
		this.wrapperStyle.opacity = '0';
	}
}

Indicator.prototype = {
	handleEvent: function (e) {
		switch ( e.type ) {
			case 'touchstart':
			case 'pointerdown':
			case 'MSPointerDown':
			case 'mousedown':
				this._start(e);
				break;
			case 'touchmove':
			case 'pointermove':
			case 'MSPointerMove':
			case 'mousemove':
				this._move(e);
				break;
			case 'touchend':
			case 'pointerup':
			case 'MSPointerUp':
			case 'mouseup':
			case 'touchcancel':
			case 'pointercancel':
			case 'MSPointerCancel':
			case 'mousecancel':
				this._end(e);
				break;
		}
	},

	destroy: function () {
		if ( this.options.fadeScrollbars ) {
			clearTimeout(this.fadeTimeout);
			this.fadeTimeout = null;
		}
		if ( this.options.interactive ) {
			utils.removeEvent(this.indicator, 'touchstart', this);
			utils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
			utils.removeEvent(this.indicator, 'mousedown', this);

			utils.removeEvent(window, 'touchmove', this);
			utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
			utils.removeEvent(window, 'mousemove', this);

			utils.removeEvent(window, 'touchend', this);
			utils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);
			utils.removeEvent(window, 'mouseup', this);
		}

		if ( this.options.defaultScrollbars ) {
			this.wrapper.parentNode.removeChild(this.wrapper);
		}
	},

	_start: function (e) {
		var point = e.touches ? e.touches[0] : e;

		e.preventDefault();
		e.stopPropagation();

		this.transitionTime();

		this.initiated = true;
		this.moved = false;
		this.lastPointX	= point.pageX;
		this.lastPointY	= point.pageY;

		this.startTime	= utils.getTime();

		if ( !this.options.disableTouch ) {
			utils.addEvent(window, 'touchmove', this);
		}
		if ( !this.options.disablePointer ) {
			utils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);
		}
		if ( !this.options.disableMouse ) {
			utils.addEvent(window, 'mousemove', this);
		}

		this.scroller._execEvent('beforeScrollStart');
	},

	_move: function (e) {
		var point = e.touches ? e.touches[0] : e,
			deltaX, deltaY,
			newX, newY,
			timestamp = utils.getTime();

		if ( !this.moved ) {
			this.scroller._execEvent('scrollStart');
		}

		this.moved = true;

		deltaX = point.pageX - this.lastPointX;
		this.lastPointX = point.pageX;

		deltaY = point.pageY - this.lastPointY;
		this.lastPointY = point.pageY;

		newX = this.x + deltaX;
		newY = this.y + deltaY;

		this._pos(newX, newY);

// INSERT POINT: indicator._move

		e.preventDefault();
		e.stopPropagation();
	},

	_end: function (e) {
		if ( !this.initiated ) {
			return;
		}

		this.initiated = false;

		e.preventDefault();
		e.stopPropagation();

		utils.removeEvent(window, 'touchmove', this);
		utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
		utils.removeEvent(window, 'mousemove', this);

		if ( this.scroller.options.snap ) {
			var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

			var time = this.options.snapSpeed || Math.max(
					Math.max(
						Math.min(Math.abs(this.scroller.x - snap.x), 1000),
						Math.min(Math.abs(this.scroller.y - snap.y), 1000)
					), 300);

			if ( this.scroller.x != snap.x || this.scroller.y != snap.y ) {
				this.scroller.directionX = 0;
				this.scroller.directionY = 0;
				this.scroller.currentPage = snap;
				this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
			}
		}

		if ( this.moved ) {
			this.scroller._execEvent('scrollEnd');
		}
	},

	transitionTime: function (time) {
		time = time || 0;
		var durationProp = utils.style.transitionDuration;
		if(!durationProp) {
			return;
		}

		this.indicatorStyle[durationProp] = time + 'ms';

		if ( !time && utils.isBadAndroid ) {
			this.indicatorStyle[durationProp] = '0.0001ms';
			// remove 0.0001ms
			var self = this;
			rAF(function() {
				if(self.indicatorStyle[durationProp] === '0.0001ms') {
					self.indicatorStyle[durationProp] = '0s';
				}
			});
		}
	},

	transitionTimingFunction: function (easing) {
		this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
	},

	refresh: function () {
		this.transitionTime();

		if ( this.options.listenX && !this.options.listenY ) {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
		} else if ( this.options.listenY && !this.options.listenX ) {
			this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
		} else {
			this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
		}

		if ( this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll ) {
			utils.addClass(this.wrapper, 'iScrollBothScrollbars');
			utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '8px';
				} else {
					this.wrapper.style.bottom = '8px';
				}
			}
		} else {
			utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
			utils.addClass(this.wrapper, 'iScrollLoneScrollbar');

			if ( this.options.defaultScrollbars && this.options.customStyle ) {
				if ( this.options.listenX ) {
					this.wrapper.style.right = '2px';
				} else {
					this.wrapper.style.bottom = '2px';
				}
			}
		}

		var r = this.wrapper.offsetHeight;	// force refresh

		if ( this.options.listenX ) {
			this.wrapperWidth = this.wrapper.clientWidth;
			if ( this.options.resize ) {
				this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
				this.indicatorStyle.width = this.indicatorWidth + 'px';
			} else {
				this.indicatorWidth = this.indicator.clientWidth;
			}

			this.maxPosX = this.wrapperWidth - this.indicatorWidth;

			if ( this.options.shrink == 'clip' ) {
				this.minBoundaryX = -this.indicatorWidth + 8;
				this.maxBoundaryX = this.wrapperWidth - 8;
			} else {
				this.minBoundaryX = 0;
				this.maxBoundaryX = this.maxPosX;
			}

			this.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX));
		}

		if ( this.options.listenY ) {
			this.wrapperHeight = this.wrapper.clientHeight;
			if ( this.options.resize ) {
				this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
				this.indicatorStyle.height = this.indicatorHeight + 'px';
			} else {
				this.indicatorHeight = this.indicator.clientHeight;
			}

			this.maxPosY = this.wrapperHeight - this.indicatorHeight;

			if ( this.options.shrink == 'clip' ) {
				this.minBoundaryY = -this.indicatorHeight + 8;
				this.maxBoundaryY = this.wrapperHeight - 8;
			} else {
				this.minBoundaryY = 0;
				this.maxBoundaryY = this.maxPosY;
			}

			this.maxPosY = this.wrapperHeight - this.indicatorHeight;
			this.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY));
		}

		this.updatePosition();
	},

	updatePosition: function () {
		var x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,
			y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;

		if ( !this.options.ignoreBoundaries ) {
			if ( x < this.minBoundaryX ) {
				if ( this.options.shrink == 'scale' ) {
					this.width = Math.max(this.indicatorWidth + x, 8);
					this.indicatorStyle.width = this.width + 'px';
				}
				x = this.minBoundaryX;
			} else if ( x > this.maxBoundaryX ) {
				if ( this.options.shrink == 'scale' ) {
					this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);
					this.indicatorStyle.width = this.width + 'px';
					x = this.maxPosX + this.indicatorWidth - this.width;
				} else {
					x = this.maxBoundaryX;
				}
			} else if ( this.options.shrink == 'scale' && this.width != this.indicatorWidth ) {
				this.width = this.indicatorWidth;
				this.indicatorStyle.width = this.width + 'px';
			}

			if ( y < this.minBoundaryY ) {
				if ( this.options.shrink == 'scale' ) {
					this.height = Math.max(this.indicatorHeight + y * 3, 8);
					this.indicatorStyle.height = this.height + 'px';
				}
				y = this.minBoundaryY;
			} else if ( y > this.maxBoundaryY ) {
				if ( this.options.shrink == 'scale' ) {
					this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);
					this.indicatorStyle.height = this.height + 'px';
					y = this.maxPosY + this.indicatorHeight - this.height;
				} else {
					y = this.maxBoundaryY;
				}
			} else if ( this.options.shrink == 'scale' && this.height != this.indicatorHeight ) {
				this.height = this.indicatorHeight;
				this.indicatorStyle.height = this.height + 'px';
			}
		}

		this.x = x;
		this.y = y;

		if ( this.scroller.options.useTransform ) {
			this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
		} else {
			this.indicatorStyle.left = x + 'px';
			this.indicatorStyle.top = y + 'px';
		}
	},

	_pos: function (x, y) {
		if ( x < 0 ) {
			x = 0;
		} else if ( x > this.maxPosX ) {
			x = this.maxPosX;
		}

		if ( y < 0 ) {
			y = 0;
		} else if ( y > this.maxPosY ) {
			y = this.maxPosY;
		}

		x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
		y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

		this.scroller.scrollTo(x, y);
	},

	fade: function (val, hold) {
		if ( hold && !this.visible ) {
			return;
		}

		clearTimeout(this.fadeTimeout);
		this.fadeTimeout = null;

		var time = val ? 250 : 500,
			delay = val ? 0 : 300;

		val = val ? '1' : '0';

		this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';

		this.fadeTimeout = setTimeout((function (val) {
			this.wrapperStyle.opacity = val;
			this.visible = +val;
		}).bind(this, val), delay);
	}
};

IScroll.utils = utils;

if ( typeof module != 'undefined' && module.exports ) {
	module.exports = IScroll;
} else if ( typeof define == 'function' && define.amd ) {
        define( 'gsIscroll',[],function () { return IScroll; } );
} else {
	window.IScroll = IScroll;
}

})(window, document, Math);

/*
*   接框架百度地图， 文档： https://conf.ctripcorp.com/pages/viewpage.action?pageId=74093177
*   cbzhang
*/

define('gsCommonMap',[
    'cMap',
    'cGeoService'
], function (
    cMap,
    cGeoService
) {
    
    /*
    * 地图调用参数
    * @params:
    *     callback: 回调函数
    *     isChina: 是否中国，中国用百度地图，海外用谷歌地图
    *     mapInitFun: 地图初始化后的回调函数
    *     mapMoveFun: 触摸回调函数
    *     markerIcon: 默认marker的图标
    *     currentIcon:默认当前位置图标
    */
    var MapInit = function (params) {
        var self = this,
            callback = params.callback || "";

        /*----------------------------------这里的属性设置很重要----------------------------------*/
        self.isChina = params.isChina;
        self.mapType = params.isChina?"BMap":"BMap"; //国内使用百度， 国外使用高德
        /*----------------------------------这里的属性设置很重要----------------------------------*/

        //国内显示百度地图, 国外显示Google地图
        cMap.loadMapScript(self.mapType, function(){
            callback();
        });
    };

    MapInit.prototype = {
        init: function (params) {
            /*----------------------------------这里的属性设置很重要----------------------------------*/
            this.markerClicked = params.markerClicked||"";
            this.infoClicked = params.infoClicked||"";
            this.showMarker = params.showMarker || 0;
            this.showInfo = params.showInfo || 0;
            this.mapInitFun = params.mapInitFun || "";
            this.mapMoveFun = params.mapMoveFun || "";
            this.markerIcon = params.markerIcon || "https://pic.c-ctrip.com/h5/hotel/hotel-map-locate.png";
            this.currentIcon = params.currentIcon || "";
            this.infoWindowClass = params.infoWindowClass;
            this.markerSize = params.markerSize || {w:22,h:31};
            this.markerOffset = params.markerOffset || {w:0,h:0};
            this.infoOffset = params.infoOffset || {x:-22, y: this.showMarker ? -67 : -52};
            /*----------------------------------这里的属性设置很重要----------------------------------*/

            var self = this,
                lat = params.lat || (params.options[0] && params.options[0].lat) || 31.2316409,
                lng = params.lng || (params.options[0] && params.options[0].lng) || 121.4572466
                options = {
                    id : params.id || "js_map",
                    lat : lat || "0",
                    lng : lng|| "0",
                    zoom : params.zoom || 15,
                    isBMap : true
                };

            self.gsMap = cMap.createMap(options, self.mapType);

            if(params.options && params.options.length > 0){
                self.createMarkers(params.options, true);
            }

            if (typeof (self.mapInitFun) == "function") {
                self.mapInitFun(self.gsMap);
            }

            if (typeof (self.mapMoveFun) == "function") {
                cMap.addEventListener(self.gsMap,"moveend",function(e){
                    self.mapMoveFun(self.gsMap);
                });
            }
        },

        createMarkers: function(locations, fitBounds){
            if(!locations || locations.length==0){
                return;
            }
            var self = this, markers=[];

            if(self.showMarker){
                for(var i=0; i<locations.length; i++){
                    markers.push({
                        lat:locations[i].lat,
                        lng:locations[i].lng,
                        isBMap:true,
                        icon:{
                            url: locations[i].icon ? (locations[i].icon.icon || self.markerIcon) : self.markerIcon,
                            size:locations.markerSize || self.markerSize
                        },
                        offset: self.markerOffset
                    });
                }

                self.markersArr  = cMap.createMarkers(markers);
                cMap.showOverLays(self.markersArr); 

                // for(var i=0; i<self.markersArr.length; i++){
                //     self.markersArr[i].setAnimation(BMAP_ANIMATION_DROP);
                // }
            }
            
            var overlays = [];
            for(var j=0; j<locations.length; j++){
                if (locations[j].text) {
                    overlays.push({
                        "lat" : locations[j].lat,
                        "lng" : locations[j].lng,
                        content :'<div class="' + self.infoWindowClass + ' ' + "info_" + j + '">' + locations[j].text + '</div>',
                        isBMap:true,
                        index:j,
                        offset:locations[j].infoOffset || self.infoOffset,
                        callBack:function(data){
                            (typeof (self.infoClicked) == "function") && self.infoClicked(data.index);
                        }
                    });
                }
            }

            if(overlays.length > 0){
                self.overylaysArr = cMap.createCustomOverlays(overlays);  //返回值为overlay的数组对象
                if(self.showInfo){
                    cMap.showOverLays(self.overylaysArr); //overlay展示在地图上
                }
            }

            // if(fitBounds){
            //    self.fitBounds(locations); 
            // }

            if (typeof (self.markerClicked) == "function" && self.markersArr) {
                for(var j=0; j<self.markersArr.length; j++){
                    if ((locations[j].icon && parseInt(locations[j].icon.type, 0) != 1) || !locations[j].icon) {
                        cMap.addEventListener(self.markersArr[j],"click", (function(index){
                            return function(){
                                self.markerClicked(index)
                            };
                        })(j));
                    }
                }
            }
        },

        showOverylaysArr: function(index){
            var currentOverlay = this.overylaysArr[index];

            if(currentOverlay.isVisible()){
                cMap.hideOverlays([currentOverlay]);
            }else{
                cMap.hideOverlays(this.overylaysArr);
                cMap.showOverLays([currentOverlay]);
            }
        },

        mapUpdateMark: function(locations){
            var self = this;
            self.mapClear();
            self.createMarkers(locations);
        },

        getDistance: function () {
            var self = this, 
                distance = "",
                sw = cMap.getBounds().SW,
                ne = cMap.getBounds().NE;
            
            var distancePoints = cMap.createPoints([sw, ne])
                distance = cMap.getDistance && cMap.getDistance(distancePoints[0], distancePoints[1], self.gsMap),
                centerPoint = cMap.getCenter(); //米

            if(true){
                centerPoint = cMap.bMapToAMap(centerPoint);
            }

            var options = {
                    "Distance": distance,
                    "Lng": cMap.getCenter().lng,
                    "Lat": cMap.getCenter().lat
                };

            return options;
        },

        mapClear: function () {
            var self = this;
            cMap.hideOverlays(self.markersArr);
            cMap.hideOverlays(self.overylaysArr);
            $(".BMap_Marker").remove(); //暂时解决方案
        },

        mapGetCurrentPosition: function(params){
            var self = this;

            var success = params.onComplete || function(){},
                failure = params.onError || function(){},
                events = {
                    onComplete: function(data){

                        var points = cMap.createPoints([{
                            lat:data.lat,
                            lng:data.lng,
                            isBMap:true
                        }]);
                        cMap.setCenter(points[0]);

                        success();
                    },

                    onError: failure,
                    onPosError : failure
                };
            cGeoService.GeoLocation.Subscribe("GSMapGetCurrentLocation",events, "", true, 3000, true);
        },

        setCenterPoint: function(){
            var self = this;
            cMap.showOverLays(cMap.createMarkers([{
                lat:cMap.getCenter().lat,
                lng:cMap.getCenter().lng,
                isBMap:true,
                icon:{
                    url: self.markerIcon,
                    contentSize:{w:30,h:30}, //在地图显示区域的大小
                    size:{w:22,h:31}, //按照图片的宽高比例进行压缩
                    anchor:{w:11,h:15}
                }
            }])); 
        },

        setZoom: function(zoom){
            this.gsMap.setZoom(zoom);
        },

        fitBounds: function(latlons){
            var points = cMap.createPoints(latlons);
            cMap.fitBounds(points);
        },

        setCenter: function(latlons){
            var points = cMap.createPoints(latlons);
            cMap.setCenter(points[0]);
        },

        getCenter: function(){
            return cMap.getCenter(); 
        },

        getPointAddress: function(point,callback){
            var _address = '';
            var callback = callback || function(){};
            if(cMap.mapType ==  "BMap" && !!BMap){
                var myGeo = new BMap.Geocoder(); 
                myGeo.getLocation(new BMap.Point(point.lng, point.lat), function(result){   
                    if(result){
                        _address = result.address;
                        callback(_address);
                    }else{
                        callback();
                    }   
                });
            }else{
                callback();
            }
            
        }
    }

    return MapInit;
});
/**
 * Created by shuoxu on 2016/6/14.
 */
define('gsGoToHome',[
    'cPageView',
    'gsAppAgent',
    'gsCommonStore',
    'gsRouterRedirect',
    'gsBusinessJob'

],function(
    BasePageView,
    appAgent,
    gsCommonStore,
    routerRedirect,
    businessJob
){
    var gotoHomeBox = {
        goToHomeClickStore: gsCommonStore.ifToGsHomeClick.getInstance(),
        goToHomeStore: gsCommonStore.ifToGsHome.getInstance(),

        //events: {
        //    //底部gotohome盒子
        //    'click .js_toGsHome': 'toGsHome',
        //    'click .js_close_toHome_box': 'closeToHomeBox'
        //},

        goToHome: function () {
            var self = this;
            if(!appAgent.isGsHybrid() && !Lizard.P('hideBrandTip'))
            {
                if(Lizard.isHybrid || Lizard.isInCtripApp)
                {
                    self.getUserHis(function(datas){
                        if(datas && datas.param && datas.param.context){
                            var nowTime = new Date().getTime();
                            var userHistorys = datas.param.context;
                            if(typeof userHistorys != 'object'){
                                userHistorys = JSON.parse(userHistorys);
                            }
                                if (nowTime - userHistorys.ifToGsHome <= 3 * 24 * 3600 * 1000) {
                                    $(".js-bottom-goto-mdd").css({'display': 'none'});
                                }
                                if(nowTime - userHistorys.ifToGsHomeClick <= 5 * 24 * 3600 * 1000) {
                                    $(".js-bottom-goto-mdd").css({'display': 'none'});
                                }
                                if(nowTime - userHistorys.ifToGsHome > 3 * 24 * 3600 *1000 && nowTime - userHistorys.ifToGsHomeClick > 5 * 24 * 3600 * 1000)
                                {
                                    $(".js-bottom-goto-mdd").css({'display': 'box','display': '-webkit-box','display': '-webkit-flex','display': 'flex'});
                                    setTimeout(function () {
                                        $(".js-bottom-goto-mdd").css({'display': 'none'});
                                        self.setUserHis('ifToGsHome',{
                                            ifToGsHome:new Date().getTime(),
                                            //ifToGsHome:'asdasd',
                                            ifToGsHomeClick:0
                                        });
                                    }, 5000);
                                }

                        }else{
                            $(".js-bottom-goto-mdd").css({'display': 'box','display': '-webkit-box','display': '-webkit-flex','display': 'flex'});
                            setTimeout(function () {
                                $(".js-bottom-goto-mdd").css({'display': 'none'});
                                self.setUserHis('ifToGsHome',{
                                    ifToGsHome :  new Date().getTime(),
                                    ifToGsHomeClick : 0
                                });
                            }, 5000);
                        }
                    },'ifToGsHome');
                }else{
                    //判断底部gotohome盒子是否显示
                    if (self.goToHomeStore.get() || self.goToHomeClickStore.get()) {
                        $(".js-bottom-goto-mdd").css({'display': 'none'});
                    }else{
                        $(".js-bottom-goto-mdd").css({'display': 'box','display': '-webkit-box','display': '-webkit-flex','display': 'flex'});
                    }

                    setTimeout(function () {
                        $(".js-bottom-goto-mdd").css({'display': 'none'});
                        if (!self.goToHomeClickStore.get() && !self.goToHomeStore.get()) {
                            self.goToHomeStore.set(1);
                        }
                    }, 5000);
                }
            }

            $('.js_toGsHome').click(function(){
                routerRedirect.toJump({
                    url: ['/webapp/you/','/destination/toHome'],
                    targetModel: 1
                });
            });

            $('.js_close_toHome_box').click(function(){

                $('.js-bottom-goto-mdd').hide();

                if(Lizard.isHybrid || Lizard.isInCtripApp){
                    self.setUserHis('ifToGsHome',{
                        ifToGsHome:0,
                        ifToGsHomeClick:new Date().getTime()
                    });
                }else{
                    self.goToHomeClickStore.set(1);
                }
            })

        },
        //cleanHistory:function(){
        //    this.setUserHis('ifToGsHome',{
        //        ifToGsHome :  1,
        //        ifToGsHomeClick : 1
        //    });
        //},

        /**
         **获取存储数据
         **@param callfn 获取成功的回调函数
         **@param keyName, 存储时的key名字
         **/
        getUserHis: function(callfn,keyName){
            if(Lizard.isHybrid || Lizard.isInCtripApp){
                businessJob.doBusinessJob({
                    businessCode : 801001,
                    data:{
                        "type": 1,                  //0为put  1为get
                        "key": keyName              //key 为键
                    },
                    callback: function(res){
                        callfn && callfn(res);
                    }
                });
            }
        },

        /**
         **@app记录用户在四大poi的浏览历史，用于获取点评列表
         **@param thisPoi，poi信息{"PoiId": 1111,setTime": "时间的毫秒数"}
         **/
        setUserHis: function(keyName,val){
            if(Lizard.isHybrid || Lizard.isInCtripApp){
                var callbackType = -1;
                businessJob.doBusinessJob({
                    businessCode : 801001,
                    data:{
                        "type": 1,                  //0为put  1为get
                        "key": keyName              //key 为键
                    },
                    callback: function(res){
                        if (0 == callbackType) {
                            return;
                        }
                        if (res.param && res.param.context) {

                            var userHistorys = res.param.context,
                                flag = false;
                            if(typeof userHistorys != 'object'){
                                userHistorys = JSON.parse(userHistorys);
                            }
                            //alert(userHistorys.ifToGsHome);
                                //如果已经存在直接更新储存时间
                                if (userHistorys.ifToGsHome != 0) {
                                    flag = true;
                                    userHistorys.ifToGsHome = new Date().getTime();
                                }
                                if(userHistorys.ifToGsHomeClick != 0){
                                    flag = true;
                                    userHistorys.ifToGsHomeClick = new Date().getTime();
                                }
                            if(userHistorys.ifToGsHome == 0 && userHistorys.ifToGsHomeClick == 0){
                                flag = true;
                                userHistorys.ifToGsHome = new Date().getTime();
                            }
                            callbackType = 0;
                            CtripBusiness.app_do_business_job(6, 801001, {
                                "type": 0,                  //0为put  1为get
                                "key": keyName,      //key 为键
                                "context": userHistorys,   //context 为值
                                "expiry": 6*24*3600           //0为永不过期   单位为秒
                            },"noCallBack");
                        } else {
                           callbackType = 0;
                            CtripBusiness.app_do_business_job(6,801001,{
                                "type": 0,                  //0为put  1为get
                                "key": keyName,      //key 为键
                                "context": val,      //context 为值
                                "expiry": 6*24*3600          //0为永不过期   单位为秒
                            },"noCallBack");
                        }
                    }
                });
                
                callbackType = 1;
            }
        }
    };

    return gotoHomeBox;
});
define('gsHistory',[
		'cHybridShell',
		'gsAppAgent',
		'gsRouterRedirect'
		], 
	function(
		cHybridShell,
		appAgent,
		routerRedirect
		){
	var history = {
		showHistory: function(param){
			param = param || {};
			var self = this;
            if(appAgent.isHybrid() && appAgent.compareAppVersion("6.18") < 1 && appAgent.compareAppVersion("7.4") === 1){ //6.18及之后才显示历史
            	if(!($(".history_footprint") && $(".history_footprint").length > 0)){
            		var imgUrl = "https://pages.c-ctrip.com/you/opt/icon-footprint-b.png";
            		if(appAgent.compareAppVersion("6.20") <= 0){//6.20之后换新标
            			imgUrl = "https://pages.c-ctrip.com/you/opt/icon-footprint-c.png";
            		}else if(appAgent.compareAppVersion("6.18") < 0){ 
            			imgUrl = "https://pages.c-ctrip.com/you/opt/icon-footprint-a.png";
            		}
            		if(appAgent.compareAppVersion("7.0") <= 0){
            			imgUrl = "https://pages.c-ctrip.com/you/opt/icon-footprint-d.png";
            			$("body").append('<div id="c_history" class="history_footprint" style="position: fixed;right: 8px;bottom: ' + (param.bottom || 10) + 'px;z-index: ' + (param.zindex || 6) + ';width: 60px;height: 60px;background: url('+imgUrl+') no-repeat;background-size: contain;cursor: pointer;""></div>');
            		}else{
		            	$("body").append('<div id="c_history" class="history_footprint" style="position: fixed;right: 8px;bottom: ' + (param.bottom || 10) + 'px;z-index: ' + (param.zindex || 6) + ';width: 50px;height: 50px;background: url('+imgUrl+') no-repeat;background-size: contain;cursor: pointer;""></div>');
		            }
	            	$('body').delegate(".history_footprint", 'click', function (e) {
			            self.showHistoryMenu();
			            e.stopPropagation();
			        });
	            }
            }
		},

		showHistoryMenu: function(){
			routerRedirect.ForwardPage({
                urls: [ 
                        Lizard.H5BaseUrl,
                        'ctrip://wireless/destination/showFootPrint'
                    ],
                targetModel: 1
            });
		},

		saveHistory: function(history){
		    var self = this;
		    var type,obj;
		    if (typeof(history.type)!='undefined' && history.type == 0) {
		        type = history.type;
		        obj = {
		            "jumpSchema": history.jumpSchema || "",
		            "displayContent":history.displayContent || "",
		            "type": 0,
		            "districtId": history.districtId || 0
		        }
		    } else if (typeof (history.type) != 'undefined' && history.type != 0) {
		        type = history.type;
		        obj = {
		            "jumpSchema": history.jumpSchema || "",
		            "displayContent": history.displayContent || "",
		            "subTitle": history.subTitle || "",
		            "type": type,
		            //7.6加入足迹需要多传入一个地图的schema
		            "mapSchema": history.mapSchema || "",
		            "districtId": history.districtId || 0
		        }
		    }
            if(appAgent.isHybrid() && appAgent.compareAppVersion("6.18") < 1){ //6.18及之后才显示历史
                CtripBusiness.app_do_business_job(6, 80012, obj, "noCallBack");
            }
		}
	};

	return history;
});
define('gsImgUpLoader',[],function () {
    var TIME_OUT = 600000;//超时时间

    var getUploadUrl = function () {
        var host = window.location.host;
        if(/\.uat\./g.test(host)) {
            return '//photogalleryuploadv2.you.uat.qa.nt.ctripcorp.com/photo/upload';
        } else if(/\.(lpt|fws|fat\d+)\./g.test(host)) {
            return '//photogalleryuploadv2.fws.qa.nt.ctripcorp.com/photo/upload';
        } else {
            return '//youphotogalleryuploadv2.ctrip.com/photo/upload';
        }
    }

    var getCallbackData = function (res) {
        var data = JSON.parse(res);
        var photoId;
        if(data && data.servcode === 2000 && data.data) {
            photoId = data.data.photoid;
        }
        var ack = photoId ? 'Success' : 'Failure';
        return JSON.stringify({
            ResponseStatus: {
                Ack: ack
            },
            result: photoId
        });
    }

    var EasyUpload = function (el, options) {
        this.counter = 0;
        this.target = typeof el == 'object' ? el : $(el);
        this.options = {
            form: $('form')[0],
            url: '', //post url,
            data: {},
            type: 0,            //0产品图片 1商家头像
            onAbort: null, //中断上传
            onError: null,
            onLoadStart: null,
            onProgress: null, //进度显示
            onLoad: null,
            onLoadEnd: null,
            isSecure: false
        };

        for (var i in options) {
            this.options[i] = options[i];
        }

        window.URL = window.URL || window.webkitURL;

    }

    EasyUpload.prototype = {

        tempFiles: [],
        /**
        * 没有base64数据，需要再用filereader来读取的，一般是网页调用
        * limit       上传上限数量
        *
        */
        upload: function (limit, limitCallback, typeCallback) { //开始上传文件
            var _files = this.target.get(0).files;
            if (_files.length > limit) {
                if (limitCallback) {
                    limitCallback();
                }
            } else {
                this._getFiles(_files, typeCallback);
                this._sendFiles();
            }
        },
        /**
        * 已拿到base64数据，一般是hybrid调用的方法
        * imageDatas  base64数据的数组
        * limit       上传上限数量
        *
        */
        uploadBase64: function (imageDatas, limit, limitCallback, typeCallback) {
            if (imageDatas.length > limit) {
                if (limitCallback) {
                    limitCallback();
                }
            } else {
                this._fileUploadBase64(imageDatas);
            }
        },
        //读取实际文件，一般是网页调用
        _getFiles: function (files, typeCallback) {
            this.tempFiles = [];
            if (!files) {
                alert('没选择文件...');
            } else {
                var imageType = /.jpeg|.png|.gif|.jpg/;
                var fileMaxSize = 5242880;
                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    //fixed by ling 有些浏览器没有file.type，这些浏览器只用大小来限制一下。。。
                    if ((file.size >= fileMaxSize) || (file.type && !file.type.match(imageType))) {
                        if (typeCallback) {
                            typeCallback();
                        }
                        continue;
                    }
                    var src = window.URL.createObjectURL(file);
                    window.URL.revokeObjectURL(this.src);
                    file.src = src;
                    this.tempFiles.push(file);
                }
            }
            return this.tempFiles;
        },

        _sendFiles: function () { //执行上传
            for (var i = 0; i < this.tempFiles.length; i++) {
                // var date = '' + new Date().getTime(),
                //     timer = date.substring(1, 3) + date.substring(9);
                this._fileUpload(this.tempFiles[i]);
            }
        },

        //hybrid端调用具体上传逻辑
        _fileUploadBase64: function (files) {
            var that = this,
                xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 1) { //开始上传时触发
                    if (that.options.onLoadStart) that.options.onLoadStart.call(that);
                } else if (xhr.readyState === 4) {
                    //alert(JSON.stringify(xhr.responseText));
                    clearTimeout(that.timeOut);
                    if (that.options.onLoad) {
                        that.options.onLoad(null, getCallbackData(xhr.responseText), files[that.counter]);
                    }
                    that.counter++;

                    if (that.counter >= files.length) {
                        if (that.options.onLoadEnd)
                            that.options.onLoadEnd(files.length);
                        that.counter = 0;
                    } else if (that.counter < files.length) {
                        that._fileUploadBase64(files);
                    }
                }
            }
            this._checkTimeout(xhr);
            xhr.open("POST", getUploadUrl(), true);
            xhr.setRequestHeader("Content-Type", "application/json");

            var jsonData = '';
            if (!!that.options.isSecure) {
                //加密上传，身份证照片等
                jsonData = JSON.stringify({
                    Param: {
                        PhotoData: files[that.counter],
                        Thumbnail: files[that.counter],  //todo give real thumbnail not original photo
                        UploadTime: new Date(),
                        PhotoSize: files[that.counter].size,
                        PublishStatus: 6
                    }
                });
            } else {
                //普通上传
                jsonData = JSON.stringify({
                    Head: that.options.data,
                    Picdata: files[that.counter],
                    TypeID: 1,
                    AppID: 1,
                    BSync: false
                });
            }
            //console.log(jsonData);
            xhr.send(jsonData);

            return that;
        },

        /**
         * 设置超时
         * @param  {[type]} xhr [description]
         * @return {[type]}     [description]
         */
        _checkTimeout: function (xhr) {
            var that = this;
            this.timeOut = setTimeout(function () {
                if (xhr)
                    xhr.abort();
                if (that.options.onTimeout) {
                    that.options.onTimeout(that);
                    that._clear();
                }
            }, TIME_OUT);
        },

        //web端调用具体上传逻辑
        _fileUpload: function (file) {
            var that = this,
                xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 1) { //开始上传时触发
                    if (that.options.onLoadStart) that.options.onLoadStart.call(that);
                } else if (xhr.readyState === 4) {
                    if (that.counter >= that.tempFiles.length) {
                        if (that.options.onLoadEnd)
                            that.options.onLoadEnd(that.tempFiles.length);
                        that.counter = 0;
                    }
                    clearTimeout(that.timeOut);
                }
            }
            this._checkTimeout(xhr);
            xhr.open("POST", getUploadUrl(), true);
            xhr.withCredentials = true;
            // now only ask is using this utility, so hardcode to ask
            xhr.setRequestHeader("scene", "w9cjQC8shXB2SAa3HZUI");
            xhr.setRequestHeader("channel", "ugc_ask");
            xhr.setRequestHeader("BusinessToken", "gs");

            xhr.timeout = TIME_OUT;
            xhr.ontimeout = function (event) {
                if (that.options.onTimeout) {
                    that.options.onTimeout(that);
                    that._clear();
                }
            }
            xhr.onabort = function () { };
            xhr.onerror = function () { };
            xhr.onloadstart = function () { }; //不可用的
            xhr.onprogress = function () { }; //不可用的
            xhr.onload = function (response) {
                var res = response.currentTarget.response;
                if (that.options.onLoad) {
                    that.options.onLoad(file, getCallbackData(res));
                }
            };
            xhr.onloadend = function () {
                that.counter++
                if (that.counter === that.tempFiles.length) {
                    if (that.options.onLoadEnd) that.options.onLoadEnd(that.tempFiles.length);
                    that.counter = 0;
                }
            };
            const formData = new FormData();
            formData.append('file', file)
            xhr.send(formData);

            return that;
        },

        /**
         * 清除前一次内容
         * @return {[type]} [description]
         */
        _clear: function () {
            this.counter = 0;
        }
    };

    return EasyUpload;

});

/*****************************
 基础类 汇总基础方法
 r_gao，wangyong
 ******************************/
define('gsRootView',[
    'cPageList',
    'gsAppAgent',
], function (
    pageList,
    appAgent
) {
    var RootView = pageList.extend({
        // 环境判定
        isHybrid: (function () {
            return appAgent.isHybrid();
        })(),
        isGsHybrid: (function () {
            return appAgent.isGsHybrid();
        })(),
        isWeixin: (function () {
            return appAgent.isWeixinBrowser();
        })(),
        _getAidAndSid: function(callback){
            if (typeof window['__union'] === 'undefined') {
                 window['__union'] = [];
            }
            window['__union'].push({"callback":function(){
                var unionMktStr = window.localStorage.getItem("UNION"), data;
                if(!!unionMktStr){
                    data = JSON.parse(unionMktStr).data || {};
                }
                callback(data);
            }})
        },
        setHeader: function (obj) {
            var _this = this;
            if (obj && obj.back) {
                obj.back = $.extend(true, {}, {
                    color: (_this.isHybrid && appAgent.compareAppVersion("7.6") < 1)? '#333333': '',
                    highlightColor: (_this.isHybrid && appAgent.compareAppVersion("7.6") < 1)? '#333333': ''
                }, obj.back);
                obj.left = [];
                obj.left.push(obj.back);
                delete obj.back;
            } else if(obj && obj.left && _this.isHybrid && appAgent.compareAppVersion("7.6") < 1){
                obj.left.map(function (item) {
                    item.color = '#333333';
                    item.highlightColor = '#333333';
                    return item;
                });
            }

            if (obj && obj.moreMenus && obj.moreMenus.length > 0) {
                obj.right.push({
                    tagname: 'more',
                    color: '#333333',
                    highlightColor: '#333333'
                });
            }

            this.header.set($.extend(true, {}, {
                whiteBackground: (_this.isHybrid && appAgent.compareAppVersion("7.6") < 1) ? true : false,
            }, obj));

        },
        onShow:function(){
            //攻略唤醒统一操作
            if (!Lizard.isHybrid && !Lizard.isInCtripApp) {
                $('body').find('.awakening_bar').remove();
                var css = '<style>.awakening_bar{z-index:9999;width:100%;height:56px;line-height:56px;background:#fff;display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;flex-direction:row}.awakening_bar_bottom{background:rgba(0,0,0,0.7);}.awakening_bar .awakening_infor{-webkit-box-flex:1;box-flex:1;-webkit-flex:1;flex:1;display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;flex-direction:row;padding-left: 12px;}.awakening_bar .awakening_infor .close_btn{display: block;height: 18px;width: 18px;background-image:url(https://pages.c-ctrip.com/you/asks/icon-Close-appLoad.png);background-size: 18px;margin:18px 8px 0 0;}.awakening_bar .awakening_infor .icon{width:40px;height:40px;background-image:url(https://pages.c-ctrip.com/you/asks/ic_logo.png?v=s42);background-size:40px auto;margin:6px 8px 0 0}.awakening_bar .awakening_infor .clue{max-width:210px;margin:6px 0;font-family:PingFangSC-Medium;font-size:12px;color:#333;line-height:19px;display:box;display:-webkit-flex;display:flex;box-orient:vertical;-webkit-flex-direction:column;flex-direction:column;-webkit-box-pack:center;box-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-orient:vertical;display:-webkit-box;-webkit-line-clamp:2;overflow:hidden;word-break:break-all;word-break:break-word}.awakening_bar .awakening_infor .clue .clue_b{font-size:16px;}.awakening_bar_bottom .awakening_infor .clue{color:#fff;}.awakening_bar .awakening_btn{width:78px;height:36px;line-height:36px;font-family:PingFangSC-Medium;font-size:15px;color:#FFF;text-align:center;background:#0086F6;border-radius:4px;margin:10px 12px 0 0}</style>'
                var htmlTop = '<div class="awakening_bar awakening_bar_top">' +
                    '  <div class="awakening_infor">' +
                    '       <i id="c_closealert" class="close_btn awakening_close"></i>' +
                    '       <i class="icon"></i>' +
                    '       <span class="clue"><b class="clue_b">携程<br/></b>打开APP查看更多攻略</span>' +
                    '   </div>' +
                    '   <a id="c_openapp" class="awakening_btn" href="#">打开</a>' +
                    '</div>';
                var htmlBottom = '<div class="awakening_bar awakening_bar_bottom">' +
                    '  <div class="awakening_infor">' +
                    '       <i class="icon"></i>' +
                    '       <span class="clue"><b class="clue_b">携程<br/></b>打开APP查看更多攻略</span>' +
                    '   </div>' +
                    '   <a id="c_openapp" class="awakening_btn" href="#">打开</a>' +
                    '</div>';
                var awak_bar_top = css + htmlTop;
                var awak_bar_bottom = css + htmlBottom;

                //页面顶部唤起
                if(!!Lizard.P('topwakeup')){
                    $('#main').prepend(awak_bar_top);
                }

                //页面底部唤起，div上加上class为js_awak_bar
                if($('.js_awak_bar').length > 0 && !!Lizard.P('bottomwakeup')){
                    $('.js_awak_bar').append(awak_bar_bottom);
                }

                $('.awakening_btn').on('click', function() {
                    Lizard._gs_awkeup_();
                });
                $('.awakening_close').on('click', function() {
                    $('body').find('.awakening_bar_top').remove();
                })
            }
        }
    });

    RootView.prototype._gs_super = function() {
        var caller = arguments.callee.caller;
        var scope = null;
        var scan = this.__proto__;
        var funcName;
        search: while (scope == null && scan != null) {
            var names = Object.getOwnPropertyNames(scan);
            for (var i = 0; i < names.length; i++) {
                if (scan[names[i]] === caller) {
                    scope = scan;
                    funcName=names[i];
                    break search;
                }
            }
            scan = scan.constructor.__super__;
        }
        if (scan.constructor.__super__[funcName]) {
            return scan.constructor.__super__[funcName].apply(this,arguments);
        }
    };

    return RootView;
});
/**
 * Created by wu.hong on 2017/8/18.
 */
define('gsTimeEditor',['UISelect'], function (uiSelect) {
    $.fn.tiemSpanEditor = function (spanArray, callback) {
        //spanArray: 选取的时间段字符串组成的数组，初始为空数组
        //callback: 确定记录一个时间段时留给外部操作的回调函数
        // span: 对外暴露的用于返回处理过的时间段数组的方法
        // TODO: 传入周和时间两个数组对象时给界面勾选预设配置
        // var span = {
        //     timeSet : timeSet(spanArray)
        // };
        
        initial(this, spanArray, callback);
        // return span;
    };
    var reenter = false,

        initial = function (wrap, spanArray, callback) {
            var hour = [],
                minute =[{id: 1, name:'00'},{id:2, name:'30'}],
                weekdays = ['周一','周二','周三','周四','周五','周六','周日'],
                timeSpan = ['09', '00', '21', '00'],//hourly time span initial set
                spanItem = '',//store one span
                template = [
                    '<style type = "text/css">.pick_time{position:absolute;bottom:0;background-color:#fff;width:100%;display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:vertical;box-orient:vertical;-webkit-flex-direction:column;flex-direction:column}.pick_time .config_area{-webkit-box-flex:1;box-flex:1;-webkit-flex:1;flex:1}.pick_time .confirmation{line-height:49px;display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;flex-direction:row}.pick_time .confirmation>div{-webkit-box-flex:1;box-flex:1;-webkit-flex:1;flex:1;text-align:center;font-size:17px;border-width:0;border-top:1px solid #c8c8c8;-webkit-border-image:url("https://pages.c-ctrip.com/you/common/icon_border_half_lightgray.png") 2 stretch;border-image:url("https://pages.c-ctrip.com/you/common/icon_border_half_lightgray.png") 2 stretch}.pick_time .confirmation>div.active{color:#fff;background-color:#0196ff}.pick_time .title{font-size:19px;color:#222;line-height:27px;padding:20px 16px}.pick_time .week_days{margin-top:-4px;margin-bottom:-4px;padding-left:12px;padding-right:12px;font-size:0}.pick_time .week_days .day_item{display:inline-block;padding:4px;width:25%;line-height:36px;text-align:center;font-size:14px;color:#222;-webkit-box-sizing:border-box;box-sizing:border-box}.pick_time .week_days .day_item>span{display:block;position:relative;border-radius:2px}.pick_time .week_days .day_item>span:after{position:absolute;left:0;top:0;z-index:0;width:200%;height:200%;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scale(0.5,0.5);transform:scale(0.5,0.5);pointer-events:none;content:""}.pick_time .week_days .day_item>span:after{border:1px solid #e0e0e0;border-radius:4px}.pick_time .week_days .day_item.active{position:relative;color:#0099f7}.pick_time .week_days .day_item.active:before{content:"";position:absolute;top:4px;left:4px;display:block;width:14px;height:14px;background-image:url("https://pages.c-ctrip.com/you/add_merchant/icon_merchant_7-7.png");background-size:20px auto;background-repeat:no-repeat;background-position-y:-66px}.pick_time .week_days .day_item.active>span:before{position:absolute;top:0;left:0}.pick_time .week_days .day_item.active>span:after{border-color:#0099f7}.pick_time .time_gap_wrap{position:relative}.pick_time .time_gap_wrap:after{content:"";display:block;position:absolute;top:56px;height:68px;width:200%;border-top:1px solid #a3a8ab;border-bottom:1px solid #a3a8ab;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scale(0.5,0.5);transform:scale(0.5,0.5)}.pick_time .time_gap{padding-left:45px;padding-right:45px;padding-bottom:28px;display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;flex-direction:row;-webkit-box-sizing:border-box;box-sizing:border-box}.pick_time .time_gap:before,.pick_time .time_gap:after{content:" ";display:table}.pick_time .time_gap:after{clear:both}.pick_time .time_gap>div{float:left;-webkit-box-flex:1;box-flex:1;-webkit-flex:1;flex:1;text-align:center}.pick_time .time_gap .splitter{font-size:25px;-webkit-align-self:center;align-self:center}.pick_time .time_gap .from_to{-webkit-box-flex:2;box-flex:2;-webkit-flex:2;flex:2;align-self:center}.pick_time .time_gap .from_to:after{content:"";display:block;width:15px;margin:0 auto;border-bottom:1px solid #222}.pick_time .time_gap .cui-roller{width:100%;overflow:hidden;position:relative}.pick_time .time_gap .cui-roller .ul-list{height:100%;text-align:center;z-index:2}.pick_time .time_gap .cui-roller .ul-list li{height:28px;line-height:28px;font-size:20px;color:#666}.pick_time .time_gap .cui-roller .ul-list li.current{height:35px;line-height:35px;font-size:25px;color:#222}.pick_time .time_gap .cui-roller .cui-lines{display:none}</style>',
                    '<div class="pick_time">',
                    '<div class="config_area">',
                    '<div class="title">选择营业时间</div>',
                    '<div class="week_days"></div>',
                    '<div class="title">选择营业时间</div>',
                    '<div class="time_gap_wrap">',
                    '<div class="time_gap">',
                    '<div class="time_element js_start_hour"></div>',
                    '<div class="splitter">:</div>',
                    '<div class="time_element js_start_minute"></div>',
                    '<div class="from_to"></div>',
                    '<div class="time_element js_close_hour"></div>',
                    '<div class="splitter">:</div>',
                    '<div class="time_element js_close_minute"></div>',
                    '</div>',
                    '</div>',
                    '<div>',
                    '<div class="confirmation">',
                    '<div class="option js_cancel">取消</div>',
                    '<div class="option js_confirm active">确定</div>',
                    '</div>',
                    '</div>'
                ].join("\n");

            if(!reenter){
                //apply template
                $(wrap).show().html(template);
                //generate number for hour
                for(i=1; i<25; i++){
                    var temp = {
                        id: i,
                        name: i<10 ? '0'+i : i.toString()
                    };
                    hour.push(temp);
                }

                //generate week checkbox
                weekdays.forEach(function (day) {
                    $('.week_days').append('<div class="day_item active"><span>'+ day +'</span></div>');
                });

                $('.day_item').click(function (e) {
                    $(e.currentTarget).toggleClass("active");
                });

                launchTimeScroll(hour, minute, timeSpan);

                //exit opening time setting
                $('.js_cancel').click(function () {
                    $(wrap).hide();
                });
                $('.js_confirm').click(function () {
                    $(this).addClass('active').siblings().removeClass('active');
                    spanItem = weekStringHandler();
                    if(spanItem == ''){
                        $(wrap).hide();
                    }else{
                        spanItem = spanItem + timeSpan[0] + ':' + timeSpan[1] + '-' + timeSpan[2] + ':' + timeSpan[3];
                        // console.log(spanArray);
                        spanArray.push(spanItem);
                        $(wrap).hide();
                        if(!!callback){
                            callback(spanArray);
                        }
                    }
                });

                reenter = true;
            }else{
                $(wrap).show();
            }

        },

    //launch time scroll set
        launchTimeScroll = function (hour, minute, timeSpan) {
            if(!this.startHourSet){
                this.startHourSet = new uiSelect({
                    datamodel: {
                        data: hour,
                        id: 9
                    },
                    displayNum: 5,
                    changed: function (item) {
                        timeSpan[0] = item.name;
                    },
                    wrapper: this.$('.js_start_hour')
                });
            }

            if(!this.startMinuteSet){
                this.startMinuteSet = new uiSelect({
                    datamodel: {
                        data: minute
                    },
                    displayNum: 5,
                    changed: function (item) {
                        timeSpan[1] = item.name;
                    },
                    wrapper: this.$('.js_start_minute')
                });
            }

            if(!this.closeHourSet){
                this.closeHourSet = new uiSelect({
                    datamodel: {
                        data: hour,
                        id: 21
                    },
                    displayNum: 5,
                    changed: function (item) {
                        timeSpan[2] = item.name;
                    },
                    wrapper: this.$('.js_close_hour')
                });
            }

            if(!this.closeMinuteSet){
                this.closeMinuteSet = new uiSelect({
                    datamodel: {
                        data: minute
                    },
                    displayNum: 5,
                    changed: function (item) {
                        timeSpan[3] = item.name;
                    },
                    wrapper: this.$('.js_close_minute')
                });
            }
            this.startHourSet.show();
            this.startMinuteSet.show();
            this.closeHourSet.show();
            this.closeMinuteSet.show();
        },

    //split continuous numbers from array
        streamHandler = function (array, solo, stream) {
            var predict,
                flag = 0;
            stream[0] = [];
            stream[1] = [];
            for(i=0; i<array.length; i++){
                if(array[i]== predict || array[i+1] == array[i]+1){
                    stream[flag].push(array[i]);
                    if(array[i+1] !== array[i]+1){
                        flag = 1;
                    }
                }else {
                    solo.push(array[i]);
                }
                predict = array[i]+1;
            }
        },

    //make week selection readable string
        weekStringHandler = function () {
            var selectedDays = [],
                tempKeys = [],
                stream= [],
                solo=[],
                streamValue = [],
                soloValue = [],
                tempString = '',
                description='';

            $('.day_item').each(function(i){
                if($(this).hasClass("active")){
                    selectedDays.push({key: i, value:$(this)});
                    tempKeys.push(i);
                }
            });

            streamHandler(tempKeys,solo, stream);

            //make continuous week days a readable string
            stream.concat([]).forEach(function (s,i) {
                var flag = false;
                if(s.length<3){
                    solo = solo.concat(s);
                    stream.splice(i, 1);
                    solo.sort();
                }else{
                    s.forEach(function (t, i) {
                        streamValue = selectedDays.filter(function( obj ) {
                            return obj.key == t;
                        });
                        if(!flag){
                            tempString = tempString + streamValue[0].value.text() + '至';
                            flag = true;
                        }
                    });
                    tempString = tempString + streamValue[0].value.text() + ' ';
                }
            });

            solo.forEach(function (s, i) {
                soloValue = selectedDays.filter(function( obj ) {
                    return obj.key == s;
                });
                if(i!==0){
                    description = description + '、' + soloValue[0].value.text() ;
                }else{
                    description = description + soloValue[0].value.text() ;
                }
            });

            description = description!=='' ?(description+ ' ' + tempString): tempString;
            return description;
        };

    timeSet = function (obj) {
        return obj;
    }
});
define('gsRealName',["gsAppAgent", "gsRouterRedirect", "gsBusinessJob"], function (appAgent, RouterRedirect, businessJob) {

    var RealName = {
        checkRealName: function (param) {

            if (appAgent.isHybrid()) {
                businessJob.doBusinessJob({
                    port: 1,
                    businessCode : "checkRealName",
                    data:{},
                    callback: function(res){
                        if (res.param.statusCode == 0) {
                            param.successCallback();
                        } else {
                            param.failCallback();
                        }
                    }
                });
            } else {
                CRealName.realNameBiz.hasRealName(function (data) {
                    if (data.returncode == 0 && data.isRealName) {
                        param.successCallback();
                    } else {
                        if (param.flag && failCallback) {
                            param.failCallback();
                        } else {
                            RouterRedirect.toJump({
                                url: [CRealName.domainUtil.getRealNameUrl() + "?from=" + param.from + "&backurl=" + param.from],
                                targetModel: 2
                            });            
                        }
                    }
                })
            }
        },

        goToRealNamePage: function (param) {
            if (!appAgent.isHybrid()) {
                RouterRedirect.toJump({
                    url: [CRealName.domainUtil.getRealNameUrl() + "?from=" + param.from + "&backurl=" + param.from],
                    targetModel: 2
                });
            }
        }
    };

    return RealName;
});
/**
 * Created by wangyonga on 2017/8/21.
 */
define('gsExtendImgUploader',[
    'gsImgUpLoader',
    'UIScroll',
    'gsAppAgent',
    'cGuiderService',
],function (
    EasyUpload,
    UIScroll,
    gsAppAgent,
    cGuiderService
) {
    var extendImgUpload=function (options) {
        /*this.options={
         currentPage:'',//--------------------------------------------当前页面this,必传
         title:'上传图片',//------------------------------------------插件标题
         content:'提供图片有利于我们审核',//---------------------------插件提示内容
         isSecure:false,//--------------------------------------------图片是否加密上传
         imgMaxNum:5,//-----------------------------------------------上传图片最大数量
         }*/
        this.options={};
        this.options.currentPage=options.currentPage||'';
        this.options.title=options.title||'';
        this.options.content=options.content||'';
        this.options.apiUrl=options.apiUrl||Lizard.restfullApiHttps + "11270/LPPhotoUpload";
        this.options.isSecure=options.isSecure||false;
        this.options.imgMaxNum=options.imgMaxNum||5;
        this.options.pro = options.pro || undefined;//为了解决头部是自己写的不用native头部的时候导致的双头问题传进去一个自定义方法执行

        this.init.apply(this);
    };
    extendImgUpload.prototype={
        init:function () {
            this.initResource();
            this.addCssStyle();
            this.addTmp();
            this.bindEvent();
            this.initEasyUpload();
        },
        initResource:function () {
            this.$tmp=$(this.htmlStr);
            this.$css=$(this.cssStr);
            this.$upload_photo=this.options.currentPage.$('.upload_photo');
            this.$appue_max_photo=this.options.currentPage.$('.appue_max_photo');
        },
        bindEvent:function () {
            var eventCell=this.options.currentPage,
                _this=this;
            eventCell.$('.js_img_upload').off('change').on('change',function () {
                _this.imgUpLoad();
            });

            eventCell.$('.js_upload').off('click').on('click',function () {
                _this.onImgUpLoadBase64();
            });

            $('body').undelegate().delegate('.max_photo','click',function (e) {
                var $current=$(e.currentTarget);
                var $img=null;
                $img=$current.find('img').clone();
                $img.data('index',_this.$upload_photo.find('li').index($current));
                _this.showWebMaxPhoto($img);
            });

            //看大图事件绑定
            eventCell.$('.max_photo_close').off('click').on('click',function () {
                _this.$appue_max_photo.hide();
                if(Lizard.isHybrid || Lizard.isInCtripApp){
                    CtripBar.app_set_navbar_hidden(false);
                }
                //为了解决头部是自己写的不用native头部的时候导致的双头问题传进去一个自定义方法执行
                _this.options.pro && _this.options.pro();
            });

            eventCell.$('.max_photo_delete').off('click').on('click',function () {
                var index=_this.$appue_max_photo.find('img').data('index');
                _this.$upload_photo.find('li').eq(index).remove()
                _this.updateImgUploadState();
                _this.$appue_max_photo.hide();
                if (_this.getImgSize()==0) {
                    _this.$upload_photo.find('.text').show();
                    _this.$upload_photo.find('ul').hide();
                }
                if(Lizard.isHybrid || Lizard.isInCtripApp){
                    CtripBar.app_set_navbar_hidden(false);
                }
                //为了解决头部是自己写的不用native头部的时候导致的双头问题传进去一个自定义方法执行
                _this.options.pro && _this.options.pro();
            })

        },
        addCssStyle:function () {
            this.$upload_photo.before(this.$css);
        },
        addTmp:function () {
            //上传图片
            this.$upload_photo.html(this.$tmp);
            if(gsAppAgent.isAndroid()){
                this.$upload_photo.find('.camera').addClass('js_upload');
            }

            if(this.options.title.length>0){
                this.$upload_photo.find('.extend_image_upload_title').show().html(this.options.title);
            }
            if(this.options.content.length>0){
                this.$upload_photo.find('.extend_image_upload_content').show().html(this.options.content);
            }
            //web看大图
            this.$max_photo=$(this.htmlMaxPhoto);
            this.options.currentPage.$el.append(this.$max_photo);

            //初始化添加节点后的变量
            this.initResource();

        },
        initScroll:function () {
            this.scroll=null;
            this.scroll=new UIScroll({
                scrollType: 'x',
                scrollbars: false,
                wrapper: this.options.currentPage.$('.hot-scenic'),
                scroller: this.options.currentPage.$('.hot-scenic ul'),
            });
        },
        showWebMaxPhoto:function ($img) {
            var _this=this;
            _this.$appue_max_photo.find('li').html($img);
            _this.$appue_max_photo.show();
            if(Lizard.isHybrid || Lizard.isInCtripApp){
                CtripBar.app_set_navbar_hidden(true);
            }
        },
        updateScrollWidth:function () {
            var liWidth=parseInt(this.options.currentPage.$('.hot-scenic ul li img').eq(0).width())+10;
            var liLength=this.options.currentPage.$('.hot-scenic ul li').length;
            this.options.currentPage.$('.hot-scenic ul').width(liWidth*liLength);
        },
        getImgSize:function () {
            return parseInt(this.$upload_photo.find('ul li').length||0);
        },
        initEasyUpload:function () {
            var _this = this;
            if (typeof FileReader === 'undefined') {
                Lizard.showToast('抱歉，当前设备不支持图片上传');
                this.options.currentPage.$upload_photo.hide();
            } else {
                _this.easyUpload = null;
                _this.easyUpload = new EasyUpload('.js_img_upload', {
                    form: _this.$upload_photo.find('#uploadForm'),
                    url: this.options.apiUrl,
                    isSecure:this.options.isSecure,
                    data: function () {
                        return {
                            "syscode": "09",
                            "lang": "01",
                            "cver": "1.0"
                        }
                    }(),
                    type: 1,
                    onAbort: function () { Lizard.hideLoading(); },
                    onError: function () { Lizard.hideLoading(); },
                    onTimeout: function (obj) {
                        Lizard.showToast("请求失败，请重试");
                        Lizard.hideLoading();
                    },
                    onLoadStart: function () {
                        Lizard.showLoading();
                    },

                    onProgress: function () { },
                    onLoad: function (file, response, base64data) {
                        var res = $.parseJSON(response);
                        if (res.ResponseStatus.Ack == "Success") {
                            /*file.src 为图片地址 res.ImageId为图片ID*/
                            var oLi = document.createElement('li');
                            var oImg = document.createElement('img');
                            oLi.className = "max_photo";
                            if (file !== null && file.src !== null) {
                                oImg.src = file.src;
                                oImg.setAttribute("data-id",res.result);
                                oLi.appendChild(oImg);
                                oLi.setAttribute("data-id",res.result);
                                _this.$upload_photo.find('ul').append(oLi);
                            } else if (base64data !== null) {
                                oImg.src='data:image/png;base64,'+base64data;
                                oImg.setAttribute("data-id",res.result);
                                oLi.appendChild(oImg);
                                oLi.setAttribute("data-id",res.result);
                                _this.$upload_photo.find('ul').append(oLi);
                            }
                        } else {
                            Lizard.showToast("请求失败，请重试");
                        };
                    },
                    onLoadEnd:function () {
                        _this.updateScrollWidth();
                        _this.initScroll();

                        if (_this.getImgSize()>0) {
                            _this.$upload_photo.find('.text').hide();
                            _this.$upload_photo.find('ul').show();
                        }else{
                            _this.$upload_photo.find('.text').show();
                            _this.$upload_photo.find('ul').hide();
                        }
                        Lizard.hideLoading();
                        _this.updateImgUploadState();
                    }
                });
            }
        },
        updateImgUploadState:function () {
            var _this=this;
            //图片数量达到最大值，禁止触发事件
            if(_this.getImgSize()>=_this.options.imgMaxNum){
                _this.$upload_photo.find('.camera_wrap ').hide();
            }else {
                _this.$upload_photo.find('.camera_wrap ').show();
            }
            _this.getImageId();
        },
        getImageId:function () {
            var id=[];
            this.$upload_photo.find('li').each(function () {
                id.push($(this).data('id'));
            });
            return id;
        },
        imgUpLoad: function (e) {
            var _this = this,
                max = this.options.imgMaxNum,
                n = this.getImgSize(),
                dis = max - n;

            _this.easyUpload.upload(dis, function () {
                Lizard.showToast('你最多可以传'+max+'张图片', 2000);
            }, function () {
                Lizard.showToast('当前上传图片格式不正确', 2000);
            });
        },

        onImgUpLoadBase64: function () {
            var _this = this,
                choosePhotoCb = function (param) {
                    var listData = param.photoList,
                        datalen = listData.length;
                    if (datalen) {
                        _this.easyUpload.uploadBase64(listData);
                        return true;
                    }
                };
            cGuiderService.choose_photo({
                maxFileSize: parseInt(1024*_this.options.imgMaxNum),
                maxPhotoCount: _this.options.imgMaxNum,
                callback: choosePhotoCb });
        },
    };
    var isphonex=function () {
        if( /isiphonex/.test(navigator.userAgent.toLowerCase())){
           return 'extend_img_app_x'
        }
        return '';
    }();
    extendImgUpload.prototype.htmlStr= [
        '<form class="upload_form" id="uploadForm" enctype="multipart/form-data" method="post">',
        '<div class="comment_container">',
        '<div class="upload_photos">',
        '<div class="camera_wrap ">',
        '<div class="camera">',
        '<input class="js_img_upload photo_tips nofastclick" accept="image/*" type="file" style="opacity:0" multiple="multiple" />',
        '</div>',
        '</div>',
        '<div class="hot-scenic">',
        '<ul style="display:;width:1200px;"></ul>',
        '</div>',
        '</div>',
        '</div>',
        '</form>',
        '<div class="text" style="display:;">',
        '<h3 class="extend_image_upload_title" style="display: none;"></h3>',
        '<p  class="extend_image_upload_content" style="display: none;"></p>',
        '</div>'
    ].join("\n");

    extendImgUpload.prototype.htmlMaxPhoto=['<section class="appue_max_photo '+isphonex+'" style="display:none ;"> ',
        '<div class="max_photo_close this_return"></div> ',
        '<div class="max_photo_delete dump"></div> ',
        '<ul class="max_photo_img this_img"><li></li></ul> ',
        '</section> '].join("\n");
    extendImgUpload.prototype.cssStr= '<style>.upload_photo{background:#fff;padding:16px 0;position:relative;margin-left:15px;border-width:0;border-bottom:1px solid #c8c8c8;-webkit-border-image:url("https://pages.c-ctrip.com/you/common/icon_border_half_lightgray.png") 2 stretch;border-image:url("https://pages.c-ctrip.com/you/common/icon_border_half_lightgray.png") 2 stretch}.upload_photo .upload_photos{display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;flex-direction:row}.upload_photo .camera{position:relative;width:70px;height:70px;margin-right:8px;background:url("https://pages.c-ctrip.com/you/add_merchant/camera.png") no-repeat;background-size:70px 70px}.upload_photo .hot-scenic{-webkit-box-flex:1;box-flex:1;-webkit-flex:1;flex:1;overflow:hidden;position:relative;width:100%;height:70px;background:#fff}.upload_photo .hot-scenic:before,.upload_photo .hot-scenic:after{content:" ";display:table}.upload_photo .hot-scenic:after{clear:both}.upload_photo .hot-scenic ul{position:absolute;left:0;top:0;height:auto;display:box;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;flex-direction:row}.upload_photo .hot-scenic ul li{width:70px;height:auto;display:block;margin-left:10px}.upload_photo .hot-scenic ul li:first-child{margin-left:0}.upload_photo .hot-scenic ul li img{width:70px;height:70px;background:#e9e9e9 url("https://pages.c-ctrip.com/you/component-local/default130.png") no-repeat 50% 50%;background-size:48px 48px}.upload_photo .hot-scenic ul li span{color:#999;font-size:12px}.upload_photo .text{display:inline-block;position:absolute;top:32px;left:86px}.upload_photo .text h3{font-size:15px;line-height:21px;color:#666}.upload_photo .text p{color:#b5b7b8;font-size:12px}.upload_photo .photo_tips{width:70px;height:70px}.upload_photo ul:before,.upload_photo ul:after{content:" ";display:table}.upload_photo ul:after{clear:both}.upload_photo ul li{float:left;display:block;margin-left:8px}.upload_photo ul li.upload_photo{border-bottom-width:0;padding:0}.upload_photo ul img{width:50px;height:50px}.appue_max_photo{position:fixed;left:0;top:0;z-index:999999999;width:100%;height:100%;background:#000}.appue_max_photo .this_return{width:44px;height:44px;position:absolute;left:0;top:0;z-index:3}.appue_max_photo .this_return:before,.appue_max_photo .this_return:after{display:block;content:"";width:12px;height:2px;background:#fff;position:absolute;left:15px}.appue_max_photo .this_return:before{top:18px;-webkit-transform:rotate(-45deg)}.appue_max_photo .this_return:after{top:26px;-webkit-transform:rotate(45deg)}.appue_max_photo .dump{position:absolute;height:44px;width:44px;right:0;z-index:3}.appue_max_photo .dump:before{content:"";display:block;background:url("https://pages.c-ctrip.com/you/component-local/detel.png") no-repeat;background-size:30px 30px;width:30px;height:30px;position:absolute;margin-top:-15px;margin-left:-15px;top:50%;left:50%}.appue_max_photo .this_img{position:absolute;left:0;top:0;right:0;height:100%;font-size:0;padding:0;display:-webkit-box;-webkit-box-align:center;-webkit-box-pack:center}.appue_max_photo .this_img li{display:block;text-align:center;position:relative}.appue_max_photo .this_img li:before{display:inline-block;content:"";width:0;height:100%;vertical-align:middle}.appue_max_photo .this_img li img{max-width:100%;max-height:100%;vertical-align:middle}.appue_max_photo.extend_img_app_x .this_return {top: 44px;}.appue_max_photo.extend_img_app_x .dump {top: 44px;}</style>';
    return extendImgUpload;
});

define('gsVideo',['gsAppAgent', 'gsRouterRedirect'], function (appAgent, gsRouterRedirect) {
    // 通用模板
    var normalTpl = '<div class="vr_player">' +
                        '<video preload="none" class="vr"></video>' + 
                        '<div class="modal"></div>' + 
                        '<div style="display:none" class="loading">' + 
                            '<div class="icon icon_loading"></div>' +
                        '</div>' + 
                        '<div class="controller play"></div>' + 
                        '<div class="ctrl_bar">' + 
                            '<div class="btn_action play"></div>' +
                            '<div style="display:none" class="btn_action stop"></div>' +
                            '<div class="progress">' +
                                '<div class="total"></div>' +
                                '<div class="watched" style="width:0;"></div>' +
                                '<div class="drag_ball" style="left:0;"></div>' +
                            '</div>' +
                            '<div class="time">' +
                                '<span class="current_time">00:00</span>/<span class="total_time">00:00</span>' +
                            '</div>' +
                            '<div class="full_screen full"></div>' +
                            '<div style="display:none" class="full_screen regular"></div>' +
                        '</div>' +
                    '</div>';
    // 苹果机型模板
    var iosTpl = '<div class="vr_player">' +
                        '<video preload="none" controls  webkit-playsinline="webkit-playsinline" class="vr"></video>' + 
                    '</div>';
    // 插件内部属性
    var config;
    
    // 对外初始化接口
    $.fn.videoinit = function (param) {
        var _this = this;
        var callback = function () {
            // 添加节点
            if (appAgent.isHybrid()) {
                $(_this).html(normalTpl);
            } else {
                if (appAgent.isApple()) {
                    $(_this).html(iosTpl);
                } else {
                    $(_this).html(normalTpl);
                }
            }
            

            // video监听事件绑定
            videoListener();
            // video动作事件绑定
            videoActionBind();

            config = param;

            // 设置视频的url
            $(_this).find("video").attr("src", param.url);
            // 设置封面图
            $(_this).find("video").attr("poster", param.poster);
            // 预加载
            if (param.preload) {
                $(_this).find("video").attr("preload", "auto");
            }
            // 自动播放
            if (param.autoplay) {
                videoPlay($(_this).find("video"));
            }
        };

        // 添加css
        if (!param.skin) {
            param.skin = "default";
        }

        if ($("link[data-name='media']").length != 0) {
            callback();
        } else {
            loadCss(Lizard.webresourceBaseUrl + "build/media/" + param.skin +".css", callback)
        }

    };

    // 播放事件处理
    var videoPlay = function (videoEle) {
        if (appAgent.isHybrid()) {
            window.CtripUtil.app_open_url("ctrip://wireless/destination/toNormalVideo?url=" + encodeURIComponent(videoEle.attr("src")), 1);
            return;
        }

        if ($("video[data-state='play']").length != 0) {
            // 停止其他播放的video元素
            $("video[data-state='play']")[0].pause();
            $("video[data-state='play']").parents(".vr_player").find(".controller.play").show();
            $("video[data-state='play']").parents(".vr_player").find(".btn_action.stop").hide();
            $("video[data-state='play']").parents(".vr_player").find(".btn_action.play").show();
            $("video[data-state='play']").parents(".vr_player").find(".ctrl_bar").removeClass("active");
            $("video[data-state='play']").data("state", "pause");
        }

        // 切换当前控制条的按钮
        videoEle.parents(".vr_player").find(".controller.play").hide();
        videoEle.parents(".vr_player").find(".btn_action.play").hide();
        videoEle.parents(".vr_player").find(".btn_action.stop").show();
        videoEle.parents(".vr_player").find(".loading").show();
        videoEle.parents(".vr_player").find(".ctrl_bar").addClass("active");
        videoEle.data("state", "play");
        videoEle[0].play();

    }

    // 暂停事件绑定
    var videoPause = function (videoEle) {
        // 切换当前控制条的按钮
        videoEle.parents(".vr_player").find(".controller.play").show();
        videoEle.parents(".vr_player").find(".btn_action.stop").hide();
        videoEle.parents(".vr_player").find(".btn_action.play").show();
        if (!videoEle.parents(".vr_player").hasClass("fullscreen_mode")) {
            videoEle.parents(".vr_player").find(".ctrl_bar").removeClass("active");
        }
        videoEle.data("state", "pause");
        videoEle[0].pause();
    }

    // 全屏事件绑定
    var videoFullScreen = function (videoEle) {
        // 切换当前控制条的按钮
        videoEle.parents(".vr_player").find(".full_screen").hide();
        videoEle.parents(".vr_player").find(".full_screen.regular").show();
        videoEle.parents(".vr_player").addClass("fullscreen_mode");

        if(videoEle[0].requestFullscreen) {
            videoEle[0].requestFullscreen();
        } else if(videoEle[0].webkitRequestFullscreen) {
            videoEle[0].webkitRequestFullScreen();
        } else if (videoEle[0].webkitEnterFullscreen) {
            videoEle[0].webkitEnterFullscreen();
        }
    }

    // 退出全屏事件绑定
    var videoExitFullScreen = function (videoEle) {
        // 切换当前控制条的按钮
        videoEle.parents(".vr_player").find(".full_screen.regular").hide();
        videoEle.parents(".vr_player").find(".full_screen.full").show();
        videoEle.parents(".vr_player").removeClass("fullscreen_mode");

        if(document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.webkitCancelFullScreen) {
            document.webkitCancelFullScreen();
        } else if (document.webkitExitFullScreen) {
            document.webkitExitFullScreen();
        }

        if (videoEle.data("state") == "pause" || videoEle.data("state") == "end") {
            videoEle.find(".ctrl_bar").removeClass("active");
        }
    }

    // 监听事件
    var videoListener = function () {
        if (appAgent.isHybrid() || !appAgent.isApple()) {
            // video播放结束事件
            $("video").bind("ended", function () {
                $(this).data("state", "end");
                $(this).parents(".vr_player").find(".controller.play").show();
                $(this).parents(".vr_player").find(".btn_action.stop").hide();
                $(this).parents(".vr_player").find(".btn_action.play").show();
                if (!$(this).parents(".vr_player").hasClass("fullscreen_mode")) {
                    $(this).parents(".vr_player").find(".ctrl_bar").removeClass("active");
                }
            });
            // video可以播放
            $("video").bind("canplay", function () {
                $(this).parents(".vr_player").find(".loading").hide();
            });
            // video可以不因缓冲进行播放
            $("video").bind("canplaythrough", function () {
                $(this).parents(".vr_player").find(".loading").hide();
            });
            // video开始播放
            $("video").bind("play", function () {
                $(this).parents(".vr_player").find(".loading").hide();
            });
            // video因缓冲而暂停或停止后已就绪
            $("video").bind("playing", function () {
                $(this).parents(".vr_player").find(".loading").hide();
            });
            // video暂停
            $("video").bind("pause", function () {
                $(this).parents(".vr_player").find(".controller.play").show();
                $(this).parents(".vr_player").find(".btn_action.stop").hide();
                $(this).parents(".vr_player").find(".btn_action.play").show();
                if (!$(this).parents(".vr_player").hasClass("fullscreen_mode")) {
                    $(this).parents(".vr_player").find(".ctrl_bar").removeClass("active");
                }
                $(this).data("state", "pause");
            });
            // video加载下一帧而暂停缓冲
            $("video").bind("waiting", function () {
                $(this).parents(".vr_player").find(".loading").show();
            });
            // video获取时长
            $("video").bind("durationchange", function () {
                $(this).parents(".vr_player").find(".total_time").text(formatSeconds(this.duration));
            });
            // 播放时间更新
            $("video").bind("timeupdate", function () {
                $(this).parents(".vr_player").find(".current_time").text(formatSeconds(this.currentTime));
                // 更新进度条
                var progress = this.currentTime / this.duration * 100 + "%";
                $(this).parents(".vr_player").find(".watched").css("width", progress);
                $(this).parents(".vr_player").find(".drag_ball").css("left", progress);
            });
            // 退出全屏事件监听
            document.addEventListener("fullscreenchange", function(e) {
                if ($(e.target).offset().height == 250) {
                    $(e.target).parents(".vr_player").find(".full_screen.regular").hide();
                    $(e.target).parents(".vr_player").find(".full_screen.full").show();
                    $(e.target).parents(".vr_player").removeClass("fullscreen_mode");

                    if ($(e.target).data("state") == "pause" || $(e.target).data("state") == "end") {
                        $(e.target).parents(".vr_player").find(".ctrl_bar").removeClass("active");
                    }
                }
            });

            document.addEventListener("webkitfullscreenchange", function(e) {
                if ($(e.target).offset().height == 250) {
                    $(e.target).parents(".vr_player").find(".full_screen.regular").hide();
                    $(e.target).parents(".vr_player").find(".full_screen.full").show();
                    $(e.target).parents(".vr_player").removeClass("fullscreen_mode");

                    if ($(e.target).data("state") == "pause" || $(e.target).data("state") == "end") {
                        $(e.target).parents(".vr_player").find(".ctrl_bar").removeClass("active");
                    }
                }
            });
        }

        // 播放被废弃处理
        $("video").bind("abort", function () {
            // 替换备用链接
            $(this).attr("src", config.reserveUrl);
        });
    }

    // 动作事件绑定
    var videoActionBind = function () {
        if (!appAgent.isHybrid() && appAgent.isApple()) {
            return;
        }

        // 控制条播放按钮
        $(".vr_player .btn_action.play").off().on("click", function () {
            var videoEle = $(this).parents(".vr_player").find("video");
            videoPlay(videoEle);
        });

        // 控制条暂停按钮
        $(".vr_player .btn_action.stop").off().on("click", function () {
            var videoEle = $(this).parents(".vr_player").find("video");
            videoPause(videoEle);
        });

        // 控制条全屏按钮
        $(".vr_player .full_screen.full").off().on("click", function () {
            var videoEle = $(this).parents(".vr_player").find("video");
            videoFullScreen(videoEle);
        });

        // 控制条退出全屏按钮
        $(".vr_player .full_screen.regular").off().on("click", function () {
            var videoEle = $(this).parents(".vr_player").find("video");
            videoExitFullScreen(videoEle);
        });

        // 中央播放按钮
        $(".vr_player .controller.play").off().on("click", function () {
            var videoEle = $(this).parents(".vr_player").find("video");
            videoPlay(videoEle);
        });
    }

    // 格式化播放时间
    var formatSeconds = function (time) {
        var sec = parseInt(time) || 0,
            min = 0,
            result = "";

        if(sec > 60) {
            min = parseInt(sec / 60);
            sec = parseInt(sec % 60);
        }

        if (sec.toString().length < 2) {
            sec = "0" + sec;
        }
        
        if (min.toString().length < 2) {
            min = "0" + min;
        }

        result = min + ":" + sec;

        return result;
    }

    // 动态加载css
    var loadCss =  function (src, fn) {
        var node = document.createElement('link');
        
        node.rel = 'stylesheet';
        node.href = src;
        node.dataset.name = "media";

        document.head.appendChild(node);
        
        if (node.attachEvent) {
            node.attachEvent('onload', function () {
                fn()
            });
        } else {
           setTimeout(function () {
             poll(node, fn);
           }, 0); // for cache
        }

        function poll (node, callback) {
            var isLoaded = false;
            if (/webkit/i.test(navigator.userAgent)) {//webkit
                if (node['sheet']) {
                    isLoaded = true;
                }
            } else if (node['sheet']){// for Firefox
                try {
                    if (node['sheet'].cssRules) {
                          isLoaded = true;
                    }
                  } catch (ex) {
                    // NS_ERROR_DOM_SECURITY_ERR
                    if (ex.code === 1000) {
                         isLoaded = true;
                    }
                }
            }
            if (isLoaded) {
                setTimeout(function () {
                    callback();
                }, 1);
            } else {
                setTimeout(function () {
                    poll(node, callback);
                }, 10);
            }
        }

        node.onLoad = function(){
            fn();
        }
    }

});
